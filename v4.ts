/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Linode API
 * ## Introduction
The Linode API provides the ability to programmatically manage the full
range of Linode products and services.

This reference is designed to assist application developers and system
administrators.  Each endpoint includes descriptions, request syntax, and
examples using standard HTTP requests. Response data is returned in JSON
format.


This document was generated from our OpenAPI Specification.  See the
<a target="_top" href="https://www.openapis.org">OpenAPI website</a> for more information.

<a target="_top" href="/docs/api/openapi.yaml">Download the Linode OpenAPI Specification</a>.


## Changelog

<a target="_top" href="/docs/products/tools/api/release-notes/">View our Changelog</a> to see release
notes on all changes made to our API.

## Access and Authentication

Some endpoints are publicly accessible without requiring authentication.
All endpoints affecting your Account, however, require either a Personal
Access Token or OAuth authentication (when using third-party
applications).

### Personal Access Token

The easiest way to access the API is with a Personal Access Token (PAT)
generated from the
<a target="_top" href="https://cloud.linode.com/profile/tokens">Linode Cloud Manager</a> or
the [Create Personal Access Token](/docs/api/profile/#personal-access-token-create) endpoint.

All scopes for the OAuth security model ([defined below](/docs/api/#oauth)) apply to this
security model as well.

### Authentication

| Security Scheme Type: | HTTP |
|-----------------------|------|
| **HTTP Authorization Scheme** | bearer |

## OAuth

If you only need to access the Linode API for personal use,
we recommend that you create a [personal access token](/docs/api/#personal-access-token).
If you're designing an application that can authenticate with an arbitrary Linode user, then
you should use the OAuth 2.0 workflows presented in this section.

For a more detailed example of an OAuth 2.0 implementation, see our guide on [How to Create an OAuth App with the Linode Python API Library](/docs/products/tools/api/guides/create-an-oauth-app-with-the-python-api-library/#oauth-2-authentication-exchange).

Before you implement OAuth in your application, you first need to create an OAuth client. You can do this [with the Linode API](/docs/api/account/#oauth-client-create) or [via the Cloud Manager](https://cloud.linode.com/profile/clients):

  - When creating the client, you'll supply a `label` and a `redirect_uri` (referred to as the Callback URL in the Cloud Manager).
  - The response from this endpoint will give you a `client_id` and a `secret`.
  - Clients can be public or private, and are private by default. You can choose to make the client public when it is created.
    - A private client is used with applications which can securely store the client secret (that is, the secret returned to you when you first created the client). For example, an application running on a secured server that only the developer has access to would use a private OAuth client. This is also called a confidential client in some OAuth documentation.
    - A public client is used with applications where the client secret is not guaranteed to be secure. For example, a native app running on a user's computer may not be able to keep the client secret safe, as a user could potentially inspect the source of the application. So, native apps or apps that run in a user's browser should use a public client.
    - Public and private clients follow different workflows, as described below.

### OAuth Workflow

The OAuth workflow is a series of exchanges between your third-party app and Linode. The workflow is used
to authenticate a user before an application can start making API calls on the user's behalf.

Notes:

- With respect to the diagram in [section 1.2 of RFC 6749](https://tools.ietf.org/html/rfc6749#section-1.2), login.linode.com (referred to in this section as the *login server*)
is the Resource Owner and the Authorization Server; api.linode.com (referred to here as the *api server*) is the Resource Server.
- The OAuth spec refers to the private and public workflows listed below as the [authorization code flow](https://tools.ietf.org/html/rfc6749#section-1.3.1) and [implicit flow](https://tools.ietf.org/html/rfc6749#section-1.3.2).

| PRIVATE WORKFLOW | PUBLIC WORKFLOW |
|------------------|------------------|
| 1.  The user visits the application's website and is directed to login with Linode. | 1.  The user visits the application's website and is directed to login with Linode. |
| 2.  Your application then redirects the user to Linode's [login server](https://login.linode.com) with the client application's `client_id` and requested OAuth `scope`, which should appear in the URL of the login page. | 2.  Your application then redirects the user to Linode's [login server](https://login.linode.com) with the client application's `client_id` and requested OAuth `scope`, which should appear in the URL of the login page. |
| 3.  The user logs into the login server with their username and password. | 3.  The user logs into the login server with their username and password. |
| 4.  The login server redirects the user to the specificed redirect URL with a temporary authorization `code` (exchange code) in the URL. | 4.  The login server redirects the user back to your application with an OAuth `access_token` embedded in the redirect URL's hash. This is temporary and expires in two hours. No `refresh_token` is issued. Therefore, once the `access_token` expires, a new one will need to be issued by having the user log in again. |
| 5.  The application issues a POST request (*see additional details below*) to the login server with the exchange code, `client_id`, and the client application's `client_secret`. | |
| 6.  The login server responds to the client application with a new OAuth `access_token` and `refresh_token`. The `access_token` is set to expire in two hours. | |
| 7.  The `refresh_token` can be used by contacting the login server with the `client_id`, `client_secret`, `grant_type`, and `refresh_token` to get a new OAuth `access_token` and `refresh_token`. The new `access_token` is good for another two hours, and the new `refresh_token` can be used to extend the session again by this same method (*see additional details below*). | |

#### OAuth Private Workflow - Additional Details

The following information expands on steps 5 through 7 of the private workflow:

Once the user has logged into Linode and you have received an exchange code,
you will need to trade that exchange code for an `access_token` and `refresh_token`. You
do this by making an HTTP POST request to the following address:

```
https://login.linode.com/oauth/token
```

Make this request as `application/x-www-form-urlencoded` or as
`multipart/form-data` and include the following parameters in the POST body:

| PARAMETER | DESCRIPTION |
|-----------|-------------|
| client_id | Your app's client ID. |
| client_secret | Your app's client secret. |
| code | The code you just received from the redirect. |

You'll get a response like this:

```json
{
  "scope": "linodes:read_write",
  "access_token": "03d084436a6c91fbafd5c4b20c82e5056a2e9ce1635920c30dc8d81dc7a6665c",
  "refresh_token": "f2ec9712e616fdb5a2a21aa0e88cfadea7502ebc62cf5bd758dbcd65e1803bad",
  "token_type": "bearer",
  "expires_in": 7200
}
```

Included in the response is an `access_token`. With this token, you can proceed to make
authenticated HTTP requests to the API by adding this header to each request:

```
Authorization: Bearer 03d084436a6c91fbafd5c4b20c82e5056a2e9ce1635920c30dc8d81dc7a6665c
```

This `access_token` is set to expire in two hours. To refresh access prior to expiration, make another request to the same URL with the following parameters in the POST body:

| PARAMETER | DESCRIPTION |
|-----------|-------------|
| grant_type | The grant type you're using. Use "refresh_token" when refreshing access. |
| client_id | Your app's client ID. |
| client_secret | Your app's client secret. |
| refresh_token | The `refresh_token` received from the previous response. |

You'll get another response with an updated `access_token` and `refresh_token`, which can then be used to refresh access again.

### OAuth Reference

| Security Scheme Type | OAuth 2.0 |
|-----------------------|--------|
| **Authorization URL** | `https://login.linode.com/oauth/authorize` |
| **Token URL** | `https://login.linode.com/oauth/token` |
| **Scopes** | <ul><li>`account:read_only` - Allows access to GET information about your Account.</li><li>`account:read_write` - Allows access to all endpoints related to your Account.</li><li>`databases:read_only` - Allows access to GET Managed Databases on your Account.</li><li>`databases:read_write` - Allows access to all endpoints related to your Managed Databases.</li><li>`domains:read_only` - Allows access to GET Domains on your Account.</li><li>`domains:read_write` - Allows access to all Domain endpoints.</li><li>`events:read_only` - Allows access to GET your Events.</li><li>`events:read_write` - Allows access to all endpoints related to your Events.</li><li>`firewall:read_only` - Allows access to GET information about your Firewalls.</li><li>`firewall:read_write` - Allows access to all Firewall endpoints.</li><li>`images:read_only` - Allows access to GET your Images.</li><li>`images:read_write` - Allows access to all endpoints related to your Images.</li><li>`ips:read_only` - Allows access to GET your ips.</li><li>`ips:read_write` - Allows access to all endpoints related to your ips.</li><li>`linodes:read_only` - Allows access to GET Linodes on your Account.</li><li>`linodes:read_write` - Allow access to all endpoints related to your Linodes.</li><li>`lke:read_only` - Allows access to GET LKE Clusters on your Account.</li><li>`lke:read_write` - Allows access to all endpoints related to LKE Clusters on your Account.</li><li>`longview:read_only` - Allows access to GET your Longview Clients.</li><li>`longview:read_write` - Allows access to all endpoints related to your Longview Clients.</li><li>`nodebalancers:read_only` - Allows access to GET NodeBalancers on your Account.</li><li>`nodebalancers:read_write` - Allows access to all NodeBalancer endpoints.</li><li>`object_storage:read_only` - Allows access to GET information related to your Object Storage.</li><li>`object_storage:read_write` - Allows access to all Object Storage endpoints.</li><li>`stackscripts:read_only` - Allows access to GET your StackScripts.</li><li>`stackscripts:read_write` - Allows access to all endpoints related to your StackScripts.</li><li>`volumes:read_only` - Allows access to GET your Volumes.</li><li>`volumes:read_write` - Allows access to all endpoints related to your Volumes.</li></ul><br/>|

## Requests

Requests must be made over HTTPS to ensure transactions are encrypted. Data included in requests must be supplied in json format unless otherwise specified in the command description.

The following request methods are supported:

| METHOD  | USAGE |
|---------|-------|
| GET     | Retrieves data about collections and individual resources. |
| POST    | For collections, creates a new resource of that type. Also used to perform actions on action endpoints. |
| PUT     | Updates an existing resource. |
| DELETE  | Deletes a resource. This is a destructive action. |
| HEAD    | Returns only the response header information of a GET request |
| OPTIONS | Provides permitted communication options for a command |

## Responses

### Response Status Codes

Actions will return one of the following HTTP response status codes:

| STATUS  | DESCRIPTION |
|---------|-------------|
| 200 OK  | The request was successful. |
| 202 Accepted | The request was successful, but processing has not been completed. The response body includes a "warnings" array containing the details of incomplete processes. |
| 204 No Content | The server successfully fulfilled the request and there is no additional content to send. |
| 299 Deprecated | The request was successful, but involved a deprecated endpoint. The response body includes a "warnings" array containing warning messages. |
| 400 Bad Request | You submitted an invalid request (missing parameters, etc.). |
| 401 Unauthorized | You failed to authenticate for this resource. |
| 403 Forbidden | You are authenticated, but don't have permission to do this. |
| 404 Not Found | The resource you're requesting does not exist. |
| 429 Too Many Requests | You've hit a rate limit. |
| 500 Internal Server Error | Please [open a Support Ticket](/docs/api/support/#support-ticket-open). |

### Response Headers

There are many ways to access response header information for individual command URLs, depending on how you are accessing the Linode API. For example, to view HTTP response headers for the `/regions` endpoint when making requests with `curl`, use the `-I` or `--head` option as follows:

```Shell
curl -I https://api.linode.com/v4/regions
```

Responses may include the following headers:

| HEADER | DESCRIPTION | EXAMPLE |
|--------|-------------|---------|
| Access-Control-Allow-Credentials | Responses to credentialed requests are exposed to frontend JavaScript code. | true |
| Access-Control-Allow-Headers | All permissible request headers for this endpoint. | Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter |
| Access-Control-Allow-Methods | Permissible HTTP methods for this endpoint | HEAD, GET, OPTIONS, POST, PUT, DELETE |
| Access-Control-Allow-Origin | Indicates origin access permissions. The wildcard character `*` means any origin can access the resource. | * |
| Access-Control-Expose-Headers | Available headers to include in response to cross-origin requests. | X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status |
| Cache-Control | Controls caching in browsers and shared caches such as CDNs. | private, max-age=60, s-maxage=60 |
| Content-Security-Policy | Controls which resources are allowed to load. By default, resources do not load. | default-src 'none' |
| Content-Type | All responses are in json format. | application/json |
| Content-Warning | A message containing instructions for successful requests that were not able to be completed. | Please contact support for assistance. |
| Retry-After | The remaining time in seconds until the current [rate limit](#rate-limiting) window resets. | 60 |
| Strict-Transport-Security | Enforces HTTPS-only access until the returned time in seconds. | max-age=31536000 |
| Vary | Optional request headers that affected the response content. | Authorization, X-Filter |
| X-Accepted-OAuth-Scopes | Required [scopes](#oauth-reference) for accessing the requested command. | linodes:read_only |
| X-Customer-UUID | A unique identifier for the account owning the the [personal access token](#personal-access-token) that was used for the request. | ABCDEF01-3456-789A-BCDEF0123456789A |
| X-OAuth-Scopes | Allowed [scopes](#oauth-reference) associated with the [personal access token](#personal-access-token) that was used for the request. A value of `*` indicates read/write access for all scope categories. | images:read_write linodes:read_only |
| X-RateLimit-Limit | The maximum number of permitted requests during the [rate limit](#rate-limiting) window for this endpoint. | 800 |
| X-RateLimit-Remaining | The remaining number of permitted requests in the current [rate limit](#rate-limiting) window. | 798 |
| X-RateLimit-Reset | The time when the current [rate limit](#rate-limiting) window rests in UTC epoch seconds. | 1674747739 |
| X-Spec-Version | The current API version that handled the request. | 4.150.0 |

## Errors

Success is indicated via <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_top">Standard HTTP status codes</a>.
`2xx` codes indicate success, `4xx` codes indicate a request error, and
`5xx` errors indicate a server error. A
request error might be an invalid input, a required parameter being omitted,
or a malformed request. A server error means something went wrong processing
your request. If this occurs, please
[open a Support Ticket](/docs/api/support/#support-ticket-open)
and let us know. Though errors are logged and we work quickly to resolve issues,
opening a ticket and providing us with reproducable steps and data is always helpful.

The `errors` field is an array of the things that went wrong with your request.
We will try to include as many of the problems in the response as possible,
but it's conceivable that fixing these errors and resubmitting may result in
new errors coming back once we are able to get further along in the process
of handling your request.

Within each error object, the `field` parameter will be included if the error
pertains to a specific field in the JSON you've submitted. This will be
omitted if there is no relevant field. The `reason` is a human-readable
explanation of the error, and will always be included.

## Pagination

Resource lists are always paginated. The response will look similar to this:

```json
{
    "data": [ ... ],
    "page": 1,
    "pages": 3,
    "results": 300
}
```

* Pages start at 1. You may retrieve a specific page of results by adding
`?page=x` to your URL (for example, `?page=4`). If the value of `page`
exceeds `2^64/page_size`, the last possible page will be returned.


* Page sizes default to 100,
and can be set to return between 25 and 500. Page size can be set using
`?page_size=x`.

## Filtering and Sorting

Collections are searchable by fields they include, marked in the spec as
`x-linode-filterable: true`. Filters are passed
in the `X-Filter` header and are formatted as JSON objects. Here is a request
call for Linode Types in our "standard" class:

```Shell
curl "https://api.linode.com/v4/linode/types" \
  -H 'X-Filter: { "class": "standard" }'
```

The filter object's keys are the keys of the object you're filtering,
and the values are accepted values. You can add multiple filters by
including more than one key. For example, filtering for "standard" Linode
Types that offer one vcpu:

```Shell
 curl "https://api.linode.com/v4/linode/types" \
  -H 'X-Filter: { "class": "standard", "vcpus": 1 }'
```

In the above example, both filters are combined with an "and" operation.
However, if you wanted either Types with one vcpu or Types in our "standard"
class, you can add an operator:

 ```Shell
curl "https://api.linode.com/v4/linode/types" \
  -H 'X-Filter: { "+or": [ { "vcpus": 1 }, { "class": "standard" } ] }'
```

Each filter in the `+or` array is its own filter object, and all conditions
in it are combined with an "and" operation as they were in the previous example.

Other operators are also available. Operators are keys of a Filter JSON
object. Their value must be of the appropriate type, and they are evaluated
as described below:

| OPERATOR | TYPE   | DESCRIPTION                       |
|----------|--------|-----------------------------------|
| +and     | array  | All conditions must be true.       |
| +or      | array  | One condition must be true.        |
| +gt      | number | Value must be greater than number. |
| +gte     | number | Value must be greater than or equal to number. |
| +lt      | number | Value must be less than number. |
| +lte     | number | Value must be less than or equal to number. |
| +contains | string | Given string must be in the value. |
| +neq      | string | Does not equal the value.          |
| +order_by | string | Attribute to order the results by - must be filterable. |
| +order    | string | Either "asc" or "desc". Defaults to "asc". Requires `+order_by`. |

For example, filtering for [Linode Types](/docs/api/linode-types/)
that offer memory equal to or higher than 61440:

```Shell
curl "https://api.linode.com/v4/linode/types" \
  -H '
    X-Filter: {
      "memory": {
        "+gte": 61440
      }
    }'
```

You can combine and nest operators to construct arbitrarily-complex queries.
For example, give me all [Linode Types](/docs/api/linode-types/)
which are either `standard` or `highmem` class, or
have between 12 and 20 vcpus:

```Shell
curl "https://api.linode.com/v4/linode/types" \
  -H '
    X-Filter: {
      "+or": [
        {
          "+or": [
            {
              "class": "standard"
            },
            {
              "class": "highmem"
            }
          ]
        },
        {
          "+and": [
            {
              "vcpus": {
                "+gte": 12
              }
            },
            {
              "vcpus": {
                "+lte": 20
              }
            }
          ]
        }
      ]
    }'
```
## Time Values

All times returned by the API are in UTC, regardless of the timezone configured within your user's profile (see `timezone` property within [Profile View](/docs/api/profile/#profile-view__responses)).

## Rate Limiting

Rate limits on API requests help maintain the health and stability of the Linode API. Accordingly, every endpoint of the Linode API applies a rate limit on a per user basis as determined by OAuth token for authenticated requests or IP address for public endpoints.

Each rate limit consists of a total number of requests and a time window. For example, if an endpoint has a rate limit of 800 requests per minute, then up to 800 requests over a one minute window are permitted. Subsequent requests to an endpoint after hitting a rate limit return a 429 error. You can successfully remake requests to that endpoint after the rate limit window resets.

### Linode APIv4 Rate Limits

With the Linode API, you can generally make up to 800 general API requests every two minutes. Additionally, all commands have a rate limit of 400 requests per minute, and all GET commands that return paginated data collections have a rate limit of 200 requests per minute, unless otherwise specified below.

**Note:** There may be rate limiting applied at other levels outside of the API, for example, at the load balancer.

Creating Linodes has a dedicated rate limit of 10 requests per 30 seconds. That endpoint is:

* [Linode Create](/docs/api/linode-instances/#linode-create)

Creating Volumes has a dedicated rate limit of 25 requests per minute. That endpoint is:

* [Volume Create](/docs/api/volumes/#volume-create)

Listing Images has a dedicated rate limit of 20 requests per minute. That endpoint is:

* [Images List](/docs/api/images/#images-list)

`/stats` endpoints have their own dedicated rate limits of 50 requests per minute. These endpoints are:

* [View Linode Statistics](/docs/api/linode-instances/#linode-statistics-view)
* [View Linode Statistics (year/month)](/docs/api/linode-instances/#statistics-yearmonth-view)
* [View NodeBalancer Statistics](/docs/api/nodebalancers/#nodebalancer-statistics-view)
* [List Managed Stats](/docs/api/managed/#managed-stats-list)

Object Storage endpoints have a dedicated rate limit of 750 requests per second. The Object Storage endpoints are:

* [Object Storage Endpoints](/docs/api/object-storage/)

Opening Support Tickets has a dedicated rate limit of 2 requests per minute. That endpoint is:

* [Open Support Ticket](/docs/api/support/#support-ticket-open)

Accepting Service Transfers has a dedicated rate limit of 2 requests per minute. That endpoint is:

* [Service Transfer Accept](/docs/api/account/#service-transfer-accept)

### Rate Limit HTTP Response Headers

The Linode API includes the following HTTP response headers which are designed to help you avoid hitting rate limits which might disrupt your applications:

* **X-RateLimit-Limit**: The maximum number of permitted requests during the rate limit window for this endpoint.
* **X-RateLimit-Remaining**: The remaining number of permitted requests in the current rate limit window.
* **X-RateLimit-Reset**: The time when the current rate limit window rests in UTC epoch seconds.
* **Retry-After**: The remaining time in seconds until the current rate limit window resets.

## CLI (Command Line Interface)

The <a href="https://github.com/linode/linode-cli" target="_top">Linode CLI</a> allows you to easily
work with the API using intuitive and simple syntax. It requires a
[Personal Access Token](/docs/api/#personal-access-token)
for authentication, and gives you access to all of the features and functionality
of the Linode API that are documented here with CLI examples.

Endpoints that do not have CLI examples are currently unavailable through the CLI, but
can be accessed via other methods such as Shell commands and other third-party applications.

 * OpenAPI spec version: 4.169.1
 */
import { customInstance } from './axios';
import type { BodyType } from './axios';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ResizeVolumeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ResizeVolumeDefault = {
  errors?: ResizeVolumeDefaultErrorsItem[];
};

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type ResizeVolume200Status = typeof ResizeVolume200Status[keyof typeof ResizeVolume200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResizeVolume200Status = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type ResizeVolume200HardwareType = typeof ResizeVolume200HardwareType[keyof typeof ResizeVolume200HardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResizeVolume200HardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type ResizeVolume200 = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: ResizeVolume200HardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: ResizeVolume200Status;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

export type ResizeVolumeBody = {
  /** The Volume's size, in GiB.
 */
  size: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DetachVolumeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DetachVolumeDefault = {
  errors?: DetachVolumeDefaultErrorsItem[];
};

export type DetachVolume200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CloneVolumeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CloneVolumeDefault = {
  errors?: CloneVolumeDefaultErrorsItem[];
};

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type CloneVolume200Status = typeof CloneVolume200Status[keyof typeof CloneVolume200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneVolume200Status = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type CloneVolume200HardwareType = typeof CloneVolume200HardwareType[keyof typeof CloneVolume200HardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneVolume200HardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type CloneVolume200 = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: CloneVolume200HardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: CloneVolume200Status;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

export type CloneVolumeBody = {
  /** The Volume's label is for display purposes only.
 */
  label: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AttachVolumeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AttachVolumeDefault = {
  errors?: AttachVolumeDefaultErrorsItem[];
};

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type AttachVolume200Status = typeof AttachVolume200Status[keyof typeof AttachVolume200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttachVolume200Status = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type AttachVolume200HardwareType = typeof AttachVolume200HardwareType[keyof typeof AttachVolume200HardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttachVolume200HardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type AttachVolume200 = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: AttachVolume200HardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: AttachVolume200Status;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

export type AttachVolumeBody = {
  /** The ID of the Linode Config to include this Volume in. Must belong to the Linode referenced by `linode_id`. If not given, the last booted Config will be chosen.
 */
  config_id?: number;
  /** The ID of the Linode to attach the volume to. */
  linode_id: number;
  /** Defaults to true, if false is provided, the Volume will not be attached to the Linode Config. In this case more than 8 Volumes may be attached to a Linode if a Linode has 16GB of RAM or more. The number of volumes that can be attached is equal to the number of GB of RAM that the Linode has, up to a maximum of 64. `config_id` should not be passed if this is set to false and linode_id must be passed. The Linode must be running.
 */
  persist_across_boots?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteVolumeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteVolumeDefault = {
  errors?: DeleteVolumeDefaultErrorsItem[];
};

export type DeleteVolume200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateVolumeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateVolumeDefault = {
  errors?: UpdateVolumeDefaultErrorsItem[];
};

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type UpdateVolume200Status = typeof UpdateVolume200Status[keyof typeof UpdateVolume200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateVolume200Status = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type UpdateVolume200HardwareType = typeof UpdateVolume200HardwareType[keyof typeof UpdateVolume200HardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateVolume200HardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type UpdateVolume200 = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: UpdateVolume200HardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: UpdateVolume200Status;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

export type UpdateVolumeBodyAllOfFour = {
  readonly linode_id?: unknown;
  readonly size?: unknown;
};

export type UpdateVolumeBody = UpdateVolumeBodyAllOf & UpdateVolumeBodyAllOfFour;

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type UpdateVolumeBodyAllOfStatus = typeof UpdateVolumeBodyAllOfStatus[keyof typeof UpdateVolumeBodyAllOfStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateVolumeBodyAllOfStatus = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type UpdateVolumeBodyAllOfHardwareType = typeof UpdateVolumeBodyAllOfHardwareType[keyof typeof UpdateVolumeBodyAllOfHardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateVolumeBodyAllOfHardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type UpdateVolumeBodyAllOf = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: UpdateVolumeBodyAllOfHardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: UpdateVolumeBodyAllOfStatus;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetVolumeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetVolumeDefault = {
  errors?: GetVolumeDefaultErrorsItem[];
};

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type GetVolume200Status = typeof GetVolume200Status[keyof typeof GetVolume200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetVolume200Status = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type GetVolume200HardwareType = typeof GetVolume200HardwareType[keyof typeof GetVolume200HardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetVolume200HardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type GetVolume200 = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: GetVolume200HardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: GetVolume200Status;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

export type GetVolumeParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateVolumeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateVolumeDefault = {
  errors?: CreateVolumeDefaultErrorsItem[];
};

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type CreateVolume200Status = typeof CreateVolume200Status[keyof typeof CreateVolume200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateVolume200Status = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type CreateVolume200HardwareType = typeof CreateVolume200HardwareType[keyof typeof CreateVolume200HardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateVolume200HardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type CreateVolume200 = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: CreateVolume200HardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: CreateVolume200Status;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

export type CreateVolumeBody = {
  /** When creating a Volume attached to a Linode, the ID of the Linode Config to include the new Volume in. This Config must belong to the Linode referenced by `linode_id`. Must _not_ be provided if `linode_id` is not sent. If a `linode_id` is sent without a `config_id`, the volume will be attached:

  * to the Linode's only config if it only has one config.
  * to the Linode's last used config, if possible.

If no config can be selected for attachment, an error will be returned.
 */
  config_id?: number;
  /** The Volume's label, which is also used in the `filesystem_path` of the resulting volume.
 */
  label: string;
  /** The Linode this volume should be attached to upon creation. If not given, the volume will be created without an attachment.
 */
  linode_id?: number;
  /** The Region to deploy this Volume in. This is only required if a linode_id is not given.
 */
  region?: string;
  /** The initial size of this volume, in GB.  Be aware that volumes may only be resized up after creation.
 */
  size?: number;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetVolumesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetVolumesDefault = {
  errors?: GetVolumesDefaultErrorsItem[];
};

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type GetVolumes200DataItemStatus = typeof GetVolumes200DataItemStatus[keyof typeof GetVolumes200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetVolumes200DataItemStatus = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type GetVolumes200DataItemHardwareType = typeof GetVolumes200DataItemHardwareType[keyof typeof GetVolumes200DataItemHardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetVolumes200DataItemHardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type GetVolumes200DataItem = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: GetVolumes200DataItemHardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: GetVolumes200DataItemStatus;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

export type GetVolumes200 = {
  data?: GetVolumes200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetVolumesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteTagDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteTagDefault = {
  errors?: DeleteTagDefaultErrorsItem[];
};

export type DeleteTag200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetTaggedObjectsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetTaggedObjectsDefault = {
  errors?: GetTaggedObjectsDefaultErrorsItem[];
};

export type GetTaggedObjects200DataItem = {
  data?: GetTaggedObjects200DataItemData;
  type?: string;
};

export type GetTaggedObjects200 = {
  data?: GetTaggedObjects200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * Information about the amount of transfer this NodeBalancer has had so far this month.

 */
export type GetTaggedObjects200DataItemDataOneOfOnesevenTransfer = {
  /** The total outbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly in?: number | null;
  /** The total inbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly out?: number | null;
  /** The total transfer, in MB, used by this NodeBalancer this month.
 */
  readonly total?: number | null;
};

/**
 * Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.

 */
export type GetTaggedObjects200DataItemDataOneOfOneseven = {
  /** Throttle connections per second.  Set to 0 (zero) to disable throttling.
 */
  client_conn_throttle?: number;
  /** When this NodeBalancer was created.
 */
  readonly created?: string;
  /** This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
 */
  readonly hostname?: string;
  /** This NodeBalancer's unique ID.
 */
  readonly id?: number;
  /** This NodeBalancer's public IPv4 address.
 */
  readonly ipv4?: string;
  /** This NodeBalancer's public IPv6 address.
 */
  readonly ipv6?: string | null;
  /** This NodeBalancer's label. These must be unique on your Account.
 */
  label?: string;
  /** The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
 */
  readonly region?: string;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** Information about the amount of transfer this NodeBalancer has had so far this month.
 */
  readonly transfer?: GetTaggedObjects200DataItemDataOneOfOnesevenTransfer;
  /** When this NodeBalancer was last updated.
 */
  readonly updated?: string;
};

export type GetTaggedObjects200DataItemData = GetTaggedObjects200DataItemDataOneOf | GetTaggedObjects200DataItemDataOneOfOneone | GetTaggedObjects200DataItemDataOneOfOnefour | GetTaggedObjects200DataItemDataOneOfOneseven;

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type GetTaggedObjects200DataItemDataOneOfOnefourStatus = typeof GetTaggedObjects200DataItemDataOneOfOnefourStatus[keyof typeof GetTaggedObjects200DataItemDataOneOfOnefourStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTaggedObjects200DataItemDataOneOfOnefourStatus = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type GetTaggedObjects200DataItemDataOneOfOnefourHardwareType = typeof GetTaggedObjects200DataItemDataOneOfOnefourHardwareType[keyof typeof GetTaggedObjects200DataItemDataOneOfOnefourHardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTaggedObjects200DataItemDataOneOfOnefourHardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type GetTaggedObjects200DataItemDataOneOfOnefour = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: GetTaggedObjects200DataItemDataOneOfOnefourHardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: GetTaggedObjects200DataItemDataOneOfOnefourStatus;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type GetTaggedObjects200DataItemDataOneOfOneoneType = typeof GetTaggedObjects200DataItemDataOneOfOneoneType[keyof typeof GetTaggedObjects200DataItemDataOneOfOneoneType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTaggedObjects200DataItemDataOneOfOneoneType = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type GetTaggedObjects200DataItemDataOneOfOneoneStatus = typeof GetTaggedObjects200DataItemDataOneOfOneoneStatus[keyof typeof GetTaggedObjects200DataItemDataOneOfOneoneStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTaggedObjects200DataItemDataOneOfOneoneStatus = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export type GetTaggedObjects200DataItemDataOneOfOneone = {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: GetTaggedObjects200DataItemDataOneOfOneoneStatus;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: GetTaggedObjects200DataItemDataOneOfOneoneType;
};

/**
 * A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".

 */
export type GetTaggedObjects200DataItemDataOneOfStatus = typeof GetTaggedObjects200DataItemDataOneOfStatus[keyof typeof GetTaggedObjects200DataItemDataOneOfStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTaggedObjects200DataItemDataOneOfStatus = {
  running: 'running',
  offline: 'offline',
  booting: 'booting',
  rebooting: 'rebooting',
  shutting_down: 'shutting_down',
  provisioning: 'provisioning',
  deleting: 'deleting',
  migrating: 'migrating',
  rebuilding: 'rebuilding',
  cloning: 'cloning',
  restoring: 'restoring',
  stopped: 'stopped',
  billing_suspension: 'billing_suspension',
} as const;

/**
 * Information about the resources available to this Linode.
 */
export type GetTaggedObjects200DataItemDataOneOfSpecs = {
  /** The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.
 */
  readonly disk?: number;
  /** The number of gpus this Linode has access to.
 */
  readonly gpus?: number;
  /** The amount of RAM, in MB, this Linode has access to.

Typically, a Linode boots with all of its available RAM, but this can be configured in a Config profile. See the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
 */
  readonly memory?: number;
  /** The amount of network transfer this Linode is allotted each month. */
  readonly transfer?: number;
  /** The number of vcpus this Linode has access to.
 */
  readonly vcpus?: number;
};

export type GetTaggedObjects200DataItemDataOneOfImage = string | null;

/**
 * The virtualization software powering this Linode.

 */
export type GetTaggedObjects200DataItemDataOneOfHypervisor = typeof GetTaggedObjects200DataItemDataOneOfHypervisor[keyof typeof GetTaggedObjects200DataItemDataOneOfHypervisor];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTaggedObjects200DataItemDataOneOfHypervisor = {
  kvm: 'kvm',
} as const;

export type GetTaggedObjects200DataItemDataOneOf = {
  alerts?: GetTaggedObjects200DataItemDataOneOfAlerts;
  /** Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).
 */
  backups?: GetTaggedObjects200DataItemDataOneOfBackups;
  /** When this Linode was created. */
  readonly created?: string;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Linode Create](/docs/api/linode-instances/#linode-create) description for more information on Metadata. */
  readonly has_user_data?: boolean;
  /** The Linode's host machine, as a UUID. */
  readonly host_uuid?: string;
  /** The virtualization software powering this Linode.
 */
  readonly hypervisor?: GetTaggedObjects200DataItemDataOneOfHypervisor;
  /** This Linode's ID which must be provided for all operations impacting this Linode.
 */
  readonly id?: number;
  readonly image?: GetTaggedObjects200DataItemDataOneOfImage;
  /** This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address
upon creation, and may get a single private IPv4 address if needed. You may need to
[open a support ticket](/docs/api/support/#support-ticket-open)
to get additional IPv4 addresses.

IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
See the [/networking](/docs/api/networking/) endpoints for details.
 */
  readonly ipv4?: string[];
  /** This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
 */
  readonly ipv6?: string | null;
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).
 */
  readonly region?: string;
  /** Information about the resources available to this Linode. */
  readonly specs?: GetTaggedObjects200DataItemDataOneOfSpecs;
  /** A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".
 */
  readonly status?: GetTaggedObjects200DataItemDataOneOfStatus;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.
To change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).
 */
  readonly type?: string;
  /** When this Linode was last updated. */
  readonly updated?: string;
  /** The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
 */
  watchdog_enabled?: boolean;
};

/**
 * The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.

 */
export type GetTaggedObjects200DataItemDataOneOfBackupsScheduleWindow = typeof GetTaggedObjects200DataItemDataOneOfBackupsScheduleWindow[keyof typeof GetTaggedObjects200DataItemDataOneOfBackupsScheduleWindow];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTaggedObjects200DataItemDataOneOfBackupsScheduleWindow = {
  Scheduling: 'Scheduling',
  W0: 'W0',
  W2: 'W2',
  W4: 'W4',
  W6: 'W6',
  W8: 'W8',
  W10: 'W10',
  W12: 'W12',
  W14: 'W14',
  W16: 'W16',
  W18: 'W18',
  W20: 'W20',
  W22: 'W22',
  null: null,
} as const;

/**
 * The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.

 */
export type GetTaggedObjects200DataItemDataOneOfBackupsScheduleDay = typeof GetTaggedObjects200DataItemDataOneOfBackupsScheduleDay[keyof typeof GetTaggedObjects200DataItemDataOneOfBackupsScheduleDay];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTaggedObjects200DataItemDataOneOfBackupsScheduleDay = {
  Scheduling: 'Scheduling',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  null: null,
} as const;

export type GetTaggedObjects200DataItemDataOneOfBackupsSchedule = {
  /** The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.
 */
  day?: GetTaggedObjects200DataItemDataOneOfBackupsScheduleDay;
  /** The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.
 */
  window?: GetTaggedObjects200DataItemDataOneOfBackupsScheduleWindow;
};

/**
 * Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).

 */
export type GetTaggedObjects200DataItemDataOneOfBackups = {
  /** Whether Backups for this Linode are available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).
 */
  readonly enabled?: boolean;
  /** The last successful backup date. 'null' if there was no previous backup. */
  readonly last_successful?: string;
  schedule?: GetTaggedObjects200DataItemDataOneOfBackupsSchedule;
};

export type GetTaggedObjects200DataItemDataOneOfAlerts = {
  /** The percentage of CPU usage required to trigger an alert.
If the average CPU usage over two hours exceeds this value, we'll send you an alert.
Your Linode's total CPU capacity is represented as 100%, multiplied by its number of
cores.

For example, a two core Linode's CPU capacity is represented as 200%. If you want
to be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.

The default value is 90% multiplied by the number of cores.

If the value is set to `0` (zero), the alert is disabled.
 */
  cpu?: number;
  /** The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.
 */
  io?: number;
  /** The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_in?: number;
  /** The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_out?: number;
  /** The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.
 */
  transfer_quota?: number;
};

export type GetTaggedObjectsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateTagDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateTagDefault = {
  errors?: CreateTagDefaultErrorsItem[];
};

/**
 * A tag that has been applied to an object on your Account. Tags are currently for organizational purposes only.

 */
export type CreateTag200 = {
  /** A Label used for organization of objects on your Account.
 */
  label?: string;
};

export type CreateTagBody = {
  /** A list of Domain IDs to apply the new Tag to.  You must be allowed to `read_write` all of the requested Domains, or the Tag will not be created and an error will be returned.
 */
  domains?: number[];
  /** The new Tag.
 */
  label: string;
  /** A list of Linode IDs to apply the new Tag to.  You must be allowed to `read_write` all of the requested Linodes, or the Tag will not be created and an error will be returned.
 */
  linodes?: number[];
  /** A list of NodeBalancer IDs to apply the new Tag to. You must be allowed to `read_write` all of the requested NodeBalancers, or the Tag will not be created and an error will be returned.
 */
  nodebalancers?: number[];
  /** A list of Volume IDs to apply the new Tag to.  You must be allowed to `read_write` all of the requested Volumes, or the Tag will not be created and an error will be returned.
 */
  volumes?: number[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetTagsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetTagsDefault = {
  errors?: GetTagsDefaultErrorsItem[];
};

/**
 * A tag that has been applied to an object on your Account. Tags are currently for organizational purposes only.

 */
export type GetTags200DataItem = {
  /** A Label used for organization of objects on your Account.
 */
  label?: string;
};

export type GetTags200 = {
  data?: GetTags200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetTagsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateTicketReplyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateTicketReplyDefault = {
  errors?: CreateTicketReplyDefaultErrorsItem[];
};

/**
 * An object representing a reply to a Support Ticket.

 */
export type CreateTicketReply200 = {
  /** The date and time this Ticket reply was created.
 */
  readonly created?: string;
  /** The User who submitted this reply.
 */
  readonly created_by?: string;
  /** The body of this Support Ticket reply.
 */
  readonly description?: string;
  /** If set to true, this reply came from a Linode employee.
 */
  readonly from_linode?: boolean;
  /** The Gravatar ID of the User who created this reply.
 */
  readonly gravatar_id?: string;
  /** The unique ID of this Support Ticket reply.
 */
  readonly id?: number;
};

export type CreateTicketReplyBody = {
  /** The content of your reply.
 */
  description: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetTicketRepliesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetTicketRepliesDefault = {
  errors?: GetTicketRepliesDefaultErrorsItem[];
};

/**
 * An object representing a reply to a Support Ticket.

 */
export type GetTicketReplies200DataItem = {
  /** The date and time this Ticket reply was created.
 */
  readonly created?: string;
  /** The User who submitted this reply.
 */
  readonly created_by?: string;
  /** The body of this Support Ticket reply.
 */
  readonly description?: string;
  /** If set to true, this reply came from a Linode employee.
 */
  readonly from_linode?: boolean;
  /** The Gravatar ID of the User who created this reply.
 */
  readonly gravatar_id?: string;
  /** The unique ID of this Support Ticket reply.
 */
  readonly id?: number;
};

export type GetTicketReplies200 = {
  data?: GetTicketReplies200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetTicketRepliesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CloseTicketDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CloseTicketDefault = {
  errors?: CloseTicketDefaultErrorsItem[];
};

export type CloseTicket200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateTicketAttachmentDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateTicketAttachmentDefault = {
  errors?: CreateTicketAttachmentDefaultErrorsItem[];
};

export type CreateTicketAttachment200 = { [key: string]: any };

export type CreateTicketAttachmentBody = {
  /** The local, absolute path to the file you want to attach to your Support Ticket.
 */
  file: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetTicketDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetTicketDefault = {
  errors?: GetTicketDefaultErrorsItem[];
};

/**
 * The current status of this Ticket.
 */
export type GetTicket200Status = typeof GetTicket200Status[keyof typeof GetTicket200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTicket200Status = {
  closed: 'closed',
  new: 'new',
  open: 'open',
} as const;

/**
 * The entity this Ticket was opened for.

 */
export type GetTicket200Entity = {
  /** The unique ID for this Ticket's entity.
 */
  readonly id?: number;
  /** The current label of this entity.
 */
  readonly label?: string;
  /** The type of entity this is related to.
 */
  readonly type?: string;
  /** The URL where you can access the object this event is for. If a relative URL, it is relative to the domain you retrieved the entity from.
 */
  readonly url?: string;
} | null;

/**
 * A Support Ticket opened on your Account.

 */
export type GetTicket200 = {
  /** A list of filenames representing attached files associated with this Ticket.
 */
  readonly attachments?: string[];
  /** Whether the Support Ticket may be closed.
 */
  closable?: boolean;
  /** The date and time this Ticket was closed.
 */
  readonly closed?: string | null;
  /** The full details of the issue or question.
 */
  readonly description?: string;
  /** The entity this Ticket was opened for.
 */
  readonly entity?: GetTicket200Entity;
  /** The Gravatar ID of the User who opened this Ticket.
 */
  readonly gravatar_id?: string;
  /** The ID of the Support Ticket.
 */
  readonly id?: number;
  /** The date and time this Ticket was created.
 */
  readonly opened?: string;
  /** The User who opened this Ticket.
 */
  readonly opened_by?: string;
  /** The current status of this Ticket. */
  readonly status?: GetTicket200Status;
  /** The summary or title for this Ticket.
 */
  readonly summary?: string;
  /** The date and time this Ticket was last updated.
 */
  readonly updated?: string;
  /** The User who last updated this Ticket.
 */
  readonly updated_by?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateTicketDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateTicketDefault = {
  errors?: CreateTicketDefaultErrorsItem[];
};

/**
 * The current status of this Ticket.
 */
export type CreateTicket200Status = typeof CreateTicket200Status[keyof typeof CreateTicket200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateTicket200Status = {
  closed: 'closed',
  new: 'new',
  open: 'open',
} as const;

/**
 * The entity this Ticket was opened for.

 */
export type CreateTicket200Entity = {
  /** The unique ID for this Ticket's entity.
 */
  readonly id?: number;
  /** The current label of this entity.
 */
  readonly label?: string;
  /** The type of entity this is related to.
 */
  readonly type?: string;
  /** The URL where you can access the object this event is for. If a relative URL, it is relative to the domain you retrieved the entity from.
 */
  readonly url?: string;
} | null;

/**
 * A Support Ticket opened on your Account.

 */
export type CreateTicket200 = {
  /** A list of filenames representing attached files associated with this Ticket.
 */
  readonly attachments?: string[];
  /** Whether the Support Ticket may be closed.
 */
  closable?: boolean;
  /** The date and time this Ticket was closed.
 */
  readonly closed?: string | null;
  /** The full details of the issue or question.
 */
  readonly description?: string;
  /** The entity this Ticket was opened for.
 */
  readonly entity?: CreateTicket200Entity;
  /** The Gravatar ID of the User who opened this Ticket.
 */
  readonly gravatar_id?: string;
  /** The ID of the Support Ticket.
 */
  readonly id?: number;
  /** The date and time this Ticket was created.
 */
  readonly opened?: string;
  /** The User who opened this Ticket.
 */
  readonly opened_by?: string;
  /** The current status of this Ticket. */
  readonly status?: CreateTicket200Status;
  /** The summary or title for this Ticket.
 */
  readonly summary?: string;
  /** The date and time this Ticket was last updated.
 */
  readonly updated?: string;
  /** The User who last updated this Ticket.
 */
  readonly updated_by?: string | null;
};

/**
 * An object representing a created Support Ticket - a question or issue and request for help from the Linode support team.
Only one of the ID attributes (`linode_id`, `domain_id`, etc.) can be set on a single Support Ticket.

 */
export type CreateTicketBody = {
  /** The ID of the Managed Database this ticket is regarding, if relevant.
 */
  database_id?: number;
  /** The full details of the issue or question.
 */
  description: string;
  /** The ID of the Domain this ticket is regarding, if relevant.
 */
  domain_id?: number;
  /** The ID of the Firewall this ticket is regarding, if relevant.
 */
  firewall_id?: number;
  /** The ID of the Linode this ticket is regarding, if relevant.
 */
  linode_id?: number;
  /** The ID of the Kubernetes cluster this ticket is regarding, if relevant.
 */
  lkecluster_id?: number;
  /** The ID of the Longview client this ticket is regarding, if relevant.
 */
  longviewclient_id?: number;
  /** Designates if this ticket is related to a [Managed service](https://www.linode.com/products/managed/). If `true`, the following constraints will apply:
* No ID attributes (i.e. `linode_id`, `domain_id`, etc.) should be provided with this request.
* Your account must have a [Managed service enabled](/docs/api/managed/#managed-service-enable).
 */
  managed_issue?: boolean;
  /** The ID of the NodeBalancer this ticket is regarding, if relevant.
 */
  nodebalancer_id?: number;
  /** The [Region](/docs/api/regions/) ID for the associated VLAN this ticket is regarding.

Only allowed when submitting a VLAN ticket.
 */
  region?: string;
  /** The summary or title for this SupportTicket.
 */
  summary: string;
  /** The label of the VLAN this ticket is regarding, if relevant. To view your VLANs, use the VLANs List ([GET /networking/vlans](/docs/api/networking/#vlans-list)) endpoint.

Requires a specified `region` to identify the VLAN.
 */
  vlan?: string;
  /** The ID of the Volume this ticket is regarding, if relevant.
 */
  volume_id?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetTicketsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetTicketsDefault = {
  errors?: GetTicketsDefaultErrorsItem[];
};

/**
 * The current status of this Ticket.
 */
export type GetTickets200DataItemStatus = typeof GetTickets200DataItemStatus[keyof typeof GetTickets200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTickets200DataItemStatus = {
  closed: 'closed',
  new: 'new',
  open: 'open',
} as const;

/**
 * The entity this Ticket was opened for.

 */
export type GetTickets200DataItemEntity = {
  /** The unique ID for this Ticket's entity.
 */
  readonly id?: number;
  /** The current label of this entity.
 */
  readonly label?: string;
  /** The type of entity this is related to.
 */
  readonly type?: string;
  /** The URL where you can access the object this event is for. If a relative URL, it is relative to the domain you retrieved the entity from.
 */
  readonly url?: string;
} | null;

/**
 * A Support Ticket opened on your Account.

 */
export type GetTickets200DataItem = {
  /** A list of filenames representing attached files associated with this Ticket.
 */
  readonly attachments?: string[];
  /** Whether the Support Ticket may be closed.
 */
  closable?: boolean;
  /** The date and time this Ticket was closed.
 */
  readonly closed?: string | null;
  /** The full details of the issue or question.
 */
  readonly description?: string;
  /** The entity this Ticket was opened for.
 */
  readonly entity?: GetTickets200DataItemEntity;
  /** The Gravatar ID of the User who opened this Ticket.
 */
  readonly gravatar_id?: string;
  /** The ID of the Support Ticket.
 */
  readonly id?: number;
  /** The date and time this Ticket was created.
 */
  readonly opened?: string;
  /** The User who opened this Ticket.
 */
  readonly opened_by?: string;
  /** The current status of this Ticket. */
  readonly status?: GetTickets200DataItemStatus;
  /** The summary or title for this Ticket.
 */
  readonly summary?: string;
  /** The date and time this Ticket was last updated.
 */
  readonly updated?: string;
  /** The User who last updated this Ticket.
 */
  readonly updated_by?: string | null;
};

export type GetTickets200 = {
  data?: GetTickets200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetTicketsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetRegionsAvailabilityDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetRegionsAvailabilityDefault = {
  errors?: GetRegionsAvailabilityDefaultErrorsItem[];
};

export type GetRegionsAvailability200 = GetRegionsAvailability200AllOf & GetRegionsAvailability200AllOfTwo;

/**
 * Compute instance availability information by [Type](/docs/api/linode-types/) and [Region](/docs/api/regions/).
 */
export type GetRegionsAvailability200AllOfTwoDataItem = {
  /** Whether the compute instance type is available in the region. */
  available?: boolean;
  /** The compute instance [Type](/docs/api/linode-types/) ID. */
  plan?: string;
  /** The [Region](/docs/api/regions/) ID. */
  region?: string;
};

export type GetRegionsAvailability200AllOfTwo = {
  data?: GetRegionsAvailability200AllOfTwoDataItem[];
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetRegionsAvailability200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetRegionAvailabilityDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetRegionAvailabilityDefault = {
  errors?: GetRegionAvailabilityDefaultErrorsItem[];
};

/**
 * Compute instance availability information by [Type](/docs/api/linode-types/) and [Region](/docs/api/regions/).
 */
export type GetRegionAvailability200Item = {
  /** Whether the compute instance type is available in the region. */
  available?: boolean;
  /** The compute instance [Type](/docs/api/linode-types/) ID. */
  plan?: string;
  /** The [Region](/docs/api/regions/) ID. */
  region?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetRegionDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetRegionDefault = {
  errors?: GetRegionDefaultErrorsItem[];
};

/**
 * This region's current operational status.

 */
export type GetRegion200Status = typeof GetRegion200Status[keyof typeof GetRegion200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetRegion200Status = {
  ok: 'ok',
  outage: 'outage',
} as const;

export type GetRegion200Resolvers = {
  /** The IPv4 addresses for this region's DNS resolvers, separated by commas.
 */
  readonly ipv4?: string;
  /** The IPv6 addresses for this region's DNS resolvers, separated by commas.
 */
  readonly ipv6?: string;
};

/**
 * An area where Linode services are available.
 */
export type GetRegion200 = {
  /** A list of capabilities of this region.
 */
  readonly capabilities?: string[];
  /** The country where this Region resides. */
  readonly country?: string;
  /** The unique ID of this Region. */
  readonly id?: string;
  /** Detailed location information for this Region, including city, state or region, and country. */
  readonly label?: string;
  readonly resolvers?: GetRegion200Resolvers;
  /** This region's current operational status.
 */
  readonly status?: GetRegion200Status;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetRegionsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetRegionsDefault = {
  errors?: GetRegionsDefaultErrorsItem[];
};

export type GetRegions200 = {
  data?: GetRegions200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * This region's current operational status.

 */
export type GetRegions200DataItemStatus = typeof GetRegions200DataItemStatus[keyof typeof GetRegions200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetRegions200DataItemStatus = {
  ok: 'ok',
  outage: 'outage',
} as const;

export type GetRegions200DataItemResolvers = {
  /** The IPv4 addresses for this region's DNS resolvers, separated by commas.
 */
  readonly ipv4?: string;
  /** The IPv6 addresses for this region's DNS resolvers, separated by commas.
 */
  readonly ipv6?: string;
};

/**
 * An area where Linode services are available.
 */
export type GetRegions200DataItem = {
  /** A list of capabilities of this region.
 */
  readonly capabilities?: string[];
  /** The country where this Region resides. */
  readonly country?: string;
  /** The unique ID of this Region. */
  readonly id?: string;
  /** Detailed location information for this Region, including city, state or region, and country. */
  readonly label?: string;
  readonly resolvers?: GetRegions200DataItemResolvers;
  /** This region's current operational status.
 */
  readonly status?: GetRegions200DataItemStatus;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateUserPreferencesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateUserPreferencesDefault = {
  errors?: UpdateUserPreferencesDefaultErrorsItem[];
};

/**
 * An object of user preferences.
 */
export type UpdateUserPreferences200 = { [key: string]: any };

/**
 * Arbitrary JSON of your choosing. Overwrites any existing preferences for this user.

Total length cannot exceed 65,535 characters.

 */
export type UpdateUserPreferencesBody = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetUserPreferencesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetUserPreferencesDefault = {
  errors?: GetUserPreferencesDefaultErrorsItem[];
};

/**
 * A dictionary of user preferences.
 */
export type GetUserPreferences200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostProfilePhoneNumberVerifyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostProfilePhoneNumberVerifyDefault = {
  errors?: PostProfilePhoneNumberVerifyDefaultErrorsItem[];
};

export type PostProfilePhoneNumberVerify200 = { [key: string]: any };

export type PostProfilePhoneNumberVerifyBody = {
  /** The one-time code received via SMS message after accessing the **Phone Verification Code Send** ([POST /profile/phone-number](/docs/api/profile/#phone-number-verification-code-send)) command. */
  otp_code: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostProfilePhoneNumberDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostProfilePhoneNumberDefault = {
  errors?: PostProfilePhoneNumberDefaultErrorsItem[];
};

export type PostProfilePhoneNumber200 = { [key: string]: any };

export type PostProfilePhoneNumberBody = {
  /** The two-letter ISO 3166 country code associated with the phone number. */
  iso_code: string;
  /** A valid phone number. */
  phone_number: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteProfilePhoneNumberDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteProfilePhoneNumberDefault = {
  errors?: DeleteProfilePhoneNumberDefaultErrorsItem[];
};

export type DeleteProfilePhoneNumber200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteSSHKeyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteSSHKeyDefault = {
  errors?: DeleteSSHKeyDefaultErrorsItem[];
};

export type DeleteSSHKey200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateSSHKeyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateSSHKeyDefault = {
  errors?: UpdateSSHKeyDefaultErrorsItem[];
};

/**
 * A credential object for authenticating a User's secure shell connection to a Linode.

 */
export type UpdateSSHKey200 = {
  /** The date this key was added.
 */
  readonly created?: string;
  /** The unique identifier of an SSH Key object.
 */
  readonly id?: number;
  /** A label for the SSH Key.
 */
  label?: string;
  /** The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.

Accepted formats:
* ssh-dss
* ssh-rsa
* ecdsa-sha2-nistp
* ssh-ed25519
* sk-ecdsa-sha2-nistp256 (Akamai-specific)
 */
  ssh_key?: string;
};

export type UpdateSSHKeyBody = {
  /** A label for the SSH Key.
 */
  label?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetSSHKeyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetSSHKeyDefault = {
  errors?: GetSSHKeyDefaultErrorsItem[];
};

/**
 * A credential object for authenticating a User's secure shell connection to a Linode.

 */
export type GetSSHKey200 = {
  /** The date this key was added.
 */
  readonly created?: string;
  /** The unique identifier of an SSH Key object.
 */
  readonly id?: number;
  /** A label for the SSH Key.
 */
  label?: string;
  /** The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.

Accepted formats:
* ssh-dss
* ssh-rsa
* ecdsa-sha2-nistp
* ssh-ed25519
* sk-ecdsa-sha2-nistp256 (Akamai-specific)
 */
  ssh_key?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AddSSHKeyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AddSSHKeyDefault = {
  errors?: AddSSHKeyDefaultErrorsItem[];
};

/**
 * A credential object for authenticating a User's secure shell connection to a Linode.

 */
export type AddSSHKey200 = {
  /** The date this key was added.
 */
  readonly created?: string;
  /** The unique identifier of an SSH Key object.
 */
  readonly id?: number;
  /** A label for the SSH Key.
 */
  label?: string;
  /** The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.

Accepted formats:
* ssh-dss
* ssh-rsa
* ecdsa-sha2-nistp
* ssh-ed25519
* sk-ecdsa-sha2-nistp256 (Akamai-specific)
 */
  ssh_key?: string;
};

/**
 * A credential object for authenticating a User's secure shell connection to a Linode.

 */
export type AddSSHKeyBody = {
  /** The date this key was added.
 */
  readonly created?: string;
  /** The unique identifier of an SSH Key object.
 */
  readonly id?: number;
  /** A label for the SSH Key.
 */
  label?: string;
  /** The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.

Accepted formats:
* ssh-dss
* ssh-rsa
* ecdsa-sha2-nistp
* ssh-ed25519
* sk-ecdsa-sha2-nistp256 (Akamai-specific)
 */
  ssh_key?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetSSHKeysDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetSSHKeysDefault = {
  errors?: GetSSHKeysDefaultErrorsItem[];
};

/**
 * A credential object for authenticating a User's secure shell connection to a Linode.

 */
export type GetSSHKeys200DataItem = {
  /** The date this key was added.
 */
  readonly created?: string;
  /** The unique identifier of an SSH Key object.
 */
  readonly id?: number;
  /** A label for the SSH Key.
 */
  label?: string;
  /** The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.

Accepted formats:
* ssh-dss
* ssh-rsa
* ecdsa-sha2-nistp
* ssh-ed25519
* sk-ecdsa-sha2-nistp256 (Akamai-specific)
 */
  ssh_key?: string;
};

export type GetSSHKeys200 = {
  data?: GetSSHKeys200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetSSHKeysParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostSecurityQuestionsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostSecurityQuestionsDefault = {
  errors?: PostSecurityQuestionsDefaultErrorsItem[];
};

/**
 * Single security question and response object for POST operation.
 */
export type PostSecurityQuestions200SecurityQuestionsItem = {
  /** The ID representing the security question. */
  question_id?: number;
  /** The security question response.
 */
  response?: string;
  /** The security question. */
  readonly security_question?: string;
};

/**
 * Security questions and responses object for POST operation.
 */
export type PostSecurityQuestions200 = {
  security_questions?: PostSecurityQuestions200SecurityQuestionsItem[];
};

/**
 * Single security question and response object for POST operation.
 */
export type PostSecurityQuestionsBodySecurityQuestionsItem = {
  /** The ID representing the security question. */
  question_id?: number;
  /** The security question response.
 */
  response?: string;
  /** The security question. */
  readonly security_question?: string;
};

/**
 * Security questions and responses object for POST operation.
 */
export type PostSecurityQuestionsBody = {
  security_questions?: PostSecurityQuestionsBodySecurityQuestionsItem[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetSecurityQuestionsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetSecurityQuestionsDefault = {
  errors?: GetSecurityQuestionsDefaultErrorsItem[];
};

/**
 * Single security question and response object for GET operation.
 */
export type GetSecurityQuestions200SecurityQuestionsItem = {
  /** The ID representing the security question. */
  id?: number;
  /** The security question. */
  readonly question?: string;
  /** The security question response.
 */
  response?: string;
};

/**
 * Security questions and responses object for GET operation.
 */
export type GetSecurityQuestions200 = {
  security_questions?: GetSecurityQuestions200SecurityQuestionsItem[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type RevokeTrustedDeviceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type RevokeTrustedDeviceDefault = {
  errors?: RevokeTrustedDeviceDefaultErrorsItem[];
};

export type RevokeTrustedDevice200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetTrustedDeviceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetTrustedDeviceDefault = {
  errors?: GetTrustedDeviceDefaultErrorsItem[];
};

/**
 * A trusted device object represents an active Remember Me session with <a target="_top" href="https://login.linode.com">login.linode.com</a>.

 */
export type GetTrustedDevice200 = {
  /** When this Remember Me session was started.  This corresponds to the time of login with the "Remember Me" box checked.
 */
  readonly created?: string;
  /** When this TrustedDevice session expires.  Sessions typically last 30 days.
 */
  readonly expiry?: string;
  /** The unique ID for this TrustedDevice */
  readonly id?: number;
  /** The last time this TrustedDevice was successfully used to authenticate to <a target="_top" href="https://login.linode.com">login.linode.com</a>.
 */
  readonly last_authenticated?: string;
  /** The last IP Address to successfully authenticate with this TrustedDevice.
 */
  readonly last_remote_addr?: string;
  /** The User Agent of the browser that created this TrustedDevice session.
 */
  readonly user_agent?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDevicesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDevicesDefault = {
  errors?: GetDevicesDefaultErrorsItem[];
};

/**
 * A trusted device object represents an active Remember Me session with <a target="_top" href="https://login.linode.com">login.linode.com</a>.

 */
export type GetDevices200DataItem = {
  /** When this Remember Me session was started.  This corresponds to the time of login with the "Remember Me" box checked.
 */
  readonly created?: string;
  /** When this TrustedDevice session expires.  Sessions typically last 30 days.
 */
  readonly expiry?: string;
  /** The unique ID for this TrustedDevice */
  readonly id?: number;
  /** The last time this TrustedDevice was successfully used to authenticate to <a target="_top" href="https://login.linode.com">login.linode.com</a>.
 */
  readonly last_authenticated?: string;
  /** The last IP Address to successfully authenticate with this TrustedDevice.
 */
  readonly last_remote_addr?: string;
  /** The User Agent of the browser that created this TrustedDevice session.
 */
  readonly user_agent?: string;
};

export type GetDevices200 = {
  data?: GetDevices200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetProfileLoginDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetProfileLoginDefault = {
  errors?: GetProfileLoginDefaultErrorsItem[];
};

/**
 * Whether the login attempt succeeded or failed.

 */
export type GetProfileLogin200Status = typeof GetProfileLogin200Status[keyof typeof GetProfileLogin200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileLogin200Status = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * An object representing a previous successful login for a User.

 */
export type GetProfileLogin200 = {
  /** When the login was initiated.
 */
  readonly datetime?: string;
  /** The unique ID of this login object.
 */
  readonly id?: number;
  /** The remote IP address that requested the login.
 */
  readonly ip?: string;
  /** True if the User that attempted the login was a restricted User, false otherwise.
 */
  readonly restricted?: boolean;
  /** Whether the login attempt succeeded or failed.
 */
  readonly status?: GetProfileLogin200Status;
  /** The username of the User that attempted the login.
 */
  readonly username?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetProfileLoginsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetProfileLoginsDefault = {
  errors?: GetProfileLoginsDefaultErrorsItem[];
};

/**
 * Whether the login attempt succeeded or failed.

 */
export type GetProfileLogins200DataItemStatus = typeof GetProfileLogins200DataItemStatus[keyof typeof GetProfileLogins200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileLogins200DataItemStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * An object representing a previous successful login for a User.

 */
export type GetProfileLogins200DataItem = {
  /** When the login was initiated.
 */
  readonly datetime?: string;
  /** The unique ID of this login object.
 */
  readonly id?: number;
  /** The remote IP address that requested the login.
 */
  readonly ip?: string;
  /** True if the User that attempted the login was a restricted User, false otherwise.
 */
  readonly restricted?: boolean;
  /** Whether the login attempt succeeded or failed.
 */
  readonly status?: GetProfileLogins200DataItemStatus;
  /** The username of the User that attempted the login.
 */
  readonly username?: string;
};

export type GetProfileLogins200 = {
  data?: GetProfileLogins200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeletePersonalAccessTokenDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeletePersonalAccessTokenDefault = {
  errors?: DeletePersonalAccessTokenDefaultErrorsItem[];
};

export type DeletePersonalAccessToken200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdatePersonalAccessTokenDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdatePersonalAccessTokenDefault = {
  errors?: UpdatePersonalAccessTokenDefaultErrorsItem[];
};

/**
 * A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.

 */
export type UpdatePersonalAccessToken200 = {
  /** The date and time this token was created.
 */
  readonly created?: string;
  /** When this token will expire.  Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated.  Tokens may be created with "null" as their expiry and will never expire unless revoked.
 */
  readonly expiry?: string;
  /** This token's unique ID, which can be used to revoke it.
 */
  readonly id?: number;
  /** This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.
 */
  label?: string;
  /** The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the <a target="_top" href="https://github.com/linode/linode-cli">Linode CLI</a>, require tokens with access to `*`. Tokens with more restrictive scopes are generally more secure.
 */
  readonly scopes?: string;
  /** The token used to access the API.  When the token is created, the full token is returned here.  Otherwise, only the first 16 characters are returned.
 */
  readonly token?: string;
};

/**
 * A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.

 */
export type UpdatePersonalAccessTokenBody = {
  /** The date and time this token was created.
 */
  readonly created?: string;
  /** When this token will expire.  Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated.  Tokens may be created with "null" as their expiry and will never expire unless revoked.
 */
  readonly expiry?: string;
  /** This token's unique ID, which can be used to revoke it.
 */
  readonly id?: number;
  /** This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.
 */
  label?: string;
  /** The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the <a target="_top" href="https://github.com/linode/linode-cli">Linode CLI</a>, require tokens with access to `*`. Tokens with more restrictive scopes are generally more secure.
 */
  readonly scopes?: string;
  /** The token used to access the API.  When the token is created, the full token is returned here.  Otherwise, only the first 16 characters are returned.
 */
  readonly token?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetPersonalAccessTokenDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetPersonalAccessTokenDefault = {
  errors?: GetPersonalAccessTokenDefaultErrorsItem[];
};

/**
 * A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.

 */
export type GetPersonalAccessToken200 = {
  /** The date and time this token was created.
 */
  readonly created?: string;
  /** When this token will expire.  Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated.  Tokens may be created with "null" as their expiry and will never expire unless revoked.
 */
  readonly expiry?: string;
  /** This token's unique ID, which can be used to revoke it.
 */
  readonly id?: number;
  /** This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.
 */
  label?: string;
  /** The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the <a target="_top" href="https://github.com/linode/linode-cli">Linode CLI</a>, require tokens with access to `*`. Tokens with more restrictive scopes are generally more secure.
 */
  readonly scopes?: string;
  /** The token used to access the API.  When the token is created, the full token is returned here.  Otherwise, only the first 16 characters are returned.
 */
  readonly token?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreatePersonalAccessTokenDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreatePersonalAccessTokenDefault = {
  errors?: CreatePersonalAccessTokenDefaultErrorsItem[];
};

/**
 * A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.

 */
export type CreatePersonalAccessToken200 = {
  /** The date and time this token was created.
 */
  readonly created?: string;
  /** When this token will expire.  Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated.  Tokens may be created with "null" as their expiry and will never expire unless revoked.
 */
  readonly expiry?: string;
  /** This token's unique ID, which can be used to revoke it.
 */
  readonly id?: number;
  /** This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.
 */
  label?: string;
  /** The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the <a target="_top" href="https://github.com/linode/linode-cli">Linode CLI</a>, require tokens with access to `*`. Tokens with more restrictive scopes are generally more secure.
 */
  readonly scopes?: string;
  /** The token used to access the API.  When the token is created, the full token is returned here.  Otherwise, only the first 16 characters are returned.
 */
  readonly token?: string;
};

export type CreatePersonalAccessTokenBody = {
  /** When this token should be valid until.  If omitted, the new token will be valid until it is manually revoked.
 */
  expiry?: string;
  /** This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.
 */
  label?: string;
  /** The access [scopes](/docs/api#oauth-reference) to grant to the created token. These cannot be changed after creation, and may not exceed the scopes of the acting token.

If omitted or entered with a wildcard character (`*`), the new token will have the same scopes as the acting token.

Multiple scopes are separated by a space character (` `).

For example, `linodes:read_write account:read_only`.
 */
  scopes?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetPersonalAccessTokensDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetPersonalAccessTokensDefault = {
  errors?: GetPersonalAccessTokensDefaultErrorsItem[];
};

/**
 * A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.

 */
export type GetPersonalAccessTokens200DataItem = {
  /** The date and time this token was created.
 */
  readonly created?: string;
  /** When this token will expire.  Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated.  Tokens may be created with "null" as their expiry and will never expire unless revoked.
 */
  readonly expiry?: string;
  /** This token's unique ID, which can be used to revoke it.
 */
  readonly id?: number;
  /** This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.
 */
  label?: string;
  /** The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the <a target="_top" href="https://github.com/linode/linode-cli">Linode CLI</a>, require tokens with access to `*`. Tokens with more restrictive scopes are generally more secure.
 */
  readonly scopes?: string;
  /** The token used to access the API.  When the token is created, the full token is returned here.  Otherwise, only the first 16 characters are returned.
 */
  readonly token?: string;
};

export type GetPersonalAccessTokens200 = {
  data?: GetPersonalAccessTokens200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type TfaConfirmDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type TfaConfirmDefault = {
  errors?: TfaConfirmDefaultErrorsItem[];
};

export type TfaConfirm200 = {
  /** A one-use code that can be used in place of your Two Factor code, in case you are unable to generate one.  Keep this in a safe place to avoid being locked out of your Account.
 */
  scratch?: string;
};

export type TfaConfirmBody = {
  /** The Two Factor code you generated with your Two Factor secret. These codes are time-based, so be sure it is current.
 */
  tfa_code?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type TfaEnableDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type TfaEnableDefault = {
  errors?: TfaEnableDefaultErrorsItem[];
};

export type TfaEnable200 = {
  /** When this Two Factor secret expires.
 */
  expiry?: string;
  /** Your Two Factor secret. This is used to generate time-based two factor codes required for logging in. Doing this will be required to confirm TFA an actually enable it.
 */
  secret?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type TfaDisableDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type TfaDisableDefault = {
  errors?: TfaDisableDefaultErrorsItem[];
};

export type TfaDisable200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetProfileGrantsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetProfileGrantsDefault = {
  errors?: GetProfileGrantsDefaultErrorsItem[];
};

/**
 * A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.

 */
export type GetProfileGrants200 = {
  /** The grants this User has for each Database that is owned by this Account.
 */
  database?: GetProfileGrants200DatabaseItem[];
  /** The grants this User has for each Domain that is owned by this Account.
 */
  domain?: GetProfileGrants200DomainItem[];
  /** A structure containing the Account-level grants a User has.
 */
  global?: GetProfileGrants200Global;
  /** The grants this User has for each Image that is owned by this Account.
 */
  image?: GetProfileGrants200ImageItem[];
  /** The grants this User has for each Linode that is owned by this Account.
 */
  linode?: GetProfileGrants200LinodeItem[];
  /** The grants this User has for each Longview Client that is owned by this Account.
 */
  longview?: GetProfileGrants200LongviewItem[];
  /** The grants this User has for each NodeBalancer that is owned by this Account.
 */
  nodebalancer?: GetProfileGrants200NodebalancerItem[];
  /** The grants this User has for each StackScript that is owned by this Account.
 */
  stackscript?: GetProfileGrants200StackscriptItem[];
  /** The grants this User has for each Block Storage Volume that is owned by this Account.
 */
  volume?: GetProfileGrants200VolumeItem[];
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetProfileGrants200VolumeItemPermissions = typeof GetProfileGrants200VolumeItemPermissions[keyof typeof GetProfileGrants200VolumeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileGrants200VolumeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetProfileGrants200VolumeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetProfileGrants200VolumeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetProfileGrants200StackscriptItemPermissions = typeof GetProfileGrants200StackscriptItemPermissions[keyof typeof GetProfileGrants200StackscriptItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileGrants200StackscriptItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetProfileGrants200StackscriptItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetProfileGrants200StackscriptItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetProfileGrants200NodebalancerItemPermissions = typeof GetProfileGrants200NodebalancerItemPermissions[keyof typeof GetProfileGrants200NodebalancerItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileGrants200NodebalancerItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetProfileGrants200NodebalancerItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetProfileGrants200NodebalancerItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetProfileGrants200LongviewItemPermissions = typeof GetProfileGrants200LongviewItemPermissions[keyof typeof GetProfileGrants200LongviewItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileGrants200LongviewItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetProfileGrants200LongviewItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetProfileGrants200LongviewItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetProfileGrants200LinodeItemPermissions = typeof GetProfileGrants200LinodeItemPermissions[keyof typeof GetProfileGrants200LinodeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileGrants200LinodeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetProfileGrants200LinodeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetProfileGrants200LinodeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetProfileGrants200ImageItemPermissions = typeof GetProfileGrants200ImageItemPermissions[keyof typeof GetProfileGrants200ImageItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileGrants200ImageItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetProfileGrants200ImageItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetProfileGrants200ImageItemPermissions;
};

/**
 * The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.

 */
export type GetProfileGrants200GlobalAccountAccess = typeof GetProfileGrants200GlobalAccountAccess[keyof typeof GetProfileGrants200GlobalAccountAccess];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileGrants200GlobalAccountAccess = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * A structure containing the Account-level grants a User has.

 */
export type GetProfileGrants200Global = {
  /** The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
 */
  account_access?: GetProfileGrants200GlobalAccountAccess;
  /** if true, this User may add Managed Databases. */
  add_databases?: boolean;
  /** If true, this User may add Domains. */
  add_domains?: boolean;
  /** If true, this User may add Firewalls. */
  add_firewalls?: boolean;
  /** If true, this User may add Images. */
  add_images?: boolean;
  /** If true, this User may create Linodes. */
  add_linodes?: boolean;
  /** If true, this User may create Longview clients and view the current plan. */
  add_longview?: boolean;
  /** If true, this User may add NodeBalancers. */
  add_nodebalancers?: boolean;
  /** If true, this User may add StackScripts. */
  add_stackscripts?: boolean;
  /** If true, this User may add Volumes. */
  add_volumes?: boolean;
  /** If true, this User may cancel the entire Account. */
  cancel_account?: boolean;
  /** If true, this User may manage the Account's Longview subscription. */
  longview_subscription?: boolean;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetProfileGrants200DomainItemPermissions = typeof GetProfileGrants200DomainItemPermissions[keyof typeof GetProfileGrants200DomainItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileGrants200DomainItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetProfileGrants200DomainItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetProfileGrants200DomainItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetProfileGrants200DatabaseItemPermissions = typeof GetProfileGrants200DatabaseItemPermissions[keyof typeof GetProfileGrants200DatabaseItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfileGrants200DatabaseItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetProfileGrants200DatabaseItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetProfileGrants200DatabaseItemPermissions;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteProfileAppDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteProfileAppDefault = {
  errors?: DeleteProfileAppDefaultErrorsItem[];
};

export type DeleteProfileApp200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetProfileAppDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetProfileAppDefault = {
  errors?: GetProfileAppDefaultErrorsItem[];
};

/**
 * An application you have authorized access to your Account through OAuth.

 */
export type GetProfileApp200 = {
  /** When this app was authorized. */
  readonly created?: string;
  /** When the app's access to your account expires. If `null`, the app's access must be revoked manually.
 */
  readonly expiry?: string | null;
  /** This authorization's ID, used for revoking access.
 */
  readonly id?: number;
  /** The name of the application you've authorized.
 */
  readonly label?: string;
  /** The OAuth scopes this app was authorized with.  This defines what parts of your Account the app is allowed to access.
 */
  readonly scopes?: string;
  /** The URL at which this app's thumbnail may be accessed.
 */
  readonly thumbnail_url?: string;
  /** The website where you can get more information about this app.
 */
  readonly website?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetProfileAppsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetProfileAppsDefault = {
  errors?: GetProfileAppsDefaultErrorsItem[];
};

/**
 * An application you have authorized access to your Account through OAuth.

 */
export type GetProfileApps200DataItem = {
  /** When this app was authorized. */
  readonly created?: string;
  /** When the app's access to your account expires. If `null`, the app's access must be revoked manually.
 */
  readonly expiry?: string | null;
  /** This authorization's ID, used for revoking access.
 */
  readonly id?: number;
  /** The name of the application you've authorized.
 */
  readonly label?: string;
  /** The OAuth scopes this app was authorized with.  This defines what parts of your Account the app is allowed to access.
 */
  readonly scopes?: string;
  /** The URL at which this app's thumbnail may be accessed.
 */
  readonly thumbnail_url?: string;
  /** The website where you can get more information about this app.
 */
  readonly website?: string;
};

export type GetProfileApps200 = {
  data?: GetProfileApps200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetProfileAppsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateProfileDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateProfileDefault = {
  errors?: UpdateProfileDefaultErrorsItem[];
};

/**
 * Information about your status in our referral program.

This information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.

 */
export type UpdateProfile200Referrals = {
  /** Your referral code.  If others use this when signing up for Linode, you will receive account credit.
 */
  readonly code?: string;
  /** The number of completed signups with your referral code.
 */
  readonly completed?: number;
  /** The amount of account credit in US Dollars issued to you through the referral program.
 */
  readonly credit?: number;
  /** The number of pending signups with your referral code.  You will not receive credit for these signups until they are completed.
 */
  readonly pending?: number;
  /** The number of users who have signed up with your referral code.
 */
  readonly total?: number;
  /** Your referral url, used to direct others to sign up for Linode with your referral code.
 */
  readonly url?: string;
};

/**
 * The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).
* `keys_only` is the most secure if you intend to use Lish.
* `disabled` is recommended if you do not intend to use Lish at all.
* If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.

 */
export type UpdateProfile200LishAuthMethod = typeof UpdateProfile200LishAuthMethod[keyof typeof UpdateProfile200LishAuthMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateProfile200LishAuthMethod = {
  password_keys: 'password_keys',
  keys_only: 'keys_only',
  disabled: 'disabled',
} as const;

/**
 * This account's Cloud Manager authentication type. Authentication types are chosen through
Cloud Manager and authorized when logging into your account. These authentication types are either
the user's password (in conjunction with their username), or the name of their
indentity provider such as GitHub. For example, if a user:

- Has never used Third-Party Authentication, their authentication type will be `password`.
- Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).
- Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.


**Note:** This functionality may not yet be available in Cloud Manager.
See the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.

 */
export type UpdateProfile200AuthenticationType = typeof UpdateProfile200AuthenticationType[keyof typeof UpdateProfile200AuthenticationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateProfile200AuthenticationType = {
  password: 'password',
  github: 'github',
} as const;

/**
 * A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.

 */
export type UpdateProfile200 = {
  /** This account's Cloud Manager authentication type. Authentication types are chosen through
Cloud Manager and authorized when logging into your account. These authentication types are either
the user's password (in conjunction with their username), or the name of their
indentity provider such as GitHub. For example, if a user:

- Has never used Third-Party Authentication, their authentication type will be `password`.
- Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).
- Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.


**Note:** This functionality may not yet be available in Cloud Manager.
See the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.
 */
  readonly authentication_type?: UpdateProfile200AuthenticationType;
  /** The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is "disabled."
 */
  authorized_keys?: string[] | null;
  /** Your email address.  This address will be used for communication with Linode as necessary.
 */
  email?: string;
  /** If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.
 */
  email_notifications?: boolean;
  /**
   * If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.

If you disable this setting, you will not be able to re-enable it.

   * @deprecated
   */
  ip_whitelist_enabled?: boolean;
  /** The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).
* `keys_only` is the most secure if you intend to use Lish.
* `disabled` is recommended if you do not intend to use Lish at all.
* If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.
 */
  lish_auth_method?: UpdateProfile200LishAuthMethod;
  /** Information about your status in our referral program.

This information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.
 */
  readonly referrals?: UpdateProfile200Referrals;
  /** If true, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, see [/profile/grants](/docs/api/profile/#grants-list).
 */
  restricted?: boolean;
  /** The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.
 */
  timezone?: string;
  /** If true, logins from untrusted computers will require Two Factor Authentication.  See [/profile/tfa-enable](/docs/api/profile/#two-factor-secret-create) to enable Two Factor Authentication.
 */
  two_factor_auth?: boolean;
  /** Your unique ID in our system. This value will never change, and can safely be used to identify your User.
 */
  readonly uid?: number;
  /** Your username, used for logging in to our system.
 */
  readonly username?: string;
  /** The phone number verified for this Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
};

/**
 * Information about your status in our referral program.

This information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.

 */
export type UpdateProfileBodyReferrals = {
  /** Your referral code.  If others use this when signing up for Linode, you will receive account credit.
 */
  readonly code?: string;
  /** The number of completed signups with your referral code.
 */
  readonly completed?: number;
  /** The amount of account credit in US Dollars issued to you through the referral program.
 */
  readonly credit?: number;
  /** The number of pending signups with your referral code.  You will not receive credit for these signups until they are completed.
 */
  readonly pending?: number;
  /** The number of users who have signed up with your referral code.
 */
  readonly total?: number;
  /** Your referral url, used to direct others to sign up for Linode with your referral code.
 */
  readonly url?: string;
};

/**
 * The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).
* `keys_only` is the most secure if you intend to use Lish.
* `disabled` is recommended if you do not intend to use Lish at all.
* If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.

 */
export type UpdateProfileBodyLishAuthMethod = typeof UpdateProfileBodyLishAuthMethod[keyof typeof UpdateProfileBodyLishAuthMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateProfileBodyLishAuthMethod = {
  password_keys: 'password_keys',
  keys_only: 'keys_only',
  disabled: 'disabled',
} as const;

/**
 * This account's Cloud Manager authentication type. Authentication types are chosen through
Cloud Manager and authorized when logging into your account. These authentication types are either
the user's password (in conjunction with their username), or the name of their
indentity provider such as GitHub. For example, if a user:

- Has never used Third-Party Authentication, their authentication type will be `password`.
- Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).
- Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.


**Note:** This functionality may not yet be available in Cloud Manager.
See the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.

 */
export type UpdateProfileBodyAuthenticationType = typeof UpdateProfileBodyAuthenticationType[keyof typeof UpdateProfileBodyAuthenticationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateProfileBodyAuthenticationType = {
  password: 'password',
  github: 'github',
} as const;

/**
 * A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.

 */
export type UpdateProfileBody = {
  /** This account's Cloud Manager authentication type. Authentication types are chosen through
Cloud Manager and authorized when logging into your account. These authentication types are either
the user's password (in conjunction with their username), or the name of their
indentity provider such as GitHub. For example, if a user:

- Has never used Third-Party Authentication, their authentication type will be `password`.
- Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).
- Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.


**Note:** This functionality may not yet be available in Cloud Manager.
See the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.
 */
  readonly authentication_type?: UpdateProfileBodyAuthenticationType;
  /** The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is "disabled."
 */
  authorized_keys?: string[] | null;
  /** Your email address.  This address will be used for communication with Linode as necessary.
 */
  email?: string;
  /** If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.
 */
  email_notifications?: boolean;
  /**
   * If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.

If you disable this setting, you will not be able to re-enable it.

   * @deprecated
   */
  ip_whitelist_enabled?: boolean;
  /** The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).
* `keys_only` is the most secure if you intend to use Lish.
* `disabled` is recommended if you do not intend to use Lish at all.
* If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.
 */
  lish_auth_method?: UpdateProfileBodyLishAuthMethod;
  /** Information about your status in our referral program.

This information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.
 */
  readonly referrals?: UpdateProfileBodyReferrals;
  /** If true, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, see [/profile/grants](/docs/api/profile/#grants-list).
 */
  restricted?: boolean;
  /** The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.
 */
  timezone?: string;
  /** If true, logins from untrusted computers will require Two Factor Authentication.  See [/profile/tfa-enable](/docs/api/profile/#two-factor-secret-create) to enable Two Factor Authentication.
 */
  two_factor_auth?: boolean;
  /** Your unique ID in our system. This value will never change, and can safely be used to identify your User.
 */
  readonly uid?: number;
  /** Your username, used for logging in to our system.
 */
  readonly username?: string;
  /** The phone number verified for this Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetProfileDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetProfileDefault = {
  errors?: GetProfileDefaultErrorsItem[];
};

/**
 * Information about your status in our referral program.

This information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.

 */
export type GetProfile200Referrals = {
  /** Your referral code.  If others use this when signing up for Linode, you will receive account credit.
 */
  readonly code?: string;
  /** The number of completed signups with your referral code.
 */
  readonly completed?: number;
  /** The amount of account credit in US Dollars issued to you through the referral program.
 */
  readonly credit?: number;
  /** The number of pending signups with your referral code.  You will not receive credit for these signups until they are completed.
 */
  readonly pending?: number;
  /** The number of users who have signed up with your referral code.
 */
  readonly total?: number;
  /** Your referral url, used to direct others to sign up for Linode with your referral code.
 */
  readonly url?: string;
};

/**
 * The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).
* `keys_only` is the most secure if you intend to use Lish.
* `disabled` is recommended if you do not intend to use Lish at all.
* If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.

 */
export type GetProfile200LishAuthMethod = typeof GetProfile200LishAuthMethod[keyof typeof GetProfile200LishAuthMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfile200LishAuthMethod = {
  password_keys: 'password_keys',
  keys_only: 'keys_only',
  disabled: 'disabled',
} as const;

/**
 * This account's Cloud Manager authentication type. Authentication types are chosen through
Cloud Manager and authorized when logging into your account. These authentication types are either
the user's password (in conjunction with their username), or the name of their
indentity provider such as GitHub. For example, if a user:

- Has never used Third-Party Authentication, their authentication type will be `password`.
- Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).
- Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.


**Note:** This functionality may not yet be available in Cloud Manager.
See the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.

 */
export type GetProfile200AuthenticationType = typeof GetProfile200AuthenticationType[keyof typeof GetProfile200AuthenticationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProfile200AuthenticationType = {
  password: 'password',
  github: 'github',
} as const;

/**
 * A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.

 */
export type GetProfile200 = {
  /** This account's Cloud Manager authentication type. Authentication types are chosen through
Cloud Manager and authorized when logging into your account. These authentication types are either
the user's password (in conjunction with their username), or the name of their
indentity provider such as GitHub. For example, if a user:

- Has never used Third-Party Authentication, their authentication type will be `password`.
- Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).
- Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.


**Note:** This functionality may not yet be available in Cloud Manager.
See the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.
 */
  readonly authentication_type?: GetProfile200AuthenticationType;
  /** The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is "disabled."
 */
  authorized_keys?: string[] | null;
  /** Your email address.  This address will be used for communication with Linode as necessary.
 */
  email?: string;
  /** If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.
 */
  email_notifications?: boolean;
  /**
   * If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.

If you disable this setting, you will not be able to re-enable it.

   * @deprecated
   */
  ip_whitelist_enabled?: boolean;
  /** The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).
* `keys_only` is the most secure if you intend to use Lish.
* `disabled` is recommended if you do not intend to use Lish at all.
* If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.
 */
  lish_auth_method?: GetProfile200LishAuthMethod;
  /** Information about your status in our referral program.

This information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.
 */
  readonly referrals?: GetProfile200Referrals;
  /** If true, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, see [/profile/grants](/docs/api/profile/#grants-list).
 */
  restricted?: boolean;
  /** The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.
 */
  timezone?: string;
  /** If true, logins from untrusted computers will require Two Factor Authentication.  See [/profile/tfa-enable](/docs/api/profile/#two-factor-secret-create) to enable Two Factor Authentication.
 */
  two_factor_auth?: boolean;
  /** Your unique ID in our system. This value will never change, and can safely be used to identify your User.
 */
  readonly uid?: number;
  /** Your username, used for logging in to our system.
 */
  readonly username?: string;
  /** The phone number verified for this Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageTransferDefault = {
  errors?: GetObjectStorageTransferDefaultErrorsItem[];
};

export type GetObjectStorageTransfer200 = {
  /** The amount of outbound data transfer used by your account's Object Storage buckets, in bytes, for the current month's billing cycle.
 */
  readonly used?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteObjectStorageSSLDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteObjectStorageSSLDefault = {
  errors?: DeleteObjectStorageSSLDefaultErrorsItem[];
};

export type DeleteObjectStorageSSL200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateObjectStorageSSLDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateObjectStorageSSLDefault = {
  errors?: CreateObjectStorageSSLDefaultErrorsItem[];
};

/**
 * If this Object Storage bucket has a corresponding TLS/SSL Certificate.

 */
export type CreateObjectStorageSSL200 = {
  /** A boolean indicating if this Bucket has a corresponding TLS/SSL certificate that was uploaded by an Account user.
 */
  readonly ssl?: boolean;
};

/**
 * Upload a TLS/SSL certificate and private key to be served when you visit your Object Storage bucket via HTTPS.

 */
export type CreateObjectStorageSSLBody = {
  /** Your Base64 encoded and PEM formatted SSL certificate.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI)
 */
  certificate: string;
  /** The private key associated with this TLS/SSL certificate.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI)
 */
  private_key: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageSSLDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageSSLDefault = {
  errors?: GetObjectStorageSSLDefaultErrorsItem[];
};

/**
 * If this Object Storage bucket has a corresponding TLS/SSL Certificate.

 */
export type GetObjectStorageSSL200 = {
  /** A boolean indicating if this Bucket has a corresponding TLS/SSL certificate that was uploaded by an Account user.
 */
  readonly ssl?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CancelObjectStorageDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CancelObjectStorageDefault = {
  errors?: CancelObjectStorageDefaultErrorsItem[];
};

export type CancelObjectStorage200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteObjectStorageKeyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteObjectStorageKeyDefault = {
  errors?: DeleteObjectStorageKeyDefaultErrorsItem[];
};

export type DeleteObjectStorageKey200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateObjectStorageKeyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateObjectStorageKeyDefault = {
  errors?: UpdateObjectStorageKeyDefaultErrorsItem[];
};

/**
 * This Limited Access Key's permissions for the selected bucket.
 */
export type UpdateObjectStorageKey200BucketAccessItemPermissions = typeof UpdateObjectStorageKey200BucketAccessItemPermissions[keyof typeof UpdateObjectStorageKey200BucketAccessItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateObjectStorageKey200BucketAccessItemPermissions = {
  read_write: 'read_write',
  read_only: 'read_only',
} as const;

export type UpdateObjectStorageKey200BucketAccessItem = {
  /** The unique label of the bucket to which the key will grant limited access. */
  bucket_name?: string;
  /** The Object Storage cluster where a bucket to which the key is granting access is hosted. */
  cluster?: string;
  /** This Limited Access Key's permissions for the selected bucket. */
  permissions?: UpdateObjectStorageKey200BucketAccessItemPermissions;
};

/**
 * A keypair used to communicate with the Object Storage S3 API.
 */
export type UpdateObjectStorageKey200 = {
  /** This keypair's access key. This is not secret. */
  readonly access_key?: string;
  /** Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key's access to only the bucket(s) declared in this array and define their bucket-level permissions.


  Limited Access Keys can:

  * [list all buckets](/docs/api/object-storage/#object-storage-buckets-list) available on this Account, but cannot perform any actions on a bucket unless it has access to the bucket.


  * [create new buckets](/docs/api/object-storage/#object-storage-bucket-create), but do not have any access to the buckets it creates, unless explicitly given access to them.


  **Note:** You can create an Object Storage Limited Access Key without access to any buckets.
  This is achieved by sending a request with an empty `bucket_access` array.


  **Note:** If this field is omitted, a regular unlimited access key is issued.
 */
  bucket_access?: UpdateObjectStorageKey200BucketAccessItem[];
  /** This keypair's unique ID */
  readonly id?: number;
  /** The label given to this key. For display purposes only. */
  label?: string;
  /** Whether or not this key is a limited access key. Will return `false` if this key grants full access to all buckets on the user's account. */
  readonly limited?: boolean;
  /** This keypair's secret key. Only returned on key creation. */
  readonly secret_key?: string;
};

export type UpdateObjectStorageKeyBody = {
  /** The label for this keypair, for display purposes only. */
  label?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageKeyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageKeyDefault = {
  errors?: GetObjectStorageKeyDefaultErrorsItem[];
};

/**
 * This Limited Access Key's permissions for the selected bucket.
 */
export type GetObjectStorageKey200BucketAccessItemPermissions = typeof GetObjectStorageKey200BucketAccessItemPermissions[keyof typeof GetObjectStorageKey200BucketAccessItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetObjectStorageKey200BucketAccessItemPermissions = {
  read_write: 'read_write',
  read_only: 'read_only',
} as const;

export type GetObjectStorageKey200BucketAccessItem = {
  /** The unique label of the bucket to which the key will grant limited access. */
  bucket_name?: string;
  /** The Object Storage cluster where a bucket to which the key is granting access is hosted. */
  cluster?: string;
  /** This Limited Access Key's permissions for the selected bucket. */
  permissions?: GetObjectStorageKey200BucketAccessItemPermissions;
};

/**
 * A keypair used to communicate with the Object Storage S3 API.
 */
export type GetObjectStorageKey200 = {
  /** This keypair's access key. This is not secret. */
  readonly access_key?: string;
  /** Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key's access to only the bucket(s) declared in this array and define their bucket-level permissions.


  Limited Access Keys can:

  * [list all buckets](/docs/api/object-storage/#object-storage-buckets-list) available on this Account, but cannot perform any actions on a bucket unless it has access to the bucket.


  * [create new buckets](/docs/api/object-storage/#object-storage-bucket-create), but do not have any access to the buckets it creates, unless explicitly given access to them.


  **Note:** You can create an Object Storage Limited Access Key without access to any buckets.
  This is achieved by sending a request with an empty `bucket_access` array.


  **Note:** If this field is omitted, a regular unlimited access key is issued.
 */
  bucket_access?: GetObjectStorageKey200BucketAccessItem[];
  /** This keypair's unique ID */
  readonly id?: number;
  /** The label given to this key. For display purposes only. */
  label?: string;
  /** Whether or not this key is a limited access key. Will return `false` if this key grants full access to all buckets on the user's account. */
  readonly limited?: boolean;
  /** This keypair's secret key. Only returned on key creation. */
  readonly secret_key?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateObjectStorageKeysDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateObjectStorageKeysDefault = {
  errors?: CreateObjectStorageKeysDefaultErrorsItem[];
};

/**
 * A keypair used to communicate with the Object Storage S3 API.
 */
export type CreateObjectStorageKeys200 = {
  /** This keypair's access key. This is not secret. */
  readonly access_key?: string;
  /** Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key's access to only the bucket(s) declared in this array and define their bucket-level permissions.


  Limited Access Keys can:

  * [list all buckets](/docs/api/object-storage/#object-storage-buckets-list) available on this Account, but cannot perform any actions on a bucket unless it has access to the bucket.


  * [create new buckets](/docs/api/object-storage/#object-storage-bucket-create), but do not have any access to the buckets it creates, unless explicitly given access to them.


  **Note:** You can create an Object Storage Limited Access Key without access to any buckets.
  This is achieved by sending a request with an empty `bucket_access` array.


  **Note:** If this field is omitted, a regular unlimited access key is issued.
 */
  bucket_access?: CreateObjectStorageKeys200BucketAccessItem[];
  /** This keypair's unique ID */
  readonly id?: number;
  /** The label given to this key. For display purposes only. */
  label?: string;
  /** Whether or not this key is a limited access key. Will return `false` if this key grants full access to all buckets on the user's account. */
  readonly limited?: boolean;
  /** This keypair's secret key. Only returned on key creation. */
  readonly secret_key?: string;
};

/**
 * This Limited Access Key's permissions for the selected bucket.
 */
export type CreateObjectStorageKeys200BucketAccessItemPermissions = typeof CreateObjectStorageKeys200BucketAccessItemPermissions[keyof typeof CreateObjectStorageKeys200BucketAccessItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateObjectStorageKeys200BucketAccessItemPermissions = {
  read_write: 'read_write',
  read_only: 'read_only',
} as const;

export type CreateObjectStorageKeys200BucketAccessItem = {
  /** The unique label of the bucket to which the key will grant limited access. */
  bucket_name?: string;
  /** The Object Storage cluster where a bucket to which the key is granting access is hosted. */
  cluster?: string;
  /** This Limited Access Key's permissions for the selected bucket. */
  permissions?: CreateObjectStorageKeys200BucketAccessItemPermissions;
};

/**
 * This Limited Access Key's permissions for the selected bucket.
 */
export type CreateObjectStorageKeysBodyBucketAccessItemPermissions = typeof CreateObjectStorageKeysBodyBucketAccessItemPermissions[keyof typeof CreateObjectStorageKeysBodyBucketAccessItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateObjectStorageKeysBodyBucketAccessItemPermissions = {
  read_write: 'read_write',
  read_only: 'read_only',
} as const;

export type CreateObjectStorageKeysBodyBucketAccessItem = {
  /** The unique label of the bucket to which the key will grant limited access. */
  bucket_name?: string;
  /** The Object Storage cluster where a bucket to which the key is granting access is hosted. */
  cluster?: string;
  /** This Limited Access Key's permissions for the selected bucket. */
  permissions?: CreateObjectStorageKeysBodyBucketAccessItemPermissions;
};

/**
 * A keypair used to communicate with the Object Storage S3 API.
 */
export type CreateObjectStorageKeysBody = {
  /** This keypair's access key. This is not secret. */
  readonly access_key?: string;
  /** Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key's access to only the bucket(s) declared in this array and define their bucket-level permissions.


  Limited Access Keys can:

  * [list all buckets](/docs/api/object-storage/#object-storage-buckets-list) available on this Account, but cannot perform any actions on a bucket unless it has access to the bucket.


  * [create new buckets](/docs/api/object-storage/#object-storage-bucket-create), but do not have any access to the buckets it creates, unless explicitly given access to them.


  **Note:** You can create an Object Storage Limited Access Key without access to any buckets.
  This is achieved by sending a request with an empty `bucket_access` array.


  **Note:** If this field is omitted, a regular unlimited access key is issued.
 */
  bucket_access?: CreateObjectStorageKeysBodyBucketAccessItem[];
  /** This keypair's unique ID */
  readonly id?: number;
  /** The label given to this key. For display purposes only. */
  label?: string;
  /** Whether or not this key is a limited access key. Will return `false` if this key grants full access to all buckets on the user's account. */
  readonly limited?: boolean;
  /** This keypair's secret key. Only returned on key creation. */
  readonly secret_key?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageKeysDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageKeysDefault = {
  errors?: GetObjectStorageKeysDefaultErrorsItem[];
};

export type GetObjectStorageKeys200 = {
  data?: GetObjectStorageKeys200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * This Limited Access Key's permissions for the selected bucket.
 */
export type GetObjectStorageKeys200DataItemBucketAccessItemPermissions = typeof GetObjectStorageKeys200DataItemBucketAccessItemPermissions[keyof typeof GetObjectStorageKeys200DataItemBucketAccessItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetObjectStorageKeys200DataItemBucketAccessItemPermissions = {
  read_write: 'read_write',
  read_only: 'read_only',
} as const;

export type GetObjectStorageKeys200DataItemBucketAccessItem = {
  /** The unique label of the bucket to which the key will grant limited access. */
  bucket_name?: string;
  /** The Object Storage cluster where a bucket to which the key is granting access is hosted. */
  cluster?: string;
  /** This Limited Access Key's permissions for the selected bucket. */
  permissions?: GetObjectStorageKeys200DataItemBucketAccessItemPermissions;
};

/**
 * A keypair used to communicate with the Object Storage S3 API.
 */
export type GetObjectStorageKeys200DataItem = {
  /** This keypair's access key. This is not secret. */
  readonly access_key?: string;
  /** Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key's access to only the bucket(s) declared in this array and define their bucket-level permissions.


  Limited Access Keys can:

  * [list all buckets](/docs/api/object-storage/#object-storage-buckets-list) available on this Account, but cannot perform any actions on a bucket unless it has access to the bucket.


  * [create new buckets](/docs/api/object-storage/#object-storage-bucket-create), but do not have any access to the buckets it creates, unless explicitly given access to them.


  **Note:** You can create an Object Storage Limited Access Key without access to any buckets.
  This is achieved by sending a request with an empty `bucket_access` array.


  **Note:** If this field is omitted, a regular unlimited access key is issued.
 */
  bucket_access?: GetObjectStorageKeys200DataItemBucketAccessItem[];
  /** This keypair's unique ID */
  readonly id?: number;
  /** The label given to this key. For display purposes only. */
  label?: string;
  /** Whether or not this key is a limited access key. Will return `false` if this key grants full access to all buckets on the user's account. */
  readonly limited?: boolean;
  /** This keypair's secret key. Only returned on key creation. */
  readonly secret_key?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageClusterDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageClusterDefault = {
  errors?: GetObjectStorageClusterDefaultErrorsItem[];
};

/**
 * This cluster's status.
 */
export type GetObjectStorageCluster200Status = typeof GetObjectStorageCluster200Status[keyof typeof GetObjectStorageCluster200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetObjectStorageCluster200Status = {
  available: 'available',
  unavailable: 'unavailable',
} as const;

/**
 * An Object Storage Cluster
 */
export type GetObjectStorageCluster200 = {
  /** The base URL for this cluster, used for connecting with third-party clients. */
  domain?: string;
  /** The unique ID for this cluster. */
  id?: string;
  /** The region where this cluster is located. */
  region?: string;
  /** The base URL for this cluster used when hosting static sites. */
  static_site_domain?: string;
  /** This cluster's status. */
  status?: GetObjectStorageCluster200Status;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageClustersDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageClustersDefault = {
  errors?: GetObjectStorageClustersDefaultErrorsItem[];
};

export type GetObjectStorageClusters200 = {
  data?: GetObjectStorageClusters200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * This cluster's status.
 */
export type GetObjectStorageClusters200DataItemStatus = typeof GetObjectStorageClusters200DataItemStatus[keyof typeof GetObjectStorageClusters200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetObjectStorageClusters200DataItemStatus = {
  available: 'available',
  unavailable: 'unavailable',
} as const;

/**
 * An Object Storage Cluster
 */
export type GetObjectStorageClusters200DataItem = {
  /** The base URL for this cluster, used for connecting with third-party clients. */
  domain?: string;
  /** The unique ID for this cluster. */
  id?: string;
  /** The region where this cluster is located. */
  region?: string;
  /** The base URL for this cluster used when hosting static sites. */
  static_site_domain?: string;
  /** This cluster's status. */
  status?: GetObjectStorageClusters200DataItemStatus;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateObjectStorageObjectURLDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateObjectStorageObjectURLDefault = {
  errors?: CreateObjectStorageObjectURLDefaultErrorsItem[];
};

export type CreateObjectStorageObjectURL200 = {
  /** The signed URL to perform the request at. */
  url?: string;
};

export type CreateObjectStorageObjectURLBody = {
  /** The expected `Content-type` header of the request this signed URL will be valid for.  If provided, the `Content-type` header _must_ be sent with the request when this URL is used, and _must_ be the same as it was when the signed URL was created. Required for all methods *except* "GET" or "DELETE".
 */
  content_type?: string;
  /** How long this signed URL will be valid for, in seconds.  If omitted, the URL will be valid for 3600 seconds (1 hour).
 */
  expires_in?: number;
  /** The HTTP method allowed to be used with the pre-signed URL. */
  method: string;
  /** The name of the object that will be accessed with the pre-signed URL. This object need not exist, and no error will be returned if it doesn't. This behavior is useful for generating pre-signed URLs to upload new objects to by setting the `method` to "PUT".
 */
  name: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageBucketContentDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageBucketContentDefault = {
  errors?: GetObjectStorageBucketContentDefaultErrorsItem[];
};

/**
 * An Object in Object Storage, or a "prefix" that contains one or more objects when a `delimiter` is used.

 */
export type GetObjectStorageBucketContent200DataItem = {
  /** An MD-5 hash of the object. `null` if this object represents a prefix.
 */
  etag?: string;
  /** Designates if there is another page of bucket objects. */
  is_truncated?: boolean;
  /** The date and time this object was last modified. `null` if this object represents a prefix.
 */
  last_modified?: string;
  /** The name of this object or prefix.
 */
  name?: string;
  /** Returns the value you should pass to the `marker` query parameter to get the next page of objects. If there is no next page, `null` will be returned.
 */
  next_marker?: string | null;
  /** The owner of this object, as a UUID. `null` if this object represents a prefix.
 */
  owner?: string;
  /** The size of this object, in bytes. `null` if this object represents a prefix.
 */
  size?: number;
};

export type GetObjectStorageBucketContent200 = {
  /** This page of objects in the bucket. */
  data?: GetObjectStorageBucketContent200DataItem[];
};

export type GetObjectStorageBucketContentParams = {
/**
 * The "marker" for this request, which can be used to paginate through large buckets. Its value should be the value of the `next_marker` property returned with the last page. Listing bucket contents *does not* support arbitrary page access. See the `next_marker` property in the responses section for more details.

 */
marker?: string;
/**
 * The delimiter for object names; if given, object names will be returned up to the first occurrence of this character. This is most commonly used with the `/` character to allow bucket transversal in a manner similar to a filesystem, however any delimiter may be used. Use in conjunction with `prefix` to see object names past the first occurrence of the delimiter.

 */
delimiter?: string;
/**
 * Filters objects returned to only those whose name start with the given prefix. Commonly used in conjunction with `delimiter` to allow transversal of bucket contents in a manner similar to a filesystem.

 */
prefix?: string;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateObjectStorageBucketACLDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateObjectStorageBucketACLDefault = {
  errors?: UpdateObjectStorageBucketACLDefaultErrorsItem[];
};

/**
 * The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.

 */
export type UpdateObjectStorageBucketACL200Acl = typeof UpdateObjectStorageBucketACL200Acl[keyof typeof UpdateObjectStorageBucketACL200Acl];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateObjectStorageBucketACL200Acl = {
  private: 'private',
  'public-read': 'public-read',
  'authenticated-read': 'authenticated-read',
  'public-read-write': 'public-read-write',
  custom: 'custom',
} as const;

export type UpdateObjectStorageBucketACL200 = {
  /** The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
 */
  acl?: UpdateObjectStorageBucketACL200Acl;
  /** The full XML of the object's ACL policy.
 */
  acl_xml?: string;
};

/**
 * The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.

 */
export type UpdateObjectStorageBucketACLBodyAcl = typeof UpdateObjectStorageBucketACLBodyAcl[keyof typeof UpdateObjectStorageBucketACLBodyAcl];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateObjectStorageBucketACLBodyAcl = {
  private: 'private',
  'public-read': 'public-read',
  'authenticated-read': 'authenticated-read',
  'public-read-write': 'public-read-write',
  custom: 'custom',
} as const;

export type UpdateObjectStorageBucketACLBody = {
  /** The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
 */
  acl: UpdateObjectStorageBucketACLBodyAcl;
  /** The `name` of the object for which to update its Access Control List (ACL). Use the [Object Storage Bucket Contents List](/docs/api/object-storage/#object-storage-bucket-contents-list) endpoint to access all object names in a bucket.
 */
  name: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ViewObjectStorageBucketACLDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ViewObjectStorageBucketACLDefault = {
  errors?: ViewObjectStorageBucketACLDefaultErrorsItem[];
};

/**
 * The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.

 */
export type ViewObjectStorageBucketACL200Acl = typeof ViewObjectStorageBucketACL200Acl[keyof typeof ViewObjectStorageBucketACL200Acl];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ViewObjectStorageBucketACL200Acl = {
  private: 'private',
  'public-read': 'public-read',
  'authenticated-read': 'authenticated-read',
  'public-read-write': 'public-read-write',
  custom: 'custom',
} as const;

export type ViewObjectStorageBucketACL200 = {
  /** The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
 */
  acl?: ViewObjectStorageBucketACL200Acl;
  /** The full XML of the object's ACL policy.
 */
  acl_xml?: string;
};

export type ViewObjectStorageBucketACLParams = {
/**
 * The `name` of the object for which to retrieve its Access Control List (ACL). Use the [Object Storage Bucket Contents List](/docs/api/object-storage/#object-storage-bucket-contents-list) endpoint to access all object names in a bucket.

 */
name: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateObjectStorageBucketAccessDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateObjectStorageBucketAccessDefault = {
  errors?: UpdateObjectStorageBucketAccessDefaultErrorsItem[];
};

export type UpdateObjectStorageBucketAccess200 = { [key: string]: any };

/**
 * The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.

 */
export type UpdateObjectStorageBucketAccessBodyAcl = typeof UpdateObjectStorageBucketAccessBodyAcl[keyof typeof UpdateObjectStorageBucketAccessBodyAcl];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateObjectStorageBucketAccessBodyAcl = {
  private: 'private',
  'public-read': 'public-read',
  'authenticated-read': 'authenticated-read',
  'public-read-write': 'public-read-write',
  custom: 'custom',
} as const;

export type UpdateObjectStorageBucketAccessBody = {
  /** The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
 */
  acl?: UpdateObjectStorageBucketAccessBodyAcl;
  /** If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.
 */
  cors_enabled?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ModifyObjectStorageBucketAccessDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ModifyObjectStorageBucketAccessDefault = {
  errors?: ModifyObjectStorageBucketAccessDefaultErrorsItem[];
};

export type ModifyObjectStorageBucketAccess200 = { [key: string]: any };

/**
 * The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.

 */
export type ModifyObjectStorageBucketAccessBodyAcl = typeof ModifyObjectStorageBucketAccessBodyAcl[keyof typeof ModifyObjectStorageBucketAccessBodyAcl];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModifyObjectStorageBucketAccessBodyAcl = {
  private: 'private',
  'public-read': 'public-read',
  'authenticated-read': 'authenticated-read',
  'public-read-write': 'public-read-write',
  custom: 'custom',
} as const;

export type ModifyObjectStorageBucketAccessBody = {
  /** The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
 */
  acl?: ModifyObjectStorageBucketAccessBodyAcl;
  /** If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.
 */
  cors_enabled?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageBucketinClusterDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageBucketinClusterDefault = {
  errors?: GetObjectStorageBucketinClusterDefaultErrorsItem[];
};

/**
 * An Object Storage Bucket. This should be accessed primarily through the S3 API; [click here for more information](https://docs.ceph.com/en/latest/radosgw/s3/#api).

 */
export type GetObjectStorageBucketinCluster200DataItem = {
  /** The ID of the Object Storage Cluster this bucket is in. */
  cluster?: string;
  /** When this bucket was created. */
  created?: string;
  /** The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made public.
 */
  hostname?: string;
  /** The name of this bucket. */
  label?: string;
  /** The number of objects stored in this bucket.
 */
  objects?: number;
  /** The size of the bucket in bytes. */
  size?: number;
};

export type GetObjectStorageBucketinCluster200 = {
  data?: GetObjectStorageBucketinCluster200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteObjectStorageBucketDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteObjectStorageBucketDefault = {
  errors?: DeleteObjectStorageBucketDefaultErrorsItem[];
};

export type DeleteObjectStorageBucket200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageBucketDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageBucketDefault = {
  errors?: GetObjectStorageBucketDefaultErrorsItem[];
};

/**
 * An Object Storage Bucket. This should be accessed primarily through the S3 API; [click here for more information](https://docs.ceph.com/en/latest/radosgw/s3/#api).

 */
export type GetObjectStorageBucket200 = {
  /** The ID of the Object Storage Cluster this bucket is in. */
  cluster?: string;
  /** When this bucket was created. */
  created?: string;
  /** The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made public.
 */
  hostname?: string;
  /** The name of this bucket. */
  label?: string;
  /** The number of objects stored in this bucket.
 */
  objects?: number;
  /** The size of the bucket in bytes. */
  size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateObjectStorageBucketDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateObjectStorageBucketDefault = {
  errors?: CreateObjectStorageBucketDefaultErrorsItem[];
};

/**
 * An Object Storage Bucket. This should be accessed primarily through the S3 API; [click here for more information](https://docs.ceph.com/en/latest/radosgw/s3/#api).

 */
export type CreateObjectStorageBucket200 = {
  /** The ID of the Object Storage Cluster this bucket is in. */
  cluster?: string;
  /** When this bucket was created. */
  created?: string;
  /** The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made public.
 */
  hostname?: string;
  /** The name of this bucket. */
  label?: string;
  /** The number of objects stored in this bucket.
 */
  objects?: number;
  /** The size of the bucket in bytes. */
  size?: number;
};

/**
 * The Access Control Level of the bucket using a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.

 */
export type CreateObjectStorageBucketBodyAcl = typeof CreateObjectStorageBucketBodyAcl[keyof typeof CreateObjectStorageBucketBodyAcl];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateObjectStorageBucketBodyAcl = {
  private: 'private',
  'public-read': 'public-read',
  'authenticated-read': 'authenticated-read',
  'public-read-write': 'public-read-write',
} as const;

export type CreateObjectStorageBucketBody = {
  /** The Access Control Level of the bucket using a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.
 */
  acl?: CreateObjectStorageBucketBodyAcl;
  /** The ID of the Object Storage Cluster where this bucket should be created.
 */
  cluster: string;
  /** If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.
 */
  cors_enabled?: boolean;
  /** The name for this bucket. Must be unique in the cluster you are creating the bucket in, or an error will be returned. Labels will be reserved only for the cluster that active buckets are created and stored in. If you want to reserve this bucket's label in another cluster, you must create a new bucket with the same label in the new cluster.
 */
  label: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetObjectStorageBucketsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetObjectStorageBucketsDefault = {
  errors?: GetObjectStorageBucketsDefaultErrorsItem[];
};

/**
 * An Object Storage Bucket. This should be accessed primarily through the S3 API; [click here for more information](https://docs.ceph.com/en/latest/radosgw/s3/#api).

 */
export type GetObjectStorageBuckets200DataItem = {
  /** The ID of the Object Storage Cluster this bucket is in. */
  cluster?: string;
  /** When this bucket was created. */
  created?: string;
  /** The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made public.
 */
  hostname?: string;
  /** The name of this bucket. */
  label?: string;
  /** The number of objects stored in this bucket.
 */
  objects?: number;
  /** The size of the bucket in bytes. */
  size?: number;
};

export type GetObjectStorageBuckets200 = {
  data?: GetObjectStorageBuckets200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetNodebalancersNodeBalancerIdStatsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetNodebalancersNodeBalancerIdStatsDefault = {
  errors?: GetNodebalancersNodeBalancerIdStatsDefaultErrorsItem[];
};

/**
 * Stats for this NodeBalancer.

 */
export type GetNodebalancersNodeBalancerIdStats200 = {
  /** The data returned about this NodeBalancers.
 */
  data?: GetNodebalancersNodeBalancerIdStats200Data;
  /** The title for the statistics generated in this response.
 */
  title?: string;
};

/**
 * Traffic statistics for this NodeBalancer.

 */
export type GetNodebalancersNodeBalancerIdStats200DataTraffic = {
  /** An array of key/value pairs representing unix timestamp and reading for inbound traffic.
 */
  in?: number[];
  /** An array of key/value pairs representing unix timestamp and reading for outbound traffic.
 */
  out?: number[];
};

/**
 * The data returned about this NodeBalancers.

 */
export type GetNodebalancersNodeBalancerIdStats200Data = {
  /** An array of key/value pairs representing unix timestamp and reading for connections to this NodeBalancer.
 */
  connections?: number[];
  /** Traffic statistics for this NodeBalancer.
 */
  traffic?: GetNodebalancersNodeBalancerIdStats200DataTraffic;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetNodeBalancerFirewallsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetNodeBalancerFirewallsDefault = {
  errors?: GetNodeBalancerFirewallsDefaultErrorsItem[];
};

export type GetNodeBalancerFirewalls200AllOfTwo = {
  data?: GetNodeBalancerFirewalls200AllOfTwoDataItem[];
};

export type GetNodeBalancerFirewalls200 = GetNodeBalancerFirewalls200AllOf & GetNodeBalancerFirewalls200AllOfTwo;

/**
 * The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemStatus = typeof GetNodeBalancerFirewalls200AllOfTwoDataItemStatus[keyof typeof GetNodeBalancerFirewalls200AllOfTwoDataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerFirewalls200AllOfTwoDataItemStatus = {
  enabled: 'enabled',
  disabled: 'disabled',
  deleted: 'deleted',
} as const;

/**
 * A resource that controls incoming and outgoing network traffic to a compute service. Only one enabled Firewall can be attached to a particular service at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a service. Currently, Firewalls can assigned to Linode compute instances and NodeBalancers.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItem = {
  /** When this Firewall was created.
 */
  readonly created?: string;
  /** The Firewall's unique ID.
 */
  readonly id?: number;
  /** The Firewall's label, for display purposes only.

Firewall labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
  * Must be between 3 and 32 characters.
  * Must be unique.
 */
  label?: string;
  /** The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
 */
  rules?: GetNodeBalancerFirewalls200AllOfTwoDataItemRules;
  /** The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
 */
  readonly status?: GetNodeBalancerFirewalls200AllOfTwoDataItemStatus;
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Firewall was last updated.
 */
  readonly updated?: string;
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundPolicy = typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundPolicy[keyof typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRules = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemProtocol = typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemProtocol[keyof typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemAction = typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemAction[keyof typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesOutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundPolicy = typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundPolicy[keyof typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemProtocol = typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemProtocol[keyof typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemAction = typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemAction[keyof typeof GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetNodeBalancerFirewalls200AllOfTwoDataItemRulesInboundItemProtocol;
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetNodeBalancerFirewalls200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteNodeBalancerConfigNodeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteNodeBalancerConfigNodeDefault = {
  errors?: DeleteNodeBalancerConfigNodeDefaultErrorsItem[];
};

export type DeleteNodeBalancerConfigNode200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateNodeBalancerNodeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateNodeBalancerNodeDefault = {
  errors?: UpdateNodeBalancerNodeDefaultErrorsItem[];
};

/**
 * The current status of this node, based on the configured checks of its NodeBalancer Config.

 */
export type UpdateNodeBalancerNode200Status = typeof UpdateNodeBalancerNode200Status[keyof typeof UpdateNodeBalancerNode200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerNode200Status = {
  unknown: 'unknown',
  UP: 'UP',
  DOWN: 'DOWN',
} as const;

/**
 * The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.

 */
export type UpdateNodeBalancerNode200Mode = typeof UpdateNodeBalancerNode200Mode[keyof typeof UpdateNodeBalancerNode200Mode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerNode200Mode = {
  accept: 'accept',
  reject: 'reject',
  drain: 'drain',
  backup: 'backup',
} as const;

/**
 * A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.

 */
export type UpdateNodeBalancerNode200 = {
  /** The private IP Address where this backend can be reached. This _must_ be a private IP address.
 */
  address?: string;
  /** The NodeBalancer Config ID that this Node belongs to.
 */
  readonly config_id?: number;
  /** This node's unique ID. */
  readonly id?: number;
  /** The label for this node.  This is for display purposes only.
 */
  label?: string;
  /** The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.
 */
  mode?: UpdateNodeBalancerNode200Mode;
  /** The NodeBalancer ID that this Node belongs to.
 */
  readonly nodebalancer_id?: number;
  /** The current status of this node, based on the configured checks of its NodeBalancer Config.
 */
  readonly status?: UpdateNodeBalancerNode200Status;
  /** Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
 */
  weight?: number;
};

/**
 * The current status of this node, based on the configured checks of its NodeBalancer Config.

 */
export type UpdateNodeBalancerNodeBodyStatus = typeof UpdateNodeBalancerNodeBodyStatus[keyof typeof UpdateNodeBalancerNodeBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerNodeBodyStatus = {
  unknown: 'unknown',
  UP: 'UP',
  DOWN: 'DOWN',
} as const;

/**
 * The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.

 */
export type UpdateNodeBalancerNodeBodyMode = typeof UpdateNodeBalancerNodeBodyMode[keyof typeof UpdateNodeBalancerNodeBodyMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerNodeBodyMode = {
  accept: 'accept',
  reject: 'reject',
  drain: 'drain',
  backup: 'backup',
} as const;

/**
 * A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.

 */
export type UpdateNodeBalancerNodeBody = {
  /** The private IP Address where this backend can be reached. This _must_ be a private IP address.
 */
  address?: string;
  /** The NodeBalancer Config ID that this Node belongs to.
 */
  readonly config_id?: number;
  /** This node's unique ID. */
  readonly id?: number;
  /** The label for this node.  This is for display purposes only.
 */
  label?: string;
  /** The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.
 */
  mode?: UpdateNodeBalancerNodeBodyMode;
  /** The NodeBalancer ID that this Node belongs to.
 */
  readonly nodebalancer_id?: number;
  /** The current status of this node, based on the configured checks of its NodeBalancer Config.
 */
  readonly status?: UpdateNodeBalancerNodeBodyStatus;
  /** Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
 */
  weight?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetNodeBalancerNodeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetNodeBalancerNodeDefault = {
  errors?: GetNodeBalancerNodeDefaultErrorsItem[];
};

/**
 * The current status of this node, based on the configured checks of its NodeBalancer Config.

 */
export type GetNodeBalancerNode200Status = typeof GetNodeBalancerNode200Status[keyof typeof GetNodeBalancerNode200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerNode200Status = {
  unknown: 'unknown',
  UP: 'UP',
  DOWN: 'DOWN',
} as const;

/**
 * The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.

 */
export type GetNodeBalancerNode200Mode = typeof GetNodeBalancerNode200Mode[keyof typeof GetNodeBalancerNode200Mode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerNode200Mode = {
  accept: 'accept',
  reject: 'reject',
  drain: 'drain',
  backup: 'backup',
} as const;

/**
 * A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.

 */
export type GetNodeBalancerNode200 = {
  /** The private IP Address where this backend can be reached. This _must_ be a private IP address.
 */
  address?: string;
  /** The NodeBalancer Config ID that this Node belongs to.
 */
  readonly config_id?: number;
  /** This node's unique ID. */
  readonly id?: number;
  /** The label for this node.  This is for display purposes only.
 */
  label?: string;
  /** The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.
 */
  mode?: GetNodeBalancerNode200Mode;
  /** The NodeBalancer ID that this Node belongs to.
 */
  readonly nodebalancer_id?: number;
  /** The current status of this node, based on the configured checks of its NodeBalancer Config.
 */
  readonly status?: GetNodeBalancerNode200Status;
  /** Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
 */
  weight?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateNodeBalancerNodeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateNodeBalancerNodeDefault = {
  errors?: CreateNodeBalancerNodeDefaultErrorsItem[];
};

/**
 * The current status of this node, based on the configured checks of its NodeBalancer Config.

 */
export type CreateNodeBalancerNode200Status = typeof CreateNodeBalancerNode200Status[keyof typeof CreateNodeBalancerNode200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerNode200Status = {
  unknown: 'unknown',
  UP: 'UP',
  DOWN: 'DOWN',
} as const;

/**
 * The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.

 */
export type CreateNodeBalancerNode200Mode = typeof CreateNodeBalancerNode200Mode[keyof typeof CreateNodeBalancerNode200Mode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerNode200Mode = {
  accept: 'accept',
  reject: 'reject',
  drain: 'drain',
  backup: 'backup',
} as const;

/**
 * A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.

 */
export type CreateNodeBalancerNode200 = {
  /** The private IP Address where this backend can be reached. This _must_ be a private IP address.
 */
  address?: string;
  /** The NodeBalancer Config ID that this Node belongs to.
 */
  readonly config_id?: number;
  /** This node's unique ID. */
  readonly id?: number;
  /** The label for this node.  This is for display purposes only.
 */
  label?: string;
  /** The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.
 */
  mode?: CreateNodeBalancerNode200Mode;
  /** The NodeBalancer ID that this Node belongs to.
 */
  readonly nodebalancer_id?: number;
  /** The current status of this node, based on the configured checks of its NodeBalancer Config.
 */
  readonly status?: CreateNodeBalancerNode200Status;
  /** Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
 */
  weight?: number;
};

/**
 * The current status of this node, based on the configured checks of its NodeBalancer Config.

 */
export type CreateNodeBalancerNodeBodyAllOfStatus = typeof CreateNodeBalancerNodeBodyAllOfStatus[keyof typeof CreateNodeBalancerNodeBodyAllOfStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerNodeBodyAllOfStatus = {
  unknown: 'unknown',
  UP: 'UP',
  DOWN: 'DOWN',
} as const;

/**
 * The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.

 */
export type CreateNodeBalancerNodeBodyAllOfMode = typeof CreateNodeBalancerNodeBodyAllOfMode[keyof typeof CreateNodeBalancerNodeBodyAllOfMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerNodeBodyAllOfMode = {
  accept: 'accept',
  reject: 'reject',
  drain: 'drain',
  backup: 'backup',
} as const;

/**
 * A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.

 */
export type CreateNodeBalancerNodeBodyAllOf = {
  /** The private IP Address where this backend can be reached. This _must_ be a private IP address.
 */
  address?: string;
  /** The NodeBalancer Config ID that this Node belongs to.
 */
  readonly config_id?: number;
  /** This node's unique ID. */
  readonly id?: number;
  /** The label for this node.  This is for display purposes only.
 */
  label?: string;
  /** The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.
 */
  mode?: CreateNodeBalancerNodeBodyAllOfMode;
  /** The NodeBalancer ID that this Node belongs to.
 */
  readonly nodebalancer_id?: number;
  /** The current status of this node, based on the configured checks of its NodeBalancer Config.
 */
  readonly status?: CreateNodeBalancerNodeBodyAllOfStatus;
  /** Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
 */
  weight?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetNodeBalancerConfigNodesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetNodeBalancerConfigNodesDefault = {
  errors?: GetNodeBalancerConfigNodesDefaultErrorsItem[];
};

/**
 * The current status of this node, based on the configured checks of its NodeBalancer Config.

 */
export type GetNodeBalancerConfigNodes200DataItemStatus = typeof GetNodeBalancerConfigNodes200DataItemStatus[keyof typeof GetNodeBalancerConfigNodes200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfigNodes200DataItemStatus = {
  unknown: 'unknown',
  UP: 'UP',
  DOWN: 'DOWN',
} as const;

/**
 * The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.

 */
export type GetNodeBalancerConfigNodes200DataItemMode = typeof GetNodeBalancerConfigNodes200DataItemMode[keyof typeof GetNodeBalancerConfigNodes200DataItemMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfigNodes200DataItemMode = {
  accept: 'accept',
  reject: 'reject',
  drain: 'drain',
  backup: 'backup',
} as const;

/**
 * A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.

 */
export type GetNodeBalancerConfigNodes200DataItem = {
  /** The private IP Address where this backend can be reached. This _must_ be a private IP address.
 */
  address?: string;
  /** The NodeBalancer Config ID that this Node belongs to.
 */
  readonly config_id?: number;
  /** This node's unique ID. */
  readonly id?: number;
  /** The label for this node.  This is for display purposes only.
 */
  label?: string;
  /** The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.
 */
  mode?: GetNodeBalancerConfigNodes200DataItemMode;
  /** The NodeBalancer ID that this Node belongs to.
 */
  readonly nodebalancer_id?: number;
  /** The current status of this node, based on the configured checks of its NodeBalancer Config.
 */
  readonly status?: GetNodeBalancerConfigNodes200DataItemStatus;
  /** Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
 */
  weight?: number;
};

export type GetNodeBalancerConfigNodes200 = {
  data?: GetNodeBalancerConfigNodes200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetNodeBalancerConfigNodesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type RebuildNodeBalancerConfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type RebuildNodeBalancerConfigDefault = {
  errors?: RebuildNodeBalancerConfigDefaultErrorsItem[];
};

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type RebuildNodeBalancerConfig200Stickiness = typeof RebuildNodeBalancerConfig200Stickiness[keyof typeof RebuildNodeBalancerConfig200Stickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfig200Stickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type RebuildNodeBalancerConfig200ProxyProtocol = typeof RebuildNodeBalancerConfig200ProxyProtocol[keyof typeof RebuildNodeBalancerConfig200ProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfig200ProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type RebuildNodeBalancerConfig200Protocol = typeof RebuildNodeBalancerConfig200Protocol[keyof typeof RebuildNodeBalancerConfig200Protocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfig200Protocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.

 */
export type RebuildNodeBalancerConfig200NodesStatus = {
  /** The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
 */
  readonly down?: number;
  /** The number of backends considered to be "UP" and healthy, and that are serving requests.
 */
  readonly up?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type RebuildNodeBalancerConfig200CipherSuite = typeof RebuildNodeBalancerConfig200CipherSuite[keyof typeof RebuildNodeBalancerConfig200CipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfig200CipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type RebuildNodeBalancerConfig200Check = typeof RebuildNodeBalancerConfig200Check[keyof typeof RebuildNodeBalancerConfig200Check];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfig200Check = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type RebuildNodeBalancerConfig200Algorithm = typeof RebuildNodeBalancerConfig200Algorithm[keyof typeof RebuildNodeBalancerConfig200Algorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfig200Algorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.

 */
export type RebuildNodeBalancerConfig200 = {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: RebuildNodeBalancerConfig200Algorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: RebuildNodeBalancerConfig200Check;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: RebuildNodeBalancerConfig200CipherSuite;
  /** This config's unique ID */
  readonly id?: number;
  /** The ID for the NodeBalancer this config belongs to.
 */
  readonly nodebalancer_id?: number;
  /** A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
 */
  readonly nodes_status?: RebuildNodeBalancerConfig200NodesStatus;
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: RebuildNodeBalancerConfig200Protocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: RebuildNodeBalancerConfig200ProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_commonname?: string;
  /** The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_fingerprint?: string;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: RebuildNodeBalancerConfig200Stickiness;
};

export type RebuildNodeBalancerConfigBody = RebuildNodeBalancerConfigBodyAllOf & RebuildNodeBalancerConfigBodyAllOfNine;

/**
 * The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.

 */
export type RebuildNodeBalancerConfigBodyAllOfNineNodesItemMode = typeof RebuildNodeBalancerConfigBodyAllOfNineNodesItemMode[keyof typeof RebuildNodeBalancerConfigBodyAllOfNineNodesItemMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfigBodyAllOfNineNodesItemMode = {
  accept: 'accept',
  reject: 'reject',
  drain: 'drain',
  backup: 'backup',
} as const;

/**
 * NodeBalancer Node request object including ID.
 */
export type RebuildNodeBalancerConfigBodyAllOfNineNodesItem = {
  /** The private IP Address where this backend can be reached. This _must_ be a private IP address.
 */
  address?: string;
  /** The unique ID of the Node to update. */
  id?: number;
  /** The label for this node.  This is for display purposes only.
 */
  label?: string;
  /** The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.
 */
  mode?: RebuildNodeBalancerConfigBodyAllOfNineNodesItemMode;
  /** Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
 */
  weight?: number;
};

export type RebuildNodeBalancerConfigBodyAllOfNine = {
  /** The NodeBalancer Node(s) that serve this Config.

Some considerations for Nodes when rebuilding a config:
  * Current Nodes excluded from the request body will be deleted from the Config.
  * Current Nodes (identified by their Node ID) will be updated.
  * New Nodes (included without a Node ID) will be created.
 */
  nodes: RebuildNodeBalancerConfigBodyAllOfNineNodesItem[];
};

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type RebuildNodeBalancerConfigBodyAllOfStickiness = typeof RebuildNodeBalancerConfigBodyAllOfStickiness[keyof typeof RebuildNodeBalancerConfigBodyAllOfStickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfigBodyAllOfStickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type RebuildNodeBalancerConfigBodyAllOfProxyProtocol = typeof RebuildNodeBalancerConfigBodyAllOfProxyProtocol[keyof typeof RebuildNodeBalancerConfigBodyAllOfProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfigBodyAllOfProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type RebuildNodeBalancerConfigBodyAllOfProtocol = typeof RebuildNodeBalancerConfigBodyAllOfProtocol[keyof typeof RebuildNodeBalancerConfigBodyAllOfProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfigBodyAllOfProtocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.

 */
export type RebuildNodeBalancerConfigBodyAllOfNodesStatus = {
  /** The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
 */
  readonly down?: number;
  /** The number of backends considered to be "UP" and healthy, and that are serving requests.
 */
  readonly up?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type RebuildNodeBalancerConfigBodyAllOfCipherSuite = typeof RebuildNodeBalancerConfigBodyAllOfCipherSuite[keyof typeof RebuildNodeBalancerConfigBodyAllOfCipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfigBodyAllOfCipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type RebuildNodeBalancerConfigBodyAllOfCheck = typeof RebuildNodeBalancerConfigBodyAllOfCheck[keyof typeof RebuildNodeBalancerConfigBodyAllOfCheck];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfigBodyAllOfCheck = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type RebuildNodeBalancerConfigBodyAllOfAlgorithm = typeof RebuildNodeBalancerConfigBodyAllOfAlgorithm[keyof typeof RebuildNodeBalancerConfigBodyAllOfAlgorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildNodeBalancerConfigBodyAllOfAlgorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.

 */
export type RebuildNodeBalancerConfigBodyAllOf = {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: RebuildNodeBalancerConfigBodyAllOfAlgorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: RebuildNodeBalancerConfigBodyAllOfCheck;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: RebuildNodeBalancerConfigBodyAllOfCipherSuite;
  /** This config's unique ID */
  readonly id?: number;
  /** The ID for the NodeBalancer this config belongs to.
 */
  readonly nodebalancer_id?: number;
  /** A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
 */
  readonly nodes_status?: RebuildNodeBalancerConfigBodyAllOfNodesStatus;
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: RebuildNodeBalancerConfigBodyAllOfProtocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: RebuildNodeBalancerConfigBodyAllOfProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_commonname?: string;
  /** The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_fingerprint?: string;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: RebuildNodeBalancerConfigBodyAllOfStickiness;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteNodeBalancerConfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteNodeBalancerConfigDefault = {
  errors?: DeleteNodeBalancerConfigDefaultErrorsItem[];
};

export type DeleteNodeBalancerConfig200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateNodeBalancerConfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateNodeBalancerConfigDefault = {
  errors?: UpdateNodeBalancerConfigDefaultErrorsItem[];
};

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type UpdateNodeBalancerConfig200Stickiness = typeof UpdateNodeBalancerConfig200Stickiness[keyof typeof UpdateNodeBalancerConfig200Stickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfig200Stickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type UpdateNodeBalancerConfig200ProxyProtocol = typeof UpdateNodeBalancerConfig200ProxyProtocol[keyof typeof UpdateNodeBalancerConfig200ProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfig200ProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type UpdateNodeBalancerConfig200Protocol = typeof UpdateNodeBalancerConfig200Protocol[keyof typeof UpdateNodeBalancerConfig200Protocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfig200Protocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.

 */
export type UpdateNodeBalancerConfig200NodesStatus = {
  /** The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
 */
  readonly down?: number;
  /** The number of backends considered to be "UP" and healthy, and that are serving requests.
 */
  readonly up?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type UpdateNodeBalancerConfig200CipherSuite = typeof UpdateNodeBalancerConfig200CipherSuite[keyof typeof UpdateNodeBalancerConfig200CipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfig200CipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type UpdateNodeBalancerConfig200Check = typeof UpdateNodeBalancerConfig200Check[keyof typeof UpdateNodeBalancerConfig200Check];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfig200Check = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type UpdateNodeBalancerConfig200Algorithm = typeof UpdateNodeBalancerConfig200Algorithm[keyof typeof UpdateNodeBalancerConfig200Algorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfig200Algorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.

 */
export type UpdateNodeBalancerConfig200 = {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: UpdateNodeBalancerConfig200Algorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: UpdateNodeBalancerConfig200Check;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: UpdateNodeBalancerConfig200CipherSuite;
  /** This config's unique ID */
  readonly id?: number;
  /** The ID for the NodeBalancer this config belongs to.
 */
  readonly nodebalancer_id?: number;
  /** A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
 */
  readonly nodes_status?: UpdateNodeBalancerConfig200NodesStatus;
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: UpdateNodeBalancerConfig200Protocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: UpdateNodeBalancerConfig200ProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_commonname?: string;
  /** The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_fingerprint?: string;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: UpdateNodeBalancerConfig200Stickiness;
};

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type UpdateNodeBalancerConfigBodyStickiness = typeof UpdateNodeBalancerConfigBodyStickiness[keyof typeof UpdateNodeBalancerConfigBodyStickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfigBodyStickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type UpdateNodeBalancerConfigBodyProxyProtocol = typeof UpdateNodeBalancerConfigBodyProxyProtocol[keyof typeof UpdateNodeBalancerConfigBodyProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfigBodyProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type UpdateNodeBalancerConfigBodyProtocol = typeof UpdateNodeBalancerConfigBodyProtocol[keyof typeof UpdateNodeBalancerConfigBodyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfigBodyProtocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.

 */
export type UpdateNodeBalancerConfigBodyNodesStatus = {
  /** The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
 */
  readonly down?: number;
  /** The number of backends considered to be "UP" and healthy, and that are serving requests.
 */
  readonly up?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type UpdateNodeBalancerConfigBodyCipherSuite = typeof UpdateNodeBalancerConfigBodyCipherSuite[keyof typeof UpdateNodeBalancerConfigBodyCipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfigBodyCipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type UpdateNodeBalancerConfigBodyCheck = typeof UpdateNodeBalancerConfigBodyCheck[keyof typeof UpdateNodeBalancerConfigBodyCheck];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfigBodyCheck = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type UpdateNodeBalancerConfigBodyAlgorithm = typeof UpdateNodeBalancerConfigBodyAlgorithm[keyof typeof UpdateNodeBalancerConfigBodyAlgorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateNodeBalancerConfigBodyAlgorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.

 */
export type UpdateNodeBalancerConfigBody = {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: UpdateNodeBalancerConfigBodyAlgorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: UpdateNodeBalancerConfigBodyCheck;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: UpdateNodeBalancerConfigBodyCipherSuite;
  /** This config's unique ID */
  readonly id?: number;
  /** The ID for the NodeBalancer this config belongs to.
 */
  readonly nodebalancer_id?: number;
  /** A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
 */
  readonly nodes_status?: UpdateNodeBalancerConfigBodyNodesStatus;
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: UpdateNodeBalancerConfigBodyProtocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: UpdateNodeBalancerConfigBodyProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_commonname?: string;
  /** The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_fingerprint?: string;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: UpdateNodeBalancerConfigBodyStickiness;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetNodeBalancerConfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetNodeBalancerConfigDefault = {
  errors?: GetNodeBalancerConfigDefaultErrorsItem[];
};

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type GetNodeBalancerConfig200Stickiness = typeof GetNodeBalancerConfig200Stickiness[keyof typeof GetNodeBalancerConfig200Stickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfig200Stickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type GetNodeBalancerConfig200ProxyProtocol = typeof GetNodeBalancerConfig200ProxyProtocol[keyof typeof GetNodeBalancerConfig200ProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfig200ProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type GetNodeBalancerConfig200Protocol = typeof GetNodeBalancerConfig200Protocol[keyof typeof GetNodeBalancerConfig200Protocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfig200Protocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.

 */
export type GetNodeBalancerConfig200NodesStatus = {
  /** The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
 */
  readonly down?: number;
  /** The number of backends considered to be "UP" and healthy, and that are serving requests.
 */
  readonly up?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type GetNodeBalancerConfig200CipherSuite = typeof GetNodeBalancerConfig200CipherSuite[keyof typeof GetNodeBalancerConfig200CipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfig200CipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type GetNodeBalancerConfig200Check = typeof GetNodeBalancerConfig200Check[keyof typeof GetNodeBalancerConfig200Check];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfig200Check = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type GetNodeBalancerConfig200Algorithm = typeof GetNodeBalancerConfig200Algorithm[keyof typeof GetNodeBalancerConfig200Algorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfig200Algorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.

 */
export type GetNodeBalancerConfig200 = {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: GetNodeBalancerConfig200Algorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: GetNodeBalancerConfig200Check;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: GetNodeBalancerConfig200CipherSuite;
  /** This config's unique ID */
  readonly id?: number;
  /** The ID for the NodeBalancer this config belongs to.
 */
  readonly nodebalancer_id?: number;
  /** A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
 */
  readonly nodes_status?: GetNodeBalancerConfig200NodesStatus;
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: GetNodeBalancerConfig200Protocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: GetNodeBalancerConfig200ProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_commonname?: string;
  /** The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_fingerprint?: string;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: GetNodeBalancerConfig200Stickiness;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateNodeBalancerConfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateNodeBalancerConfigDefault = {
  errors?: CreateNodeBalancerConfigDefaultErrorsItem[];
};

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type CreateNodeBalancerConfig200Stickiness = typeof CreateNodeBalancerConfig200Stickiness[keyof typeof CreateNodeBalancerConfig200Stickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfig200Stickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type CreateNodeBalancerConfig200ProxyProtocol = typeof CreateNodeBalancerConfig200ProxyProtocol[keyof typeof CreateNodeBalancerConfig200ProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfig200ProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type CreateNodeBalancerConfig200Protocol = typeof CreateNodeBalancerConfig200Protocol[keyof typeof CreateNodeBalancerConfig200Protocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfig200Protocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.

 */
export type CreateNodeBalancerConfig200NodesStatus = {
  /** The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
 */
  readonly down?: number;
  /** The number of backends considered to be "UP" and healthy, and that are serving requests.
 */
  readonly up?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type CreateNodeBalancerConfig200CipherSuite = typeof CreateNodeBalancerConfig200CipherSuite[keyof typeof CreateNodeBalancerConfig200CipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfig200CipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type CreateNodeBalancerConfig200Check = typeof CreateNodeBalancerConfig200Check[keyof typeof CreateNodeBalancerConfig200Check];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfig200Check = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type CreateNodeBalancerConfig200Algorithm = typeof CreateNodeBalancerConfig200Algorithm[keyof typeof CreateNodeBalancerConfig200Algorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfig200Algorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.

 */
export type CreateNodeBalancerConfig200 = {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: CreateNodeBalancerConfig200Algorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: CreateNodeBalancerConfig200Check;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: CreateNodeBalancerConfig200CipherSuite;
  /** This config's unique ID */
  readonly id?: number;
  /** The ID for the NodeBalancer this config belongs to.
 */
  readonly nodebalancer_id?: number;
  /** A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
 */
  readonly nodes_status?: CreateNodeBalancerConfig200NodesStatus;
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: CreateNodeBalancerConfig200Protocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: CreateNodeBalancerConfig200ProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_commonname?: string;
  /** The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_fingerprint?: string;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: CreateNodeBalancerConfig200Stickiness;
};

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type CreateNodeBalancerConfigBodyStickiness = typeof CreateNodeBalancerConfigBodyStickiness[keyof typeof CreateNodeBalancerConfigBodyStickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfigBodyStickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type CreateNodeBalancerConfigBodyProxyProtocol = typeof CreateNodeBalancerConfigBodyProxyProtocol[keyof typeof CreateNodeBalancerConfigBodyProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfigBodyProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type CreateNodeBalancerConfigBodyProtocol = typeof CreateNodeBalancerConfigBodyProtocol[keyof typeof CreateNodeBalancerConfigBodyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfigBodyProtocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.

 */
export type CreateNodeBalancerConfigBodyNodesStatus = {
  /** The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
 */
  readonly down?: number;
  /** The number of backends considered to be "UP" and healthy, and that are serving requests.
 */
  readonly up?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type CreateNodeBalancerConfigBodyCipherSuite = typeof CreateNodeBalancerConfigBodyCipherSuite[keyof typeof CreateNodeBalancerConfigBodyCipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfigBodyCipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type CreateNodeBalancerConfigBodyCheck = typeof CreateNodeBalancerConfigBodyCheck[keyof typeof CreateNodeBalancerConfigBodyCheck];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfigBodyCheck = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type CreateNodeBalancerConfigBodyAlgorithm = typeof CreateNodeBalancerConfigBodyAlgorithm[keyof typeof CreateNodeBalancerConfigBodyAlgorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerConfigBodyAlgorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.

 */
export type CreateNodeBalancerConfigBody = {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: CreateNodeBalancerConfigBodyAlgorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: CreateNodeBalancerConfigBodyCheck;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: CreateNodeBalancerConfigBodyCipherSuite;
  /** This config's unique ID */
  readonly id?: number;
  /** The ID for the NodeBalancer this config belongs to.
 */
  readonly nodebalancer_id?: number;
  /** A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
 */
  readonly nodes_status?: CreateNodeBalancerConfigBodyNodesStatus;
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: CreateNodeBalancerConfigBodyProtocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: CreateNodeBalancerConfigBodyProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_commonname?: string;
  /** The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_fingerprint?: string;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: CreateNodeBalancerConfigBodyStickiness;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetNodeBalancerConfigsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetNodeBalancerConfigsDefault = {
  errors?: GetNodeBalancerConfigsDefaultErrorsItem[];
};

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type GetNodeBalancerConfigs200DataItemStickiness = typeof GetNodeBalancerConfigs200DataItemStickiness[keyof typeof GetNodeBalancerConfigs200DataItemStickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfigs200DataItemStickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type GetNodeBalancerConfigs200DataItemProxyProtocol = typeof GetNodeBalancerConfigs200DataItemProxyProtocol[keyof typeof GetNodeBalancerConfigs200DataItemProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfigs200DataItemProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type GetNodeBalancerConfigs200DataItemProtocol = typeof GetNodeBalancerConfigs200DataItemProtocol[keyof typeof GetNodeBalancerConfigs200DataItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfigs200DataItemProtocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.

 */
export type GetNodeBalancerConfigs200DataItemNodesStatus = {
  /** The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
 */
  readonly down?: number;
  /** The number of backends considered to be "UP" and healthy, and that are serving requests.
 */
  readonly up?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type GetNodeBalancerConfigs200DataItemCipherSuite = typeof GetNodeBalancerConfigs200DataItemCipherSuite[keyof typeof GetNodeBalancerConfigs200DataItemCipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfigs200DataItemCipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type GetNodeBalancerConfigs200DataItemCheck = typeof GetNodeBalancerConfigs200DataItemCheck[keyof typeof GetNodeBalancerConfigs200DataItemCheck];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfigs200DataItemCheck = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type GetNodeBalancerConfigs200DataItemAlgorithm = typeof GetNodeBalancerConfigs200DataItemAlgorithm[keyof typeof GetNodeBalancerConfigs200DataItemAlgorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNodeBalancerConfigs200DataItemAlgorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.

 */
export type GetNodeBalancerConfigs200DataItem = {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: GetNodeBalancerConfigs200DataItemAlgorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: GetNodeBalancerConfigs200DataItemCheck;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: GetNodeBalancerConfigs200DataItemCipherSuite;
  /** This config's unique ID */
  readonly id?: number;
  /** The ID for the NodeBalancer this config belongs to.
 */
  readonly nodebalancer_id?: number;
  /** A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
 */
  readonly nodes_status?: GetNodeBalancerConfigs200DataItemNodesStatus;
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: GetNodeBalancerConfigs200DataItemProtocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: GetNodeBalancerConfigs200DataItemProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_commonname?: string;
  /** The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_fingerprint?: string;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: GetNodeBalancerConfigs200DataItemStickiness;
};

export type GetNodeBalancerConfigs200 = {
  data?: GetNodeBalancerConfigs200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetNodeBalancerConfigsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteNodeBalancerDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteNodeBalancerDefault = {
  errors?: DeleteNodeBalancerDefaultErrorsItem[];
};

export type DeleteNodeBalancer200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateNodeBalancerDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateNodeBalancerDefault = {
  errors?: UpdateNodeBalancerDefaultErrorsItem[];
};

/**
 * Information about the amount of transfer this NodeBalancer has had so far this month.

 */
export type UpdateNodeBalancer200Transfer = {
  /** The total outbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly in?: number | null;
  /** The total inbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly out?: number | null;
  /** The total transfer, in MB, used by this NodeBalancer this month.
 */
  readonly total?: number | null;
};

/**
 * Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.

 */
export type UpdateNodeBalancer200 = {
  /** Throttle connections per second.  Set to 0 (zero) to disable throttling.
 */
  client_conn_throttle?: number;
  /** When this NodeBalancer was created.
 */
  readonly created?: string;
  /** This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
 */
  readonly hostname?: string;
  /** This NodeBalancer's unique ID.
 */
  readonly id?: number;
  /** This NodeBalancer's public IPv4 address.
 */
  readonly ipv4?: string;
  /** This NodeBalancer's public IPv6 address.
 */
  readonly ipv6?: string | null;
  /** This NodeBalancer's label. These must be unique on your Account.
 */
  label?: string;
  /** The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
 */
  readonly region?: string;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** Information about the amount of transfer this NodeBalancer has had so far this month.
 */
  readonly transfer?: UpdateNodeBalancer200Transfer;
  /** When this NodeBalancer was last updated.
 */
  readonly updated?: string;
};

/**
 * Information about the amount of transfer this NodeBalancer has had so far this month.

 */
export type UpdateNodeBalancerBodyTransfer = {
  /** The total outbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly in?: number | null;
  /** The total inbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly out?: number | null;
  /** The total transfer, in MB, used by this NodeBalancer this month.
 */
  readonly total?: number | null;
};

/**
 * Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.

 */
export type UpdateNodeBalancerBody = {
  /** Throttle connections per second.  Set to 0 (zero) to disable throttling.
 */
  client_conn_throttle?: number;
  /** When this NodeBalancer was created.
 */
  readonly created?: string;
  /** This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
 */
  readonly hostname?: string;
  /** This NodeBalancer's unique ID.
 */
  readonly id?: number;
  /** This NodeBalancer's public IPv4 address.
 */
  readonly ipv4?: string;
  /** This NodeBalancer's public IPv6 address.
 */
  readonly ipv6?: string | null;
  /** This NodeBalancer's label. These must be unique on your Account.
 */
  label?: string;
  /** The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
 */
  readonly region?: string;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** Information about the amount of transfer this NodeBalancer has had so far this month.
 */
  readonly transfer?: UpdateNodeBalancerBodyTransfer;
  /** When this NodeBalancer was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetNodeBalancerDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetNodeBalancerDefault = {
  errors?: GetNodeBalancerDefaultErrorsItem[];
};

/**
 * Information about the amount of transfer this NodeBalancer has had so far this month.

 */
export type GetNodeBalancer200Transfer = {
  /** The total outbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly in?: number | null;
  /** The total inbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly out?: number | null;
  /** The total transfer, in MB, used by this NodeBalancer this month.
 */
  readonly total?: number | null;
};

/**
 * Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.

 */
export type GetNodeBalancer200 = {
  /** Throttle connections per second.  Set to 0 (zero) to disable throttling.
 */
  client_conn_throttle?: number;
  /** When this NodeBalancer was created.
 */
  readonly created?: string;
  /** This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
 */
  readonly hostname?: string;
  /** This NodeBalancer's unique ID.
 */
  readonly id?: number;
  /** This NodeBalancer's public IPv4 address.
 */
  readonly ipv4?: string;
  /** This NodeBalancer's public IPv6 address.
 */
  readonly ipv6?: string | null;
  /** This NodeBalancer's label. These must be unique on your Account.
 */
  label?: string;
  /** The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
 */
  readonly region?: string;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** Information about the amount of transfer this NodeBalancer has had so far this month.
 */
  readonly transfer?: GetNodeBalancer200Transfer;
  /** When this NodeBalancer was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateNodeBalancerDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateNodeBalancerDefault = {
  errors?: CreateNodeBalancerDefaultErrorsItem[];
};

/**
 * Information about the amount of transfer this NodeBalancer has had so far this month.

 */
export type CreateNodeBalancer200Transfer = {
  /** The total outbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly in?: number | null;
  /** The total inbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly out?: number | null;
  /** The total transfer, in MB, used by this NodeBalancer this month.
 */
  readonly total?: number | null;
};

/**
 * Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.

 */
export type CreateNodeBalancer200 = {
  /** Throttle connections per second.  Set to 0 (zero) to disable throttling.
 */
  client_conn_throttle?: number;
  /** When this NodeBalancer was created.
 */
  readonly created?: string;
  /** This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
 */
  readonly hostname?: string;
  /** This NodeBalancer's unique ID.
 */
  readonly id?: number;
  /** This NodeBalancer's public IPv4 address.
 */
  readonly ipv4?: string;
  /** This NodeBalancer's public IPv6 address.
 */
  readonly ipv6?: string | null;
  /** This NodeBalancer's label. These must be unique on your Account.
 */
  label?: string;
  /** The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
 */
  readonly region?: string;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** Information about the amount of transfer this NodeBalancer has had so far this month.
 */
  readonly transfer?: CreateNodeBalancer200Transfer;
  /** When this NodeBalancer was last updated.
 */
  readonly updated?: string;
};

export type CreateNodeBalancerBody = {
  /** Throttle connections per second.  Set to 0 (zero) to disable throttling.
 */
  client_conn_throttle?: number;
  /** The port Config(s) to create for this NodeBalancer.

Each Config must have a unique port and at least one Node.
 */
  configs?: CreateNodeBalancerBodyConfigsItem[];
  /** The ID of the Firewall to assign to the NodeBalancer.

* Only one NodeBalancer can be assigned to a Firewall at a time.
* Firewalls only apply to inbound TCP traffic to NodeBalancers.
 */
  firewall_id?: number;
  /** This NodeBalancer's label. These must be unique on your Account.
 */
  label?: string;
  /** The ID of the Region to create this NodeBalancer in.
 */
  region: string;
  /** An array of Tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
};

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type CreateNodeBalancerBodyConfigsItemStickiness = typeof CreateNodeBalancerBodyConfigsItemStickiness[keyof typeof CreateNodeBalancerBodyConfigsItemStickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerBodyConfigsItemStickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type CreateNodeBalancerBodyConfigsItemProxyProtocol = typeof CreateNodeBalancerBodyConfigsItemProxyProtocol[keyof typeof CreateNodeBalancerBodyConfigsItemProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerBodyConfigsItemProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type CreateNodeBalancerBodyConfigsItemProtocol = typeof CreateNodeBalancerBodyConfigsItemProtocol[keyof typeof CreateNodeBalancerBodyConfigsItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerBodyConfigsItemProtocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A request object representing a NodeBalancer Config, including Nodes.
 */
export type CreateNodeBalancerBodyConfigsItem = {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: CreateNodeBalancerBodyConfigsItemAlgorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: CreateNodeBalancerBodyConfigsItemCheck;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: CreateNodeBalancerBodyConfigsItemCipherSuite;
  /** The NodeBalancer Node(s) that serve this Config.
 */
  nodes?: CreateNodeBalancerBodyConfigsItemNodesItem[];
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: CreateNodeBalancerBodyConfigsItemProtocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: CreateNodeBalancerBodyConfigsItemProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: CreateNodeBalancerBodyConfigsItemStickiness;
};

/**
 * The current status of this node, based on the configured checks of its NodeBalancer Config.

 */
export type CreateNodeBalancerBodyConfigsItemNodesItemStatus = typeof CreateNodeBalancerBodyConfigsItemNodesItemStatus[keyof typeof CreateNodeBalancerBodyConfigsItemNodesItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerBodyConfigsItemNodesItemStatus = {
  unknown: 'unknown',
  UP: 'UP',
  DOWN: 'DOWN',
} as const;

/**
 * The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.

 */
export type CreateNodeBalancerBodyConfigsItemNodesItemMode = typeof CreateNodeBalancerBodyConfigsItemNodesItemMode[keyof typeof CreateNodeBalancerBodyConfigsItemNodesItemMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerBodyConfigsItemNodesItemMode = {
  accept: 'accept',
  reject: 'reject',
  drain: 'drain',
  backup: 'backup',
} as const;

/**
 * A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.

 */
export type CreateNodeBalancerBodyConfigsItemNodesItem = {
  /** The private IP Address where this backend can be reached. This _must_ be a private IP address.
 */
  address?: string;
  /** The NodeBalancer Config ID that this Node belongs to.
 */
  readonly config_id?: number;
  /** This node's unique ID. */
  readonly id?: number;
  /** The label for this node.  This is for display purposes only.
 */
  label?: string;
  /** The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.
 */
  mode?: CreateNodeBalancerBodyConfigsItemNodesItemMode;
  /** The NodeBalancer ID that this Node belongs to.
 */
  readonly nodebalancer_id?: number;
  /** The current status of this node, based on the configured checks of its NodeBalancer Config.
 */
  readonly status?: CreateNodeBalancerBodyConfigsItemNodesItemStatus;
  /** Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
 */
  weight?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type CreateNodeBalancerBodyConfigsItemCipherSuite = typeof CreateNodeBalancerBodyConfigsItemCipherSuite[keyof typeof CreateNodeBalancerBodyConfigsItemCipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerBodyConfigsItemCipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type CreateNodeBalancerBodyConfigsItemCheck = typeof CreateNodeBalancerBodyConfigsItemCheck[keyof typeof CreateNodeBalancerBodyConfigsItemCheck];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerBodyConfigsItemCheck = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type CreateNodeBalancerBodyConfigsItemAlgorithm = typeof CreateNodeBalancerBodyConfigsItemAlgorithm[keyof typeof CreateNodeBalancerBodyConfigsItemAlgorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateNodeBalancerBodyConfigsItemAlgorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetNodeBalancersDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetNodeBalancersDefault = {
  errors?: GetNodeBalancersDefaultErrorsItem[];
};

/**
 * Information about the amount of transfer this NodeBalancer has had so far this month.

 */
export type GetNodeBalancers200DataItemTransfer = {
  /** The total outbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly in?: number | null;
  /** The total inbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly out?: number | null;
  /** The total transfer, in MB, used by this NodeBalancer this month.
 */
  readonly total?: number | null;
};

/**
 * Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.

 */
export type GetNodeBalancers200DataItem = {
  /** Throttle connections per second.  Set to 0 (zero) to disable throttling.
 */
  client_conn_throttle?: number;
  /** When this NodeBalancer was created.
 */
  readonly created?: string;
  /** This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
 */
  readonly hostname?: string;
  /** This NodeBalancer's unique ID.
 */
  readonly id?: number;
  /** This NodeBalancer's public IPv4 address.
 */
  readonly ipv4?: string;
  /** This NodeBalancer's public IPv6 address.
 */
  readonly ipv6?: string | null;
  /** This NodeBalancer's label. These must be unique on your Account.
 */
  label?: string;
  /** The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
 */
  readonly region?: string;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** Information about the amount of transfer this NodeBalancer has had so far this month.
 */
  readonly transfer?: GetNodeBalancers200DataItemTransfer;
  /** When this NodeBalancer was last updated.
 */
  readonly updated?: string;
};

export type GetNodeBalancers200 = {
  data?: GetNodeBalancers200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetNodeBalancersParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetVLANsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetVLANsDefault = {
  errors?: GetVLANsDefaultErrorsItem[];
};

/**
 * A virtual local area network (VLAN) associated with your Account.

 */
export type GetVLANs200DataItem = {
  /** The date this VLAN was created.
 */
  readonly created?: string;
  /** The name of this VLAN. */
  readonly label?: string;
  /** An array of Linode IDs attached to this VLAN.
 */
  readonly linodes?: number[];
  /** This VLAN's data center region.

**Note:** Currently, a VLAN can only be assigned to a Linode
within the same data center region.
 */
  readonly region?: string;
};

export type GetVLANs200 = {
  data?: GetVLANs200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetVLANsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateFirewallRulesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateFirewallRulesDefault = {
  errors?: UpdateFirewallRulesDefaultErrorsItem[];
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type UpdateFirewallRules200OutboundPolicy = typeof UpdateFirewallRules200OutboundPolicy[keyof typeof UpdateFirewallRules200OutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRules200OutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type UpdateFirewallRules200 = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: UpdateFirewallRules200InboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: UpdateFirewallRules200InboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: UpdateFirewallRules200OutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: UpdateFirewallRules200OutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type UpdateFirewallRules200OutboundItemProtocol = typeof UpdateFirewallRules200OutboundItemProtocol[keyof typeof UpdateFirewallRules200OutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRules200OutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type UpdateFirewallRules200OutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type UpdateFirewallRules200OutboundItemAction = typeof UpdateFirewallRules200OutboundItemAction[keyof typeof UpdateFirewallRules200OutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRules200OutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type UpdateFirewallRules200OutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: UpdateFirewallRules200OutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: UpdateFirewallRules200OutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: UpdateFirewallRules200OutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type UpdateFirewallRules200InboundPolicy = typeof UpdateFirewallRules200InboundPolicy[keyof typeof UpdateFirewallRules200InboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRules200InboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type UpdateFirewallRules200InboundItemProtocol = typeof UpdateFirewallRules200InboundItemProtocol[keyof typeof UpdateFirewallRules200InboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRules200InboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type UpdateFirewallRules200InboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type UpdateFirewallRules200InboundItemAction = typeof UpdateFirewallRules200InboundItemAction[keyof typeof UpdateFirewallRules200InboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRules200InboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type UpdateFirewallRules200InboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: UpdateFirewallRules200InboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: UpdateFirewallRules200InboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: UpdateFirewallRules200InboundItemProtocol;
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type UpdateFirewallRulesBodyAllOfOutboundPolicy = typeof UpdateFirewallRulesBodyAllOfOutboundPolicy[keyof typeof UpdateFirewallRulesBodyAllOfOutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRulesBodyAllOfOutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type UpdateFirewallRulesBodyAllOf = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: UpdateFirewallRulesBodyAllOfInboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: UpdateFirewallRulesBodyAllOfInboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: UpdateFirewallRulesBodyAllOfOutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: UpdateFirewallRulesBodyAllOfOutboundPolicy;
};

export type UpdateFirewallRulesBody = UpdateFirewallRulesBodyAllOf & {
  inbound?: unknown;
  outbound?: unknown;
};

/**
 * The type of network traffic affected by this rule.

 */
export type UpdateFirewallRulesBodyAllOfOutboundItemProtocol = typeof UpdateFirewallRulesBodyAllOfOutboundItemProtocol[keyof typeof UpdateFirewallRulesBodyAllOfOutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRulesBodyAllOfOutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type UpdateFirewallRulesBodyAllOfOutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type UpdateFirewallRulesBodyAllOfOutboundItemAction = typeof UpdateFirewallRulesBodyAllOfOutboundItemAction[keyof typeof UpdateFirewallRulesBodyAllOfOutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRulesBodyAllOfOutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type UpdateFirewallRulesBodyAllOfOutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: UpdateFirewallRulesBodyAllOfOutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: UpdateFirewallRulesBodyAllOfOutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: UpdateFirewallRulesBodyAllOfOutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type UpdateFirewallRulesBodyAllOfInboundPolicy = typeof UpdateFirewallRulesBodyAllOfInboundPolicy[keyof typeof UpdateFirewallRulesBodyAllOfInboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRulesBodyAllOfInboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type UpdateFirewallRulesBodyAllOfInboundItemProtocol = typeof UpdateFirewallRulesBodyAllOfInboundItemProtocol[keyof typeof UpdateFirewallRulesBodyAllOfInboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRulesBodyAllOfInboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type UpdateFirewallRulesBodyAllOfInboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type UpdateFirewallRulesBodyAllOfInboundItemAction = typeof UpdateFirewallRulesBodyAllOfInboundItemAction[keyof typeof UpdateFirewallRulesBodyAllOfInboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallRulesBodyAllOfInboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type UpdateFirewallRulesBodyAllOfInboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: UpdateFirewallRulesBodyAllOfInboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: UpdateFirewallRulesBodyAllOfInboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: UpdateFirewallRulesBodyAllOfInboundItemProtocol;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetFirewallRulesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetFirewallRulesDefault = {
  errors?: GetFirewallRulesDefaultErrorsItem[];
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type GetFirewallRules200OutboundPolicy = typeof GetFirewallRules200OutboundPolicy[keyof typeof GetFirewallRules200OutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewallRules200OutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type GetFirewallRules200 = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: GetFirewallRules200InboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: GetFirewallRules200InboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: GetFirewallRules200OutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: GetFirewallRules200OutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type GetFirewallRules200OutboundItemProtocol = typeof GetFirewallRules200OutboundItemProtocol[keyof typeof GetFirewallRules200OutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewallRules200OutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetFirewallRules200OutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetFirewallRules200OutboundItemAction = typeof GetFirewallRules200OutboundItemAction[keyof typeof GetFirewallRules200OutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewallRules200OutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetFirewallRules200OutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetFirewallRules200OutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetFirewallRules200OutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetFirewallRules200OutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type GetFirewallRules200InboundPolicy = typeof GetFirewallRules200InboundPolicy[keyof typeof GetFirewallRules200InboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewallRules200InboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type GetFirewallRules200InboundItemProtocol = typeof GetFirewallRules200InboundItemProtocol[keyof typeof GetFirewallRules200InboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewallRules200InboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetFirewallRules200InboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetFirewallRules200InboundItemAction = typeof GetFirewallRules200InboundItemAction[keyof typeof GetFirewallRules200InboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewallRules200InboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetFirewallRules200InboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetFirewallRules200InboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetFirewallRules200InboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetFirewallRules200InboundItemProtocol;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteFirewallDeviceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteFirewallDeviceDefault = {
  errors?: DeleteFirewallDeviceDefaultErrorsItem[];
};

export type DeleteFirewallDevice200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetFirewallDeviceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetFirewallDeviceDefault = {
  errors?: GetFirewallDeviceDefaultErrorsItem[];
};

/**
 * The entity's type.
 */
export type GetFirewallDevice200EntityType = typeof GetFirewallDevice200EntityType[keyof typeof GetFirewallDevice200EntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewallDevice200EntityType = {
  linode: 'linode',
  nodebalancer: 'nodebalancer',
} as const;

/**
 * The compute service that this Firewall has been applied to.

 */
export type GetFirewallDevice200Entity = {
  /** The entity's ID */
  readonly id?: number;
  /** The entity's label. */
  readonly label?: string;
  /** The entity's type. */
  readonly type?: GetFirewallDevice200EntityType;
  /** The API URL path you can use to access this entity.
 */
  readonly url?: string;
};

/**
 * Associates a Firewall with a Linode or NodeBalancer service. A Firewall can be assigned to a single entity at a time. Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.

 */
export type GetFirewallDevice200 = {
  /** When this Device was created.
 */
  readonly created?: string;
  /** The compute service that this Firewall has been applied to.
 */
  readonly entity?: GetFirewallDevice200Entity;
  /** The Device's unique ID
 */
  id?: number;
  /** When this Device was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateFirewallDeviceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateFirewallDeviceDefault = {
  errors?: CreateFirewallDeviceDefaultErrorsItem[];
};

/**
 * Associates a Firewall with a Linode or NodeBalancer service. A Firewall can be assigned to a single entity at a time. Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.

 */
export type CreateFirewallDevice200 = {
  /** When this Device was created.
 */
  readonly created?: string;
  /** The compute service that this Firewall has been applied to.
 */
  readonly entity?: CreateFirewallDevice200Entity;
  /** The Device's unique ID
 */
  id?: number;
  /** When this Device was last updated.
 */
  readonly updated?: string;
};

/**
 * The entity's type.
 */
export type CreateFirewallDevice200EntityType = typeof CreateFirewallDevice200EntityType[keyof typeof CreateFirewallDevice200EntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewallDevice200EntityType = {
  linode: 'linode',
  nodebalancer: 'nodebalancer',
} as const;

/**
 * The compute service that this Firewall has been applied to.

 */
export type CreateFirewallDevice200Entity = {
  /** The entity's ID */
  readonly id?: number;
  /** The entity's label. */
  readonly label?: string;
  /** The entity's type. */
  readonly type?: CreateFirewallDevice200EntityType;
  /** The API URL path you can use to access this entity.
 */
  readonly url?: string;
};

/**
 * The entity's type.
 */
export type CreateFirewallDeviceBodyAllOfType = typeof CreateFirewallDeviceBodyAllOfType[keyof typeof CreateFirewallDeviceBodyAllOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewallDeviceBodyAllOfType = {
  linode: 'linode',
  nodebalancer: 'nodebalancer',
} as const;

/**
 * The compute service that this Firewall has been applied to.

 */
export type CreateFirewallDeviceBodyAllOf = {
  /** The entity's ID */
  readonly id?: number;
  /** The entity's label. */
  readonly label?: string;
  /** The entity's type. */
  readonly type?: CreateFirewallDeviceBodyAllOfType;
  /** The API URL path you can use to access this entity.
 */
  readonly url?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetFirewallDevicesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetFirewallDevicesDefault = {
  errors?: GetFirewallDevicesDefaultErrorsItem[];
};

/**
 * Associates a Firewall with a Linode or NodeBalancer service. A Firewall can be assigned to a single entity at a time. Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.

 */
export type GetFirewallDevices200DataItem = {
  /** When this Device was created.
 */
  readonly created?: string;
  /** The compute service that this Firewall has been applied to.
 */
  readonly entity?: GetFirewallDevices200DataItemEntity;
  /** The Device's unique ID
 */
  id?: number;
  /** When this Device was last updated.
 */
  readonly updated?: string;
};

export type GetFirewallDevices200 = {
  data?: GetFirewallDevices200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The entity's type.
 */
export type GetFirewallDevices200DataItemEntityType = typeof GetFirewallDevices200DataItemEntityType[keyof typeof GetFirewallDevices200DataItemEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewallDevices200DataItemEntityType = {
  linode: 'linode',
  nodebalancer: 'nodebalancer',
} as const;

/**
 * The compute service that this Firewall has been applied to.

 */
export type GetFirewallDevices200DataItemEntity = {
  /** The entity's ID */
  readonly id?: number;
  /** The entity's label. */
  readonly label?: string;
  /** The entity's type. */
  readonly type?: GetFirewallDevices200DataItemEntityType;
  /** The API URL path you can use to access this entity.
 */
  readonly url?: string;
};

export type GetFirewallDevicesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteFirewallDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteFirewallDefault = {
  errors?: DeleteFirewallDefaultErrorsItem[];
};

export type DeleteFirewall200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateFirewallDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateFirewallDefault = {
  errors?: UpdateFirewallDefaultErrorsItem[];
};

/**
 * The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.

 */
export type UpdateFirewall200Status = typeof UpdateFirewall200Status[keyof typeof UpdateFirewall200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewall200Status = {
  enabled: 'enabled',
  disabled: 'disabled',
  deleted: 'deleted',
} as const;

/**
 * A resource that controls incoming and outgoing network traffic to a compute service. Only one enabled Firewall can be attached to a particular service at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a service. Currently, Firewalls can assigned to Linode compute instances and NodeBalancers.

 */
export type UpdateFirewall200 = {
  /** When this Firewall was created.
 */
  readonly created?: string;
  /** The Firewall's unique ID.
 */
  readonly id?: number;
  /** The Firewall's label, for display purposes only.

Firewall labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
  * Must be between 3 and 32 characters.
  * Must be unique.
 */
  label?: string;
  /** The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
 */
  rules?: UpdateFirewall200Rules;
  /** The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
 */
  readonly status?: UpdateFirewall200Status;
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Firewall was last updated.
 */
  readonly updated?: string;
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type UpdateFirewall200RulesOutboundPolicy = typeof UpdateFirewall200RulesOutboundPolicy[keyof typeof UpdateFirewall200RulesOutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewall200RulesOutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type UpdateFirewall200Rules = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: UpdateFirewall200RulesInboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: UpdateFirewall200RulesInboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: UpdateFirewall200RulesOutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: UpdateFirewall200RulesOutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type UpdateFirewall200RulesOutboundItemProtocol = typeof UpdateFirewall200RulesOutboundItemProtocol[keyof typeof UpdateFirewall200RulesOutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewall200RulesOutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type UpdateFirewall200RulesOutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type UpdateFirewall200RulesOutboundItemAction = typeof UpdateFirewall200RulesOutboundItemAction[keyof typeof UpdateFirewall200RulesOutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewall200RulesOutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type UpdateFirewall200RulesOutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: UpdateFirewall200RulesOutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: UpdateFirewall200RulesOutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: UpdateFirewall200RulesOutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type UpdateFirewall200RulesInboundPolicy = typeof UpdateFirewall200RulesInboundPolicy[keyof typeof UpdateFirewall200RulesInboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewall200RulesInboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type UpdateFirewall200RulesInboundItemProtocol = typeof UpdateFirewall200RulesInboundItemProtocol[keyof typeof UpdateFirewall200RulesInboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewall200RulesInboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type UpdateFirewall200RulesInboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type UpdateFirewall200RulesInboundItemAction = typeof UpdateFirewall200RulesInboundItemAction[keyof typeof UpdateFirewall200RulesInboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewall200RulesInboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type UpdateFirewall200RulesInboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: UpdateFirewall200RulesInboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: UpdateFirewall200RulesInboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: UpdateFirewall200RulesInboundItemProtocol;
};

/**
 * The status to be applied to this Firewall.

 * When a Firewall is first created its status is `enabled`.
 * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.

 */
export type UpdateFirewallBodyStatus = typeof UpdateFirewallBodyStatus[keyof typeof UpdateFirewallBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFirewallBodyStatus = {
  enabled: 'enabled',
  disabled: 'disabled',
} as const;

export type UpdateFirewallBody = {
  /** The Firewall's label, for display purposes only.

Firewall labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
  * Must be between 3 and 32 characters.
  * Must be unique.
 */
  label?: string;
  /** The status to be applied to this Firewall.

 * When a Firewall is first created its status is `enabled`.
 * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
 */
  status?: UpdateFirewallBodyStatus;
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetFirewallDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetFirewallDefault = {
  errors?: GetFirewallDefaultErrorsItem[];
};

/**
 * The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.

 */
export type GetFirewall200Status = typeof GetFirewall200Status[keyof typeof GetFirewall200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewall200Status = {
  enabled: 'enabled',
  disabled: 'disabled',
  deleted: 'deleted',
} as const;

/**
 * A resource that controls incoming and outgoing network traffic to a compute service. Only one enabled Firewall can be attached to a particular service at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a service. Currently, Firewalls can assigned to Linode compute instances and NodeBalancers.

 */
export type GetFirewall200 = {
  /** When this Firewall was created.
 */
  readonly created?: string;
  /** The Firewall's unique ID.
 */
  readonly id?: number;
  /** The Firewall's label, for display purposes only.

Firewall labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
  * Must be between 3 and 32 characters.
  * Must be unique.
 */
  label?: string;
  /** The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
 */
  rules?: GetFirewall200Rules;
  /** The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
 */
  readonly status?: GetFirewall200Status;
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Firewall was last updated.
 */
  readonly updated?: string;
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type GetFirewall200RulesOutboundPolicy = typeof GetFirewall200RulesOutboundPolicy[keyof typeof GetFirewall200RulesOutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewall200RulesOutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type GetFirewall200RulesOutboundItemProtocol = typeof GetFirewall200RulesOutboundItemProtocol[keyof typeof GetFirewall200RulesOutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewall200RulesOutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetFirewall200RulesOutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetFirewall200RulesOutboundItemAction = typeof GetFirewall200RulesOutboundItemAction[keyof typeof GetFirewall200RulesOutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewall200RulesOutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetFirewall200RulesOutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetFirewall200RulesOutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetFirewall200RulesOutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetFirewall200RulesOutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type GetFirewall200RulesInboundPolicy = typeof GetFirewall200RulesInboundPolicy[keyof typeof GetFirewall200RulesInboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewall200RulesInboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type GetFirewall200Rules = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: GetFirewall200RulesInboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: GetFirewall200RulesInboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: GetFirewall200RulesOutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: GetFirewall200RulesOutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type GetFirewall200RulesInboundItemProtocol = typeof GetFirewall200RulesInboundItemProtocol[keyof typeof GetFirewall200RulesInboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewall200RulesInboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetFirewall200RulesInboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetFirewall200RulesInboundItemAction = typeof GetFirewall200RulesInboundItemAction[keyof typeof GetFirewall200RulesInboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewall200RulesInboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetFirewall200RulesInboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetFirewall200RulesInboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetFirewall200RulesInboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetFirewall200RulesInboundItemProtocol;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateFirewallsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateFirewallsDefault = {
  errors?: CreateFirewallsDefaultErrorsItem[];
};

/**
 * The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.

 */
export type CreateFirewalls200Status = typeof CreateFirewalls200Status[keyof typeof CreateFirewalls200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewalls200Status = {
  enabled: 'enabled',
  disabled: 'disabled',
  deleted: 'deleted',
} as const;

/**
 * A resource that controls incoming and outgoing network traffic to a compute service. Only one enabled Firewall can be attached to a particular service at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a service. Currently, Firewalls can assigned to Linode compute instances and NodeBalancers.

 */
export type CreateFirewalls200 = {
  /** When this Firewall was created.
 */
  readonly created?: string;
  /** The Firewall's unique ID.
 */
  readonly id?: number;
  /** The Firewall's label, for display purposes only.

Firewall labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
  * Must be between 3 and 32 characters.
  * Must be unique.
 */
  label?: string;
  /** The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
 */
  rules?: CreateFirewalls200Rules;
  /** The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
 */
  readonly status?: CreateFirewalls200Status;
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Firewall was last updated.
 */
  readonly updated?: string;
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type CreateFirewalls200RulesOutboundPolicy = typeof CreateFirewalls200RulesOutboundPolicy[keyof typeof CreateFirewalls200RulesOutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewalls200RulesOutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type CreateFirewalls200Rules = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: CreateFirewalls200RulesInboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: CreateFirewalls200RulesInboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: CreateFirewalls200RulesOutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: CreateFirewalls200RulesOutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type CreateFirewalls200RulesOutboundItemProtocol = typeof CreateFirewalls200RulesOutboundItemProtocol[keyof typeof CreateFirewalls200RulesOutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewalls200RulesOutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type CreateFirewalls200RulesOutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type CreateFirewalls200RulesOutboundItemAction = typeof CreateFirewalls200RulesOutboundItemAction[keyof typeof CreateFirewalls200RulesOutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewalls200RulesOutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type CreateFirewalls200RulesOutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: CreateFirewalls200RulesOutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: CreateFirewalls200RulesOutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: CreateFirewalls200RulesOutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type CreateFirewalls200RulesInboundPolicy = typeof CreateFirewalls200RulesInboundPolicy[keyof typeof CreateFirewalls200RulesInboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewalls200RulesInboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type CreateFirewalls200RulesInboundItemProtocol = typeof CreateFirewalls200RulesInboundItemProtocol[keyof typeof CreateFirewalls200RulesInboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewalls200RulesInboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type CreateFirewalls200RulesInboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type CreateFirewalls200RulesInboundItemAction = typeof CreateFirewalls200RulesInboundItemAction[keyof typeof CreateFirewalls200RulesInboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewalls200RulesInboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type CreateFirewalls200RulesInboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: CreateFirewalls200RulesInboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: CreateFirewalls200RulesInboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: CreateFirewalls200RulesInboundItemProtocol;
};

export type CreateFirewallsBodyRules = {
  inbound?: unknown;
  outbound?: unknown;
};

/**
 * Devices to create for this Firewall.
When a Device is created, the Firewall is assigned to its associated service.
Currently, Devices can be created for Linode compute instances and NodeBalancers.

Additional devices can be assigned after Firewall creation by using the [Firewall Device Create](#firewall-device-create) command.

 */
export type CreateFirewallsBodyDevices = {
  /** An array of Linode IDs. A Firewall Device is created for each ID.
 */
  linodes?: number[];
  /** An array containing a NodeBalancer ID. A Firewall Device is created for the ID.

* Only one NodeBalancer can be assigned to a Firewall at a time.
* Firewalls only apply to inbound TCP traffic to NodeBalancers.
 */
  nodebalancers?: number[];
};

export type CreateFirewallsBody = CreateFirewallsBodyAllOf & {
  /** Devices to create for this Firewall.
When a Device is created, the Firewall is assigned to its associated service.
Currently, Devices can be created for Linode compute instances and NodeBalancers.

Additional devices can be assigned after Firewall creation by using the [Firewall Device Create](#firewall-device-create) command.
 */
  devices?: CreateFirewallsBodyDevices;
  rules: CreateFirewallsBodyRules;
};

/**
 * The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.

 */
export type CreateFirewallsBodyAllOfStatus = typeof CreateFirewallsBodyAllOfStatus[keyof typeof CreateFirewallsBodyAllOfStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewallsBodyAllOfStatus = {
  enabled: 'enabled',
  disabled: 'disabled',
  deleted: 'deleted',
} as const;

/**
 * A resource that controls incoming and outgoing network traffic to a compute service. Only one enabled Firewall can be attached to a particular service at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a service. Currently, Firewalls can assigned to Linode compute instances and NodeBalancers.

 */
export type CreateFirewallsBodyAllOf = {
  /** When this Firewall was created.
 */
  readonly created?: string;
  /** The Firewall's unique ID.
 */
  readonly id?: number;
  /** The Firewall's label, for display purposes only.

Firewall labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
  * Must be between 3 and 32 characters.
  * Must be unique.
 */
  label?: string;
  /** The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
 */
  rules?: CreateFirewallsBodyAllOfRules;
  /** The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
 */
  readonly status?: CreateFirewallsBodyAllOfStatus;
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Firewall was last updated.
 */
  readonly updated?: string;
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type CreateFirewallsBodyAllOfRulesOutboundPolicy = typeof CreateFirewallsBodyAllOfRulesOutboundPolicy[keyof typeof CreateFirewallsBodyAllOfRulesOutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewallsBodyAllOfRulesOutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type CreateFirewallsBodyAllOfRules = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: CreateFirewallsBodyAllOfRulesInboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: CreateFirewallsBodyAllOfRulesInboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: CreateFirewallsBodyAllOfRulesOutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: CreateFirewallsBodyAllOfRulesOutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type CreateFirewallsBodyAllOfRulesOutboundItemProtocol = typeof CreateFirewallsBodyAllOfRulesOutboundItemProtocol[keyof typeof CreateFirewallsBodyAllOfRulesOutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewallsBodyAllOfRulesOutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type CreateFirewallsBodyAllOfRulesOutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type CreateFirewallsBodyAllOfRulesOutboundItemAction = typeof CreateFirewallsBodyAllOfRulesOutboundItemAction[keyof typeof CreateFirewallsBodyAllOfRulesOutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewallsBodyAllOfRulesOutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type CreateFirewallsBodyAllOfRulesOutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: CreateFirewallsBodyAllOfRulesOutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: CreateFirewallsBodyAllOfRulesOutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: CreateFirewallsBodyAllOfRulesOutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type CreateFirewallsBodyAllOfRulesInboundPolicy = typeof CreateFirewallsBodyAllOfRulesInboundPolicy[keyof typeof CreateFirewallsBodyAllOfRulesInboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewallsBodyAllOfRulesInboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type CreateFirewallsBodyAllOfRulesInboundItemProtocol = typeof CreateFirewallsBodyAllOfRulesInboundItemProtocol[keyof typeof CreateFirewallsBodyAllOfRulesInboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewallsBodyAllOfRulesInboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type CreateFirewallsBodyAllOfRulesInboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type CreateFirewallsBodyAllOfRulesInboundItemAction = typeof CreateFirewallsBodyAllOfRulesInboundItemAction[keyof typeof CreateFirewallsBodyAllOfRulesInboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFirewallsBodyAllOfRulesInboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type CreateFirewallsBodyAllOfRulesInboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: CreateFirewallsBodyAllOfRulesInboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: CreateFirewallsBodyAllOfRulesInboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: CreateFirewallsBodyAllOfRulesInboundItemProtocol;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetFirewallsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetFirewallsDefault = {
  errors?: GetFirewallsDefaultErrorsItem[];
};

export type GetFirewalls200 = {
  data?: GetFirewalls200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.

 */
export type GetFirewalls200DataItemStatus = typeof GetFirewalls200DataItemStatus[keyof typeof GetFirewalls200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewalls200DataItemStatus = {
  enabled: 'enabled',
  disabled: 'disabled',
  deleted: 'deleted',
} as const;

/**
 * A resource that controls incoming and outgoing network traffic to a compute service. Only one enabled Firewall can be attached to a particular service at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a service. Currently, Firewalls can assigned to Linode compute instances and NodeBalancers.

 */
export type GetFirewalls200DataItem = {
  /** When this Firewall was created.
 */
  readonly created?: string;
  /** The Firewall's unique ID.
 */
  readonly id?: number;
  /** The Firewall's label, for display purposes only.

Firewall labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
  * Must be between 3 and 32 characters.
  * Must be unique.
 */
  label?: string;
  /** The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
 */
  rules?: GetFirewalls200DataItemRules;
  /** The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
 */
  readonly status?: GetFirewalls200DataItemStatus;
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Firewall was last updated.
 */
  readonly updated?: string;
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type GetFirewalls200DataItemRulesOutboundPolicy = typeof GetFirewalls200DataItemRulesOutboundPolicy[keyof typeof GetFirewalls200DataItemRulesOutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewalls200DataItemRulesOutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type GetFirewalls200DataItemRules = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: GetFirewalls200DataItemRulesInboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: GetFirewalls200DataItemRulesInboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: GetFirewalls200DataItemRulesOutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: GetFirewalls200DataItemRulesOutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type GetFirewalls200DataItemRulesOutboundItemProtocol = typeof GetFirewalls200DataItemRulesOutboundItemProtocol[keyof typeof GetFirewalls200DataItemRulesOutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewalls200DataItemRulesOutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetFirewalls200DataItemRulesOutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetFirewalls200DataItemRulesOutboundItemAction = typeof GetFirewalls200DataItemRulesOutboundItemAction[keyof typeof GetFirewalls200DataItemRulesOutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewalls200DataItemRulesOutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetFirewalls200DataItemRulesOutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetFirewalls200DataItemRulesOutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetFirewalls200DataItemRulesOutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetFirewalls200DataItemRulesOutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type GetFirewalls200DataItemRulesInboundPolicy = typeof GetFirewalls200DataItemRulesInboundPolicy[keyof typeof GetFirewalls200DataItemRulesInboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewalls200DataItemRulesInboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type GetFirewalls200DataItemRulesInboundItemProtocol = typeof GetFirewalls200DataItemRulesInboundItemProtocol[keyof typeof GetFirewalls200DataItemRulesInboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewalls200DataItemRulesInboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetFirewalls200DataItemRulesInboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetFirewalls200DataItemRulesInboundItemAction = typeof GetFirewalls200DataItemRulesInboundItemAction[keyof typeof GetFirewalls200DataItemRulesInboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFirewalls200DataItemRulesInboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetFirewalls200DataItemRulesInboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetFirewalls200DataItemRulesInboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetFirewalls200DataItemRulesInboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetFirewalls200DataItemRulesInboundItemProtocol;
};

export type GetFirewallsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteIPv6RangeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteIPv6RangeDefault = {
  errors?: DeleteIPv6RangeDefaultErrorsItem[];
};

export type DeleteIPv6Range200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetIPv6RangeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetIPv6RangeDefault = {
  errors?: GetIPv6RangeDefaultErrorsItem[];
};

/**
 * An object representing an IPv6 range.

 */
export type GetIPv6Range200 = {
  /** Whether this IPv6 range is shared.
 */
  readonly is_bgp?: boolean;
  /** A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
 */
  readonly linodes?: number[];
  /** The prefix length of the address. The total number of addresses that can be assigned from this range is calculated as 2<sup>(128 - prefix length)</sup>.
 */
  prefix?: number;
  /** The IPv6 address of this range.
 */
  readonly range?: string;
  /** The region for this range of IPv6 addresses.
 */
  readonly region?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostIPv6RangeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostIPv6RangeDefault = {
  errors?: PostIPv6RangeDefaultErrorsItem[];
};

export type PostIPv6Range200 = {
  /** The IPv6 network range, including subnet and prefix length.
 */
  range?: string;
  /** The route target IPV6 SLAAC address for this range. Does not include the prefix length.
 */
  route_target?: string;
};

/**
 * The prefix length of the IPv6 range.

 */
export type PostIPv6RangeBodyPrefixLength = typeof PostIPv6RangeBodyPrefixLength[keyof typeof PostIPv6RangeBodyPrefixLength];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostIPv6RangeBodyPrefixLength = {
  NUMBER_56: 56,
  NUMBER_64: 64,
} as const;

export type PostIPv6RangeBody = {
  /** The ID of the Linode to assign this range to. The SLAAC address for the provided Linode is used as the range's `route_target`.

* **Required** if `route_target` is omitted from the request.

* Mutually exclusive with `route_target`. Submitting values for both properties in a request results in an error.
 */
  linode_id?: number;
  /** The prefix length of the IPv6 range.
 */
  prefix_length: PostIPv6RangeBodyPrefixLength;
  /** The IPv6 SLAAC address to assign this range to.

* **Required** if `linode_id` is omitted from the request.

* Mutually exclusive with `linode_id`. Submitting values for both properties in a request results in an error.

* **Note**: Omit the `/128` prefix length of the SLAAC address when using this property.
 */
  route_target?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetIPv6RangesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetIPv6RangesDefault = {
  errors?: GetIPv6RangesDefaultErrorsItem[];
};

/**
 * An object representing an IPv6 range.

 */
export type GetIPv6Ranges200DataItem = {
  /** The prefix length of the address. The total number of addresses that can be assigned from this range is calculated as 2<sup>(128 - prefix length)</sup>.
 */
  prefix?: number;
  /** The IPv6 address of this range.
 */
  readonly range?: string;
  /** The region for this range of IPv6 addresses.
 */
  readonly region?: string;
  /** The IPv6 SLAAC address.
 */
  route_target?: string;
};

export type GetIPv6Ranges200 = {
  data?: GetIPv6Ranges200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetIPv6RangesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetIPv6PoolsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetIPv6PoolsDefault = {
  errors?: GetIPv6PoolsDefaultErrorsItem[];
};

/**
 * An object representing an IPv6 pool.

 */
export type GetIPv6Pools200DataItem = {
  /** The prefix length of the address. The total number of addresses that can be assigned from this range is calculated as 2<sup>(128 - prefix length)</sup>.
 */
  prefix?: number;
  /** The IPv6 range of addresses in this pool.
 */
  readonly range?: string;
  /** The region for this pool of IPv6 addresses.
 */
  readonly region?: string;
  /** The last address in this block of IPv6 addresses.
 */
  route_target?: string | null;
};

export type GetIPv6Pools200 = {
  data?: GetIPv6Pools200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetIPv6PoolsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ShareIPv4sDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ShareIPv4sDefault = {
  errors?: ShareIPv4sDefaultErrorsItem[];
};

export type ShareIPv4s200 = { [key: string]: any };

/**
 * A request object IP Addresses Share (POST /networking/ips/share)
 */
export type ShareIPv4sBody = {
  /** A list of secondary Linode IPs to share with the primary Linode.
* Can include both IPv4 addresses and IPv6 ranges (omit /56 and /64 prefix lengths)
* Can include both private and public IPv4 addresses.
* You must have access to all of these addresses and they must be in the same Region as the primary Linode.
* Enter an empty array to remove all shared IP addresses.
 */
  ips: string[];
  /** The ID of the primary Linode that the addresses will be shared with.
 */
  linode_id: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AssignIPv4sDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AssignIPv4sDefault = {
  errors?: AssignIPv4sDefaultErrorsItem[];
};

export type AssignIPv4s200 = { [key: string]: any };

export type AssignIPv4sBodyAssignmentsItem = {
  /** The IPv4 address or IPv6 range for this assignment.
* Must be an IPv4 address or an IPv6 range you can access in the Region specified.
* IPv6 ranges must include a prefix length of `/56` or `/64`, for example: `2001:db8:3c4d:15::/64`.
* Assignment of an IPv6 range to a Linode updates the route target of the range to the assigned Linode's SLAAC address.
* May be a public or private address.
 */
  address?: string;
  /** The ID of the Linode to assign this address to. The IP's previous Linode will lose this address, and must end up with at least one public address and no more than one private address once all assignments have been made.
 */
  linode_id?: number;
};

/**
 * Request object for IP Addresses Assign (POST /networking/ips/assign).
 */
export type AssignIPv4sBody = {
  /** The list of assignments to make. You must have read_write access to all IPs being assigned and all Linodes being assigned to in order for the assignments to succeed.
 */
  assignments: AssignIPv4sBodyAssignmentsItem[];
  /** The ID of the Region in which these assignments are to take place. All IPs and Linodes must exist in this Region.
 */
  region: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ShareIPsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ShareIPsDefault = {
  errors?: ShareIPsDefaultErrorsItem[];
};

export type ShareIPs200 = { [key: string]: any };

/**
 * A request object IP Addresses Share (POST /networking/ips/share)
 */
export type ShareIPsBody = {
  /** A list of secondary Linode IPs to share with the primary Linode.
* Can include both IPv4 addresses and IPv6 ranges (omit /56 and /64 prefix lengths)
* Can include both private and public IPv4 addresses.
* You must have access to all of these addresses and they must be in the same Region as the primary Linode.
* Enter an empty array to remove all shared IP addresses.
 */
  ips: string[];
  /** The ID of the primary Linode that the addresses will be shared with.
 */
  linode_id: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AssignIPsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AssignIPsDefault = {
  errors?: AssignIPsDefaultErrorsItem[];
};

export type AssignIPs200 = { [key: string]: any };

export type AssignIPsBodyAssignmentsItem = {
  /** The IPv4 address or IPv6 range for this assignment.
* Must be an IPv4 address or an IPv6 range you can access in the Region specified.
* IPv6 ranges must include a prefix length of `/56` or `/64`, for example: `2001:db8:3c4d:15::/64`.
* Assignment of an IPv6 range to a Linode updates the route target of the range to the assigned Linode's SLAAC address.
* May be a public or private address.
 */
  address?: string;
  /** The ID of the Linode to assign this address to. The IP's previous Linode will lose this address, and must end up with at least one public address and no more than one private address once all assignments have been made.
 */
  linode_id?: number;
};

/**
 * Request object for IP Addresses Assign (POST /networking/ips/assign).
 */
export type AssignIPsBody = {
  /** The list of assignments to make. You must have read_write access to all IPs being assigned and all Linodes being assigned to in order for the assignments to succeed.
 */
  assignments: AssignIPsBodyAssignmentsItem[];
  /** The ID of the Region in which these assignments are to take place. All IPs and Linodes must exist in this Region.
 */
  region: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateIPDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateIPDefault = {
  errors?: UpdateIPDefaultErrorsItem[];
};

/**
 * The type of address this is.

 */
export type UpdateIP200Type = typeof UpdateIP200Type[keyof typeof UpdateIP200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateIP200Type = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export type UpdateIP200 = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: UpdateIP200Type;
};

export type UpdateIPBody = {
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetIPDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetIPDefault = {
  errors?: GetIPDefaultErrorsItem[];
};

/**
 * The type of address this is.

 */
export type GetIP200Type = typeof GetIP200Type[keyof typeof GetIP200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetIP200Type = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export type GetIP200 = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: GetIP200Type;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AllocateIPDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AllocateIPDefault = {
  errors?: AllocateIPDefaultErrorsItem[];
};

/**
 * The type of address this is.

 */
export type AllocateIP200Type = typeof AllocateIP200Type[keyof typeof AllocateIP200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AllocateIP200Type = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export type AllocateIP200 = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: AllocateIP200Type;
};

/**
 * The type of address you are requesting. Only IPv4 addresses may be allocated through this endpoint.

 */
export type AllocateIPBodyType = typeof AllocateIPBodyType[keyof typeof AllocateIPBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AllocateIPBodyType = {
  ipv4: 'ipv4',
} as const;

export type AllocateIPBody = {
  /** The ID of a Linode you you have access to that this address will be allocated to.
 */
  linode_id: number;
  /** Whether to create a public or private IPv4 address.
 */
  public: boolean;
  /** The type of address you are requesting. Only IPv4 addresses may be allocated through this endpoint.
 */
  type: AllocateIPBodyType;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetIPsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetIPsDefault = {
  errors?: GetIPsDefaultErrorsItem[];
};

export type GetIPs200AllOfTwo = {
  data?: GetIPs200AllOfTwoDataItem[];
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetIPs200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The response data for the IP Addresses List (GET /networking/ips) command.
 */
export type GetIPs200 = GetIPs200AllOf & GetIPs200AllOfTwo;

/**
 * The type of address this is.

 */
export type GetIPs200AllOfTwoDataItemType = typeof GetIPs200AllOfTwoDataItemType[keyof typeof GetIPs200AllOfTwoDataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetIPs200AllOfTwoDataItemType = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6, specific to the response for the IP Addresses List command.

 */
export type GetIPs200AllOfTwoDataItem = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this defaults to the Linode that this address was assigned to on creation. IPv4 addresses may be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: GetIPs200AllOfTwoDataItemType;
};

export type GetIPsBody = {
  /** When `true`, the "rdns" property for any "ipv6" type addresses always returns `null` regardless of whether RDNS data exists for the address.

The default value is `false`.
 */
  skip_ipv6_rdns?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedStatsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedStatsDefault = {
  errors?: GetManagedStatsDefaultErrorsItem[];
};

export type GetManagedStats200Data = GetManagedStats200DataOneOf | string[];

export type GetManagedStats200 = {
  data?: GetManagedStats200Data;
};

/**
 * A stat data point.

 */
export type GetManagedStats200DataOneOfSwapItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A stat data point.

 */
export type GetManagedStats200DataOneOfNetOutItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A stat data point.

 */
export type GetManagedStats200DataOneOfNetInItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A stat data point.

 */
export type GetManagedStats200DataOneOfDiskItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A stat data point.

 */
export type GetManagedStats200DataOneOfCpuItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A collection of graph data returned for managed stats.

 */
export type GetManagedStats200DataOneOf = {
  /** CPU usage stats from the last 24 hours. */
  cpu?: GetManagedStats200DataOneOfCpuItem[];
  /** Disk usage stats from the last 24 hours. */
  disk?: GetManagedStats200DataOneOfDiskItem[];
  /** Inbound network traffic stats from the last 24 hours. */
  net_in?: GetManagedStats200DataOneOfNetInItem[];
  /** Outbound network traffic stats from the last 24 hours. */
  net_out?: GetManagedStats200DataOneOfNetOutItem[];
  /** Swap usage stats from the last 24 hours. */
  swap?: GetManagedStats200DataOneOfSwapItem[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type EnableManagedServiceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type EnableManagedServiceDefault = {
  errors?: EnableManagedServiceDefaultErrorsItem[];
};

/**
 * The current status of this Service.

 */
export type EnableManagedService200Status = typeof EnableManagedService200Status[keyof typeof EnableManagedService200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EnableManagedService200Status = {
  disabled: 'disabled',
  pending: 'pending',
  ok: 'ok',
  problem: 'problem',
} as const;

/**
 * How this Service is monitored.

 */
export type EnableManagedService200ServiceType = typeof EnableManagedService200ServiceType[keyof typeof EnableManagedService200ServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EnableManagedService200ServiceType = {
  url: 'url',
  tcp: 'tcp',
} as const;

/**
 * A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.

 */
export type EnableManagedService200 = {
  /** The URL at which this Service is monitored.

URL parameters such as `?no-cache=1` are preserved.

URL fragments/anchors such as `#monitor` are **not** preserved.
 */
  address?: string;
  /** What to expect to find in the response body for the Service to be considered up.
 */
  body?: string | null;
  /** The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
 */
  consultation_group?: string;
  /** When this Managed Service was created. */
  readonly created?: string;
  /** An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
 */
  credentials?: number[];
  /** This Service's unique ID.
 */
  readonly id?: number;
  /** The label for this Service. This is for display purposes only.
 */
  label?: string;
  /** Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
 */
  notes?: string | null;
  /** The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
 */
  region?: string;
  /** How this Service is monitored.
 */
  service_type?: EnableManagedService200ServiceType;
  /** The current status of this Service.
 */
  readonly status?: EnableManagedService200Status;
  /** How long to wait, in seconds, for a response before considering the Service to be down.
 */
  timeout?: number;
  /** When this Managed Service was last updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DisableManagedServiceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DisableManagedServiceDefault = {
  errors?: DisableManagedServiceDefaultErrorsItem[];
};

/**
 * The current status of this Service.

 */
export type DisableManagedService200Status = typeof DisableManagedService200Status[keyof typeof DisableManagedService200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DisableManagedService200Status = {
  disabled: 'disabled',
  pending: 'pending',
  ok: 'ok',
  problem: 'problem',
} as const;

/**
 * How this Service is monitored.

 */
export type DisableManagedService200ServiceType = typeof DisableManagedService200ServiceType[keyof typeof DisableManagedService200ServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DisableManagedService200ServiceType = {
  url: 'url',
  tcp: 'tcp',
} as const;

/**
 * A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.

 */
export type DisableManagedService200 = {
  /** The URL at which this Service is monitored.

URL parameters such as `?no-cache=1` are preserved.

URL fragments/anchors such as `#monitor` are **not** preserved.
 */
  address?: string;
  /** What to expect to find in the response body for the Service to be considered up.
 */
  body?: string | null;
  /** The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
 */
  consultation_group?: string;
  /** When this Managed Service was created. */
  readonly created?: string;
  /** An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
 */
  credentials?: number[];
  /** This Service's unique ID.
 */
  readonly id?: number;
  /** The label for this Service. This is for display purposes only.
 */
  label?: string;
  /** Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
 */
  notes?: string | null;
  /** The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
 */
  region?: string;
  /** How this Service is monitored.
 */
  service_type?: DisableManagedService200ServiceType;
  /** The current status of this Service.
 */
  readonly status?: DisableManagedService200Status;
  /** How long to wait, in seconds, for a response before considering the Service to be down.
 */
  timeout?: number;
  /** When this Managed Service was last updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteManagedServiceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteManagedServiceDefault = {
  errors?: DeleteManagedServiceDefaultErrorsItem[];
};

export type DeleteManagedService200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateManagedServiceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateManagedServiceDefault = {
  errors?: UpdateManagedServiceDefaultErrorsItem[];
};

/**
 * The current status of this Service.

 */
export type UpdateManagedService200Status = typeof UpdateManagedService200Status[keyof typeof UpdateManagedService200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateManagedService200Status = {
  disabled: 'disabled',
  pending: 'pending',
  ok: 'ok',
  problem: 'problem',
} as const;

/**
 * How this Service is monitored.

 */
export type UpdateManagedService200ServiceType = typeof UpdateManagedService200ServiceType[keyof typeof UpdateManagedService200ServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateManagedService200ServiceType = {
  url: 'url',
  tcp: 'tcp',
} as const;

/**
 * A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.

 */
export type UpdateManagedService200 = {
  /** The URL at which this Service is monitored.

URL parameters such as `?no-cache=1` are preserved.

URL fragments/anchors such as `#monitor` are **not** preserved.
 */
  address?: string;
  /** What to expect to find in the response body for the Service to be considered up.
 */
  body?: string | null;
  /** The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
 */
  consultation_group?: string;
  /** When this Managed Service was created. */
  readonly created?: string;
  /** An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
 */
  credentials?: number[];
  /** This Service's unique ID.
 */
  readonly id?: number;
  /** The label for this Service. This is for display purposes only.
 */
  label?: string;
  /** Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
 */
  notes?: string | null;
  /** The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
 */
  region?: string;
  /** How this Service is monitored.
 */
  service_type?: UpdateManagedService200ServiceType;
  /** The current status of this Service.
 */
  readonly status?: UpdateManagedService200Status;
  /** How long to wait, in seconds, for a response before considering the Service to be down.
 */
  timeout?: number;
  /** When this Managed Service was last updated. */
  readonly updated?: string;
};

/**
 * The current status of this Service.

 */
export type UpdateManagedServiceBodyStatus = typeof UpdateManagedServiceBodyStatus[keyof typeof UpdateManagedServiceBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateManagedServiceBodyStatus = {
  disabled: 'disabled',
  pending: 'pending',
  ok: 'ok',
  problem: 'problem',
} as const;

/**
 * How this Service is monitored.

 */
export type UpdateManagedServiceBodyServiceType = typeof UpdateManagedServiceBodyServiceType[keyof typeof UpdateManagedServiceBodyServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateManagedServiceBodyServiceType = {
  url: 'url',
  tcp: 'tcp',
} as const;

/**
 * A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.

 */
export type UpdateManagedServiceBody = {
  /** The URL at which this Service is monitored.

URL parameters such as `?no-cache=1` are preserved.

URL fragments/anchors such as `#monitor` are **not** preserved.
 */
  address?: string;
  /** What to expect to find in the response body for the Service to be considered up.
 */
  body?: string | null;
  /** The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
 */
  consultation_group?: string;
  /** When this Managed Service was created. */
  readonly created?: string;
  /** An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
 */
  credentials?: number[];
  /** This Service's unique ID.
 */
  readonly id?: number;
  /** The label for this Service. This is for display purposes only.
 */
  label?: string;
  /** Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
 */
  notes?: string | null;
  /** The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
 */
  region?: string;
  /** How this Service is monitored.
 */
  service_type?: UpdateManagedServiceBodyServiceType;
  /** The current status of this Service.
 */
  readonly status?: UpdateManagedServiceBodyStatus;
  /** How long to wait, in seconds, for a response before considering the Service to be down.
 */
  timeout?: number;
  /** When this Managed Service was last updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedServiceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedServiceDefault = {
  errors?: GetManagedServiceDefaultErrorsItem[];
};

/**
 * The current status of this Service.

 */
export type GetManagedService200Status = typeof GetManagedService200Status[keyof typeof GetManagedService200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetManagedService200Status = {
  disabled: 'disabled',
  pending: 'pending',
  ok: 'ok',
  problem: 'problem',
} as const;

/**
 * How this Service is monitored.

 */
export type GetManagedService200ServiceType = typeof GetManagedService200ServiceType[keyof typeof GetManagedService200ServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetManagedService200ServiceType = {
  url: 'url',
  tcp: 'tcp',
} as const;

/**
 * A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.

 */
export type GetManagedService200 = {
  /** The URL at which this Service is monitored.

URL parameters such as `?no-cache=1` are preserved.

URL fragments/anchors such as `#monitor` are **not** preserved.
 */
  address?: string;
  /** What to expect to find in the response body for the Service to be considered up.
 */
  body?: string | null;
  /** The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
 */
  consultation_group?: string;
  /** When this Managed Service was created. */
  readonly created?: string;
  /** An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
 */
  credentials?: number[];
  /** This Service's unique ID.
 */
  readonly id?: number;
  /** The label for this Service. This is for display purposes only.
 */
  label?: string;
  /** Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
 */
  notes?: string | null;
  /** The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
 */
  region?: string;
  /** How this Service is monitored.
 */
  service_type?: GetManagedService200ServiceType;
  /** The current status of this Service.
 */
  readonly status?: GetManagedService200Status;
  /** How long to wait, in seconds, for a response before considering the Service to be down.
 */
  timeout?: number;
  /** When this Managed Service was last updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateManagedServiceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateManagedServiceDefault = {
  errors?: CreateManagedServiceDefaultErrorsItem[];
};

/**
 * The current status of this Service.

 */
export type CreateManagedService200Status = typeof CreateManagedService200Status[keyof typeof CreateManagedService200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateManagedService200Status = {
  disabled: 'disabled',
  pending: 'pending',
  ok: 'ok',
  problem: 'problem',
} as const;

/**
 * How this Service is monitored.

 */
export type CreateManagedService200ServiceType = typeof CreateManagedService200ServiceType[keyof typeof CreateManagedService200ServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateManagedService200ServiceType = {
  url: 'url',
  tcp: 'tcp',
} as const;

/**
 * A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.

 */
export type CreateManagedService200 = {
  /** The URL at which this Service is monitored.

URL parameters such as `?no-cache=1` are preserved.

URL fragments/anchors such as `#monitor` are **not** preserved.
 */
  address?: string;
  /** What to expect to find in the response body for the Service to be considered up.
 */
  body?: string | null;
  /** The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
 */
  consultation_group?: string;
  /** When this Managed Service was created. */
  readonly created?: string;
  /** An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
 */
  credentials?: number[];
  /** This Service's unique ID.
 */
  readonly id?: number;
  /** The label for this Service. This is for display purposes only.
 */
  label?: string;
  /** Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
 */
  notes?: string | null;
  /** The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
 */
  region?: string;
  /** How this Service is monitored.
 */
  service_type?: CreateManagedService200ServiceType;
  /** The current status of this Service.
 */
  readonly status?: CreateManagedService200Status;
  /** How long to wait, in seconds, for a response before considering the Service to be down.
 */
  timeout?: number;
  /** When this Managed Service was last updated. */
  readonly updated?: string;
};

/**
 * The current status of this Service.

 */
export type CreateManagedServiceBodyAllOfStatus = typeof CreateManagedServiceBodyAllOfStatus[keyof typeof CreateManagedServiceBodyAllOfStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateManagedServiceBodyAllOfStatus = {
  disabled: 'disabled',
  pending: 'pending',
  ok: 'ok',
  problem: 'problem',
} as const;

/**
 * How this Service is monitored.

 */
export type CreateManagedServiceBodyAllOfServiceType = typeof CreateManagedServiceBodyAllOfServiceType[keyof typeof CreateManagedServiceBodyAllOfServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateManagedServiceBodyAllOfServiceType = {
  url: 'url',
  tcp: 'tcp',
} as const;

/**
 * A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.

 */
export type CreateManagedServiceBodyAllOf = {
  /** The URL at which this Service is monitored.

URL parameters such as `?no-cache=1` are preserved.

URL fragments/anchors such as `#monitor` are **not** preserved.
 */
  address?: string;
  /** What to expect to find in the response body for the Service to be considered up.
 */
  body?: string | null;
  /** The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
 */
  consultation_group?: string;
  /** When this Managed Service was created. */
  readonly created?: string;
  /** An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
 */
  credentials?: number[];
  /** This Service's unique ID.
 */
  readonly id?: number;
  /** The label for this Service. This is for display purposes only.
 */
  label?: string;
  /** Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
 */
  notes?: string | null;
  /** The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
 */
  region?: string;
  /** How this Service is monitored.
 */
  service_type?: CreateManagedServiceBodyAllOfServiceType;
  /** The current status of this Service.
 */
  readonly status?: CreateManagedServiceBodyAllOfStatus;
  /** How long to wait, in seconds, for a response before considering the Service to be down.
 */
  timeout?: number;
  /** When this Managed Service was last updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedServicesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedServicesDefault = {
  errors?: GetManagedServicesDefaultErrorsItem[];
};

/**
 * The current status of this Service.

 */
export type GetManagedServices200DataItemStatus = typeof GetManagedServices200DataItemStatus[keyof typeof GetManagedServices200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetManagedServices200DataItemStatus = {
  disabled: 'disabled',
  pending: 'pending',
  ok: 'ok',
  problem: 'problem',
} as const;

/**
 * How this Service is monitored.

 */
export type GetManagedServices200DataItemServiceType = typeof GetManagedServices200DataItemServiceType[keyof typeof GetManagedServices200DataItemServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetManagedServices200DataItemServiceType = {
  url: 'url',
  tcp: 'tcp',
} as const;

/**
 * A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.

 */
export type GetManagedServices200DataItem = {
  /** The URL at which this Service is monitored.

URL parameters such as `?no-cache=1` are preserved.

URL fragments/anchors such as `#monitor` are **not** preserved.
 */
  address?: string;
  /** What to expect to find in the response body for the Service to be considered up.
 */
  body?: string | null;
  /** The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
 */
  consultation_group?: string;
  /** When this Managed Service was created. */
  readonly created?: string;
  /** An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
 */
  credentials?: number[];
  /** This Service's unique ID.
 */
  readonly id?: number;
  /** The label for this Service. This is for display purposes only.
 */
  label?: string;
  /** Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
 */
  notes?: string | null;
  /** The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
 */
  region?: string;
  /** How this Service is monitored.
 */
  service_type?: GetManagedServices200DataItemServiceType;
  /** The current status of this Service.
 */
  readonly status?: GetManagedServices200DataItemStatus;
  /** How long to wait, in seconds, for a response before considering the Service to be down.
 */
  timeout?: number;
  /** When this Managed Service was last updated. */
  readonly updated?: string;
};

export type GetManagedServices200 = {
  data?: GetManagedServices200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateManagedLinodeSettingDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateManagedLinodeSettingDefault = {
  errors?: UpdateManagedLinodeSettingDefaultErrorsItem[];
};

/**
 * The SSH settings for this Linode.

 */
export type UpdateManagedLinodeSetting200Ssh = {
  /** If true, Linode special forces may access this Linode over ssh to respond to Issues.
 */
  access?: boolean;
  /** The IP Linode special forces should use to access this Linode
when responding to an Issue.

By default, any of a Linode's IP addresses can be used for incident response access.
 */
  ip?: string;
  /** The port Linode special forces should use to access this Linode
over ssh to respond to an Issue.

The default `null` value corresponds to port 22.
 */
  port?: number | null;
  /** The specific user, if any, Linode's special forces should use when accessing this
Linode to respond to an issue.

The default `null` value corresponds to the root user.
 */
  user?: string | null;
};

/**
 * Settings for a specific Linode related to Managed Services. There is one ManagedLinodeSettings object for each Linode on your Account.

 */
export type UpdateManagedLinodeSetting200 = {
  /**
   * The group of the Linode these Settings are for. This is for display purposes only.

   * @deprecated
   */
  readonly group?: string;
  /** The ID of the Linode these Settings are for.
 */
  readonly id?: number;
  /** The label of the Linode these Settings are for.
 */
  readonly label?: string;
  /** The SSH settings for this Linode.
 */
  ssh?: UpdateManagedLinodeSetting200Ssh;
};

/**
 * The SSH settings for this Linode.

 */
export type UpdateManagedLinodeSettingBodySsh = {
  /** If true, Linode special forces may access this Linode over ssh to respond to Issues.
 */
  access?: boolean;
  /** The IP Linode special forces should use to access this Linode
when responding to an Issue.

By default, any of a Linode's IP addresses can be used for incident response access.
 */
  ip?: string;
  /** The port Linode special forces should use to access this Linode
over ssh to respond to an Issue.

The default `null` value corresponds to port 22.
 */
  port?: number | null;
  /** The specific user, if any, Linode's special forces should use when accessing this
Linode to respond to an issue.

The default `null` value corresponds to the root user.
 */
  user?: string | null;
};

/**
 * Settings for a specific Linode related to Managed Services. There is one ManagedLinodeSettings object for each Linode on your Account.

 */
export type UpdateManagedLinodeSettingBody = {
  /**
   * The group of the Linode these Settings are for. This is for display purposes only.

   * @deprecated
   */
  readonly group?: string;
  /** The ID of the Linode these Settings are for.
 */
  readonly id?: number;
  /** The label of the Linode these Settings are for.
 */
  readonly label?: string;
  /** The SSH settings for this Linode.
 */
  ssh?: UpdateManagedLinodeSettingBodySsh;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedLinodeSettingDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedLinodeSettingDefault = {
  errors?: GetManagedLinodeSettingDefaultErrorsItem[];
};

/**
 * The SSH settings for this Linode.

 */
export type GetManagedLinodeSetting200Ssh = {
  /** If true, Linode special forces may access this Linode over ssh to respond to Issues.
 */
  access?: boolean;
  /** The IP Linode special forces should use to access this Linode
when responding to an Issue.

By default, any of a Linode's IP addresses can be used for incident response access.
 */
  ip?: string;
  /** The port Linode special forces should use to access this Linode
over ssh to respond to an Issue.

The default `null` value corresponds to port 22.
 */
  port?: number | null;
  /** The specific user, if any, Linode's special forces should use when accessing this
Linode to respond to an issue.

The default `null` value corresponds to the root user.
 */
  user?: string | null;
};

/**
 * Settings for a specific Linode related to Managed Services. There is one ManagedLinodeSettings object for each Linode on your Account.

 */
export type GetManagedLinodeSetting200 = {
  /**
   * The group of the Linode these Settings are for. This is for display purposes only.

   * @deprecated
   */
  readonly group?: string;
  /** The ID of the Linode these Settings are for.
 */
  readonly id?: number;
  /** The label of the Linode these Settings are for.
 */
  readonly label?: string;
  /** The SSH settings for this Linode.
 */
  ssh?: GetManagedLinodeSetting200Ssh;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedLinodeSettingsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedLinodeSettingsDefault = {
  errors?: GetManagedLinodeSettingsDefaultErrorsItem[];
};

/**
 * The SSH settings for this Linode.

 */
export type GetManagedLinodeSettings200DataItemSsh = {
  /** If true, Linode special forces may access this Linode over ssh to respond to Issues.
 */
  access?: boolean;
  /** The IP Linode special forces should use to access this Linode
when responding to an Issue.

By default, any of a Linode's IP addresses can be used for incident response access.
 */
  ip?: string;
  /** The port Linode special forces should use to access this Linode
over ssh to respond to an Issue.

The default `null` value corresponds to port 22.
 */
  port?: number | null;
  /** The specific user, if any, Linode's special forces should use when accessing this
Linode to respond to an issue.

The default `null` value corresponds to the root user.
 */
  user?: string | null;
};

/**
 * Settings for a specific Linode related to Managed Services. There is one ManagedLinodeSettings object for each Linode on your Account.

 */
export type GetManagedLinodeSettings200DataItem = {
  /**
   * The group of the Linode these Settings are for. This is for display purposes only.

   * @deprecated
   */
  readonly group?: string;
  /** The ID of the Linode these Settings are for.
 */
  readonly id?: number;
  /** The label of the Linode these Settings are for.
 */
  readonly label?: string;
  /** The SSH settings for this Linode.
 */
  ssh?: GetManagedLinodeSettings200DataItemSsh;
};

export type GetManagedLinodeSettings200 = {
  data?: GetManagedLinodeSettings200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetManagedLinodeSettingsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedIssueDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedIssueDefault = {
  errors?: GetManagedIssueDefaultErrorsItem[];
};

/**
 * The type of entity this is. In this case, it is always a Ticket.

 */
export type GetManagedIssue200EntityType = typeof GetManagedIssue200EntityType[keyof typeof GetManagedIssue200EntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetManagedIssue200EntityType = {
  ticket: 'ticket',
} as const;

/**
 * The ticket this Managed Issue opened.

 */
export type GetManagedIssue200Entity = {
  /** This ticket's ID
 */
  readonly id?: number;
  /** The summary for this Ticket.
 */
  readonly label?: string;
  /** The type of entity this is. In this case, it is always a Ticket.
 */
  readonly type?: GetManagedIssue200EntityType;
  /** The relative URL where you can access this Ticket.
 */
  readonly url?: string;
};

/**
 * An Issue that was detected with a service Linode is managing.

 */
export type GetManagedIssue200 = {
  /** When this Issue was created. Issues are created in response to issues detected with Managed Services, so this is also when the Issue was detected.
 */
  readonly created?: string;
  /** The ticket this Managed Issue opened.
 */
  readonly entity?: GetManagedIssue200Entity;
  /** This Issue's unique ID.
 */
  readonly id?: number;
  /** An array of Managed Service IDs that were affected by this Issue.
 */
  readonly services?: number[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedIssuesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedIssuesDefault = {
  errors?: GetManagedIssuesDefaultErrorsItem[];
};

export type GetManagedIssues200 = {
  data?: GetManagedIssues200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The type of entity this is. In this case, it is always a Ticket.

 */
export type GetManagedIssues200DataItemEntityType = typeof GetManagedIssues200DataItemEntityType[keyof typeof GetManagedIssues200DataItemEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetManagedIssues200DataItemEntityType = {
  ticket: 'ticket',
} as const;

/**
 * The ticket this Managed Issue opened.

 */
export type GetManagedIssues200DataItemEntity = {
  /** This ticket's ID
 */
  readonly id?: number;
  /** The summary for this Ticket.
 */
  readonly label?: string;
  /** The type of entity this is. In this case, it is always a Ticket.
 */
  readonly type?: GetManagedIssues200DataItemEntityType;
  /** The relative URL where you can access this Ticket.
 */
  readonly url?: string;
};

/**
 * An Issue that was detected with a service Linode is managing.

 */
export type GetManagedIssues200DataItem = {
  /** When this Issue was created. Issues are created in response to issues detected with Managed Services, so this is also when the Issue was detected.
 */
  readonly created?: string;
  /** The ticket this Managed Issue opened.
 */
  readonly entity?: GetManagedIssues200DataItemEntity;
  /** This Issue's unique ID.
 */
  readonly id?: number;
  /** An array of Managed Service IDs that were affected by this Issue.
 */
  readonly services?: number[];
};

export type GetManagedIssuesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ViewManagedSSHKeyDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ViewManagedSSHKeyDefault = {
  errors?: ViewManagedSSHKeyDefaultErrorsItem[];
};

/**
 * A unique SSH public key that allows Linode's special forces to access a Managed server to respond to Issues.

 */
export type ViewManagedSSHKey200 = {
  /** The unique SSH public key assigned to your Linode account's Managed service.
 */
  readonly ssh_key?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteManagedCredentialDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteManagedCredentialDefault = {
  errors?: DeleteManagedCredentialDefaultErrorsItem[];
};

export type DeleteManagedCredential200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateManagedCredentialUsernamePasswordDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateManagedCredentialUsernamePasswordDefault = {
  errors?: UpdateManagedCredentialUsernamePasswordDefaultErrorsItem[];
};

export type UpdateManagedCredentialUsernamePassword200 = { [key: string]: any };

export type UpdateManagedCredentialUsernamePasswordBody = {
  /** The password to use when accessing the Managed Service.
 */
  password: string;
  /** The username to use when accessing the Managed Service.
 */
  username?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateManagedCredentialDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateManagedCredentialDefault = {
  errors?: UpdateManagedCredentialDefaultErrorsItem[];
};

/**
 * A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.

 */
export type UpdateManagedCredential200 = {
  /** This Credential's unique ID.
 */
  readonly id?: number;
  /** The unique label for this Credential. This is for display purposes only.
 */
  label?: string;
  /** The date this Credential was last decrypted by a member of Linode special forces.
 */
  readonly last_decrypted?: string;
};

/**
 * A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.

 */
export type UpdateManagedCredentialBody = {
  /** This Credential's unique ID.
 */
  readonly id?: number;
  /** The unique label for this Credential. This is for display purposes only.
 */
  label?: string;
  /** The date this Credential was last decrypted by a member of Linode special forces.
 */
  readonly last_decrypted?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedCredentialDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedCredentialDefault = {
  errors?: GetManagedCredentialDefaultErrorsItem[];
};

/**
 * A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.

 */
export type GetManagedCredential200 = {
  /** This Credential's unique ID.
 */
  readonly id?: number;
  /** The unique label for this Credential. This is for display purposes only.
 */
  label?: string;
  /** The date this Credential was last decrypted by a member of Linode special forces.
 */
  readonly last_decrypted?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateManagedCredentialDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateManagedCredentialDefault = {
  errors?: CreateManagedCredentialDefaultErrorsItem[];
};

/**
 * A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.

 */
export type CreateManagedCredential200 = {
  /** This Credential's unique ID.
 */
  readonly id?: number;
  /** The unique label for this Credential. This is for display purposes only.
 */
  label?: string;
  /** The date this Credential was last decrypted by a member of Linode special forces.
 */
  readonly last_decrypted?: string;
};

export type CreateManagedCredentialBodyAllOfTwo = {
  /** The password to use when accessing the Managed Service.
 */
  password?: string;
  /** The username to use when accessing the Managed Service.
 */
  username?: string;
};

/**
 * A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.

 */
export type CreateManagedCredentialBodyAllOf = {
  /** This Credential's unique ID.
 */
  readonly id?: number;
  /** The unique label for this Credential. This is for display purposes only.
 */
  label?: string;
  /** The date this Credential was last decrypted by a member of Linode special forces.
 */
  readonly last_decrypted?: string;
};

export type CreateManagedCredentialBody = CreateManagedCredentialBodyAllOf & CreateManagedCredentialBodyAllOfTwo;

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedCredentialsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedCredentialsDefault = {
  errors?: GetManagedCredentialsDefaultErrorsItem[];
};

/**
 * A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.

 */
export type GetManagedCredentials200DataItem = {
  /** This Credential's unique ID.
 */
  readonly id?: number;
  /** The unique label for this Credential. This is for display purposes only.
 */
  label?: string;
  /** The date this Credential was last decrypted by a member of Linode special forces.
 */
  readonly last_decrypted?: string;
};

export type GetManagedCredentials200 = {
  data?: GetManagedCredentials200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetManagedCredentialsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteManagedContactDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteManagedContactDefault = {
  errors?: DeleteManagedContactDefaultErrorsItem[];
};

export type DeleteManagedContact200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateManagedContactDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateManagedContactDefault = {
  errors?: UpdateManagedContactDefaultErrorsItem[];
};

/**
 * Information about how to reach this Contact by phone.

 */
export type UpdateManagedContact200Phone = {
  /** This Contact's primary phone number.
 */
  primary?: string | null;
  /** This Contact's secondary phone number.
 */
  secondary?: string | null;
};

/**
 * Information about someone Linode's special forces may contact in case an issue is detected with a manager service.

 */
export type UpdateManagedContact200 = {
  /** The address to email this Contact to alert them of issues.
 */
  email?: string;
  /** A grouping for this Contact. This is for display purposes only.
 */
  group?: string | null;
  /** This Contact's unique ID.
 */
  readonly id?: number;
  /** The name of this Contact.
 */
  name?: string;
  /** Information about how to reach this Contact by phone.
 */
  phone?: UpdateManagedContact200Phone;
  /** When this Contact was last updated.
 */
  readonly updated?: string;
};

/**
 * Information about how to reach this Contact by phone.

 */
export type UpdateManagedContactBodyPhone = {
  /** This Contact's primary phone number.
 */
  primary?: string | null;
  /** This Contact's secondary phone number.
 */
  secondary?: string | null;
};

/**
 * Information about someone Linode's special forces may contact in case an issue is detected with a manager service.

 */
export type UpdateManagedContactBody = {
  /** The address to email this Contact to alert them of issues.
 */
  email?: string;
  /** A grouping for this Contact. This is for display purposes only.
 */
  group?: string | null;
  /** This Contact's unique ID.
 */
  readonly id?: number;
  /** The name of this Contact.
 */
  name?: string;
  /** Information about how to reach this Contact by phone.
 */
  phone?: UpdateManagedContactBodyPhone;
  /** When this Contact was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedContactDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedContactDefault = {
  errors?: GetManagedContactDefaultErrorsItem[];
};

/**
 * Information about how to reach this Contact by phone.

 */
export type GetManagedContact200Phone = {
  /** This Contact's primary phone number.
 */
  primary?: string | null;
  /** This Contact's secondary phone number.
 */
  secondary?: string | null;
};

/**
 * Information about someone Linode's special forces may contact in case an issue is detected with a manager service.

 */
export type GetManagedContact200 = {
  /** The address to email this Contact to alert them of issues.
 */
  email?: string;
  /** A grouping for this Contact. This is for display purposes only.
 */
  group?: string | null;
  /** This Contact's unique ID.
 */
  readonly id?: number;
  /** The name of this Contact.
 */
  name?: string;
  /** Information about how to reach this Contact by phone.
 */
  phone?: GetManagedContact200Phone;
  /** When this Contact was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateManagedContactDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateManagedContactDefault = {
  errors?: CreateManagedContactDefaultErrorsItem[];
};

/**
 * Information about how to reach this Contact by phone.

 */
export type CreateManagedContact200Phone = {
  /** This Contact's primary phone number.
 */
  primary?: string | null;
  /** This Contact's secondary phone number.
 */
  secondary?: string | null;
};

/**
 * Information about someone Linode's special forces may contact in case an issue is detected with a manager service.

 */
export type CreateManagedContact200 = {
  /** The address to email this Contact to alert them of issues.
 */
  email?: string;
  /** A grouping for this Contact. This is for display purposes only.
 */
  group?: string | null;
  /** This Contact's unique ID.
 */
  readonly id?: number;
  /** The name of this Contact.
 */
  name?: string;
  /** Information about how to reach this Contact by phone.
 */
  phone?: CreateManagedContact200Phone;
  /** When this Contact was last updated.
 */
  readonly updated?: string;
};

/**
 * Information about how to reach this Contact by phone.

 */
export type CreateManagedContactBodyPhone = {
  /** This Contact's primary phone number.
 */
  primary?: string | null;
  /** This Contact's secondary phone number.
 */
  secondary?: string | null;
};

/**
 * Information about someone Linode's special forces may contact in case an issue is detected with a manager service.

 */
export type CreateManagedContactBody = {
  /** The address to email this Contact to alert them of issues.
 */
  email?: string;
  /** A grouping for this Contact. This is for display purposes only.
 */
  group?: string | null;
  /** This Contact's unique ID.
 */
  readonly id?: number;
  /** The name of this Contact.
 */
  name?: string;
  /** Information about how to reach this Contact by phone.
 */
  phone?: CreateManagedContactBodyPhone;
  /** When this Contact was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetManagedContactsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetManagedContactsDefault = {
  errors?: GetManagedContactsDefaultErrorsItem[];
};

export type GetManagedContacts200 = {
  data?: GetManagedContacts200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * Information about how to reach this Contact by phone.

 */
export type GetManagedContacts200DataItemPhone = {
  /** This Contact's primary phone number.
 */
  primary?: string | null;
  /** This Contact's secondary phone number.
 */
  secondary?: string | null;
};

/**
 * Information about someone Linode's special forces may contact in case an issue is detected with a manager service.

 */
export type GetManagedContacts200DataItem = {
  /** The address to email this Contact to alert them of issues.
 */
  email?: string;
  /** A grouping for this Contact. This is for display purposes only.
 */
  group?: string | null;
  /** This Contact's unique ID.
 */
  readonly id?: number;
  /** The name of this Contact.
 */
  name?: string;
  /** Information about how to reach this Contact by phone.
 */
  phone?: GetManagedContacts200DataItemPhone;
  /** When this Contact was last updated.
 */
  readonly updated?: string;
};

export type GetManagedContactsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLongviewSubscriptionDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLongviewSubscriptionDefault = {
  errors?: GetLongviewSubscriptionDefaultErrorsItem[];
};

/**
 * Pricing information about this Subscription tier.

 */
export type GetLongviewSubscription200Price = {
  /** The hourly price, in US dollars, for this Subscription tier.
 */
  readonly hourly?: number;
  /** The maximum monthly price in US Dollars for this Subscription tier. You will never be charged more than this amount per month for this subscription.
 */
  readonly monthly?: number;
};

/**
 * The unique ID of this Subscription tier.

 */
export type GetLongviewSubscription200Id = typeof GetLongviewSubscription200Id[keyof typeof GetLongviewSubscription200Id];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLongviewSubscription200Id = {
  'longview-3': 'longview-3',
  'longview-10': 'longview-10',
  'longview-40': 'longview-40',
  'longview-100': 'longview-100',
} as const;

/**
 * A Longview Subscription represents a tier of Longview service you can subscribe to.

 */
export type GetLongviewSubscription200 = {
  /** The number of Longview Clients that may be created with this Subscription tier.
 */
  readonly clients_included?: number;
  /** The unique ID of this Subscription tier.
 */
  readonly id?: GetLongviewSubscription200Id;
  /** A display name for this Subscription tier.
 */
  readonly label?: string;
  /** Pricing information about this Subscription tier.
 */
  readonly price?: GetLongviewSubscription200Price;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLongviewSubscriptionsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLongviewSubscriptionsDefault = {
  errors?: GetLongviewSubscriptionsDefaultErrorsItem[];
};

/**
 * Pricing information about this Subscription tier.

 */
export type GetLongviewSubscriptions200DataItemPrice = {
  /** The hourly price, in US dollars, for this Subscription tier.
 */
  readonly hourly?: number;
  /** The maximum monthly price in US Dollars for this Subscription tier. You will never be charged more than this amount per month for this subscription.
 */
  readonly monthly?: number;
};

/**
 * The unique ID of this Subscription tier.

 */
export type GetLongviewSubscriptions200DataItemId = typeof GetLongviewSubscriptions200DataItemId[keyof typeof GetLongviewSubscriptions200DataItemId];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLongviewSubscriptions200DataItemId = {
  'longview-3': 'longview-3',
  'longview-10': 'longview-10',
  'longview-40': 'longview-40',
  'longview-100': 'longview-100',
} as const;

/**
 * A Longview Subscription represents a tier of Longview service you can subscribe to.

 */
export type GetLongviewSubscriptions200DataItem = {
  /** The number of Longview Clients that may be created with this Subscription tier.
 */
  readonly clients_included?: number;
  /** The unique ID of this Subscription tier.
 */
  readonly id?: GetLongviewSubscriptions200DataItemId;
  /** A display name for this Subscription tier.
 */
  readonly label?: string;
  /** Pricing information about this Subscription tier.
 */
  readonly price?: GetLongviewSubscriptions200DataItemPrice;
};

export type GetLongviewSubscriptions200 = {
  data?: GetLongviewSubscriptions200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetLongviewSubscriptionsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateLongviewPlanDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateLongviewPlanDefault = {
  errors?: UpdateLongviewPlanDefaultErrorsItem[];
};

/**
 * Pricing information about this Subscription tier.

 */
export type UpdateLongviewPlan200Price = {
  /** The hourly price, in US dollars, for this Subscription tier.
 */
  readonly hourly?: number;
  /** The maximum monthly price in US Dollars for this Subscription tier. You will never be charged more than this amount per month for this subscription.
 */
  readonly monthly?: number;
};

/**
 * The unique ID of this Subscription tier.

 */
export type UpdateLongviewPlan200Id = typeof UpdateLongviewPlan200Id[keyof typeof UpdateLongviewPlan200Id];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLongviewPlan200Id = {
  'longview-3': 'longview-3',
  'longview-10': 'longview-10',
  'longview-40': 'longview-40',
  'longview-100': 'longview-100',
} as const;

/**
 * A Longview Subscription represents a tier of Longview service you can subscribe to.

 */
export type UpdateLongviewPlan200 = {
  /** The number of Longview Clients that may be created with this Subscription tier.
 */
  readonly clients_included?: number;
  /** The unique ID of this Subscription tier.
 */
  readonly id?: UpdateLongviewPlan200Id;
  /** A display name for this Subscription tier.
 */
  readonly label?: string;
  /** Pricing information about this Subscription tier.
 */
  readonly price?: UpdateLongviewPlan200Price;
};

/**
 * The subscription ID for a particular Longview plan. A value of `null` corresponds to Longview Free.

You can send a request to the [List Longview Subscriptions](/docs/api/longview/#longview-subscriptions-list) endpoint to receive the details of each plan.

 */
export type UpdateLongviewPlanBodyLongviewSubscription = typeof UpdateLongviewPlanBodyLongviewSubscription[keyof typeof UpdateLongviewPlanBodyLongviewSubscription];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLongviewPlanBodyLongviewSubscription = {
  'longview-3': 'longview-3',
  'longview-10': 'longview-10',
  'longview-40': 'longview-40',
  'longview-100': 'longview-100',
  null: null,
} as const;

/**
 * Longview Plan object.

 */
export type UpdateLongviewPlanBody = {
  /** The subscription ID for a particular Longview plan. A value of `null` corresponds to Longview Free.

You can send a request to the [List Longview Subscriptions](/docs/api/longview/#longview-subscriptions-list) endpoint to receive the details of each plan.
 */
  longview_subscription?: UpdateLongviewPlanBodyLongviewSubscription;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLongviewPlanDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLongviewPlanDefault = {
  errors?: GetLongviewPlanDefaultErrorsItem[];
};

/**
 * Pricing information about this Subscription tier.

 */
export type GetLongviewPlan200Price = {
  /** The hourly price, in US dollars, for this Subscription tier.
 */
  readonly hourly?: number;
  /** The maximum monthly price in US Dollars for this Subscription tier. You will never be charged more than this amount per month for this subscription.
 */
  readonly monthly?: number;
};

/**
 * The unique ID of this Subscription tier.

 */
export type GetLongviewPlan200Id = typeof GetLongviewPlan200Id[keyof typeof GetLongviewPlan200Id];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLongviewPlan200Id = {
  'longview-3': 'longview-3',
  'longview-10': 'longview-10',
  'longview-40': 'longview-40',
  'longview-100': 'longview-100',
} as const;

/**
 * A Longview Subscription represents a tier of Longview service you can subscribe to.

 */
export type GetLongviewPlan200 = {
  /** The number of Longview Clients that may be created with this Subscription tier.
 */
  readonly clients_included?: number;
  /** The unique ID of this Subscription tier.
 */
  readonly id?: GetLongviewPlan200Id;
  /** A display name for this Subscription tier.
 */
  readonly label?: string;
  /** Pricing information about this Subscription tier.
 */
  readonly price?: GetLongviewPlan200Price;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteLongviewClientDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteLongviewClientDefault = {
  errors?: DeleteLongviewClientDefaultErrorsItem[];
};

export type DeleteLongviewClient200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateLongviewClientDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateLongviewClientDefault = {
  errors?: UpdateLongviewClientDefaultErrorsItem[];
};

/**
 * The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.

 */
export type UpdateLongviewClient200Apps = {
  /** If True, the Apache Longview Client module is monitoring Apache on your server.
 */
  readonly apache?: boolean;
  /** If True, the MySQL Longview Client modules is monitoring MySQL on your server.
 */
  readonly mysql?: boolean;
  /** If True, the Nginx Longview Client module is monitoring Nginx on your server.
 */
  readonly nginx?: boolean;
};

/**
 * A LongviewClient is a single monitor set up to track statistics about one of your servers.

 */
export type UpdateLongviewClient200 = {
  /** The API key for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly api_key?: string;
  /** The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.
 */
  readonly apps?: UpdateLongviewClient200Apps;
  /** When this Longview Client was created.
 */
  readonly created?: string;
  /** This Client's unique ID.
 */
  readonly id?: number;
  /** The install code for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly install_code?: string;
  /** This Client's unique label. This is for display purposes only.
 */
  label?: string;
  /** When this Longview Client was last updated.
 */
  readonly updated?: string;
};

/**
 * The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.

 */
export type UpdateLongviewClientBodyApps = {
  /** If True, the Apache Longview Client module is monitoring Apache on your server.
 */
  readonly apache?: boolean;
  /** If True, the MySQL Longview Client modules is monitoring MySQL on your server.
 */
  readonly mysql?: boolean;
  /** If True, the Nginx Longview Client module is monitoring Nginx on your server.
 */
  readonly nginx?: boolean;
};

/**
 * A LongviewClient is a single monitor set up to track statistics about one of your servers.

 */
export type UpdateLongviewClientBody = {
  /** The API key for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly api_key?: string;
  /** The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.
 */
  readonly apps?: UpdateLongviewClientBodyApps;
  /** When this Longview Client was created.
 */
  readonly created?: string;
  /** This Client's unique ID.
 */
  readonly id?: number;
  /** The install code for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly install_code?: string;
  /** This Client's unique label. This is for display purposes only.
 */
  label?: string;
  /** When this Longview Client was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLongviewClientDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLongviewClientDefault = {
  errors?: GetLongviewClientDefaultErrorsItem[];
};

/**
 * The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.

 */
export type GetLongviewClient200Apps = {
  /** If True, the Apache Longview Client module is monitoring Apache on your server.
 */
  readonly apache?: boolean;
  /** If True, the MySQL Longview Client modules is monitoring MySQL on your server.
 */
  readonly mysql?: boolean;
  /** If True, the Nginx Longview Client module is monitoring Nginx on your server.
 */
  readonly nginx?: boolean;
};

/**
 * A LongviewClient is a single monitor set up to track statistics about one of your servers.

 */
export type GetLongviewClient200 = {
  /** The API key for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly api_key?: string;
  /** The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.
 */
  readonly apps?: GetLongviewClient200Apps;
  /** When this Longview Client was created.
 */
  readonly created?: string;
  /** This Client's unique ID.
 */
  readonly id?: number;
  /** The install code for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly install_code?: string;
  /** This Client's unique label. This is for display purposes only.
 */
  label?: string;
  /** When this Longview Client was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateLongviewClientDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateLongviewClientDefault = {
  errors?: CreateLongviewClientDefaultErrorsItem[];
};

/**
 * The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.

 */
export type CreateLongviewClient200Apps = {
  /** If True, the Apache Longview Client module is monitoring Apache on your server.
 */
  readonly apache?: boolean;
  /** If True, the MySQL Longview Client modules is monitoring MySQL on your server.
 */
  readonly mysql?: boolean;
  /** If True, the Nginx Longview Client module is monitoring Nginx on your server.
 */
  readonly nginx?: boolean;
};

/**
 * A LongviewClient is a single monitor set up to track statistics about one of your servers.

 */
export type CreateLongviewClient200 = {
  /** The API key for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly api_key?: string;
  /** The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.
 */
  readonly apps?: CreateLongviewClient200Apps;
  /** When this Longview Client was created.
 */
  readonly created?: string;
  /** This Client's unique ID.
 */
  readonly id?: number;
  /** The install code for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly install_code?: string;
  /** This Client's unique label. This is for display purposes only.
 */
  label?: string;
  /** When this Longview Client was last updated.
 */
  readonly updated?: string;
};

/**
 * The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.

 */
export type CreateLongviewClientBodyApps = {
  /** If True, the Apache Longview Client module is monitoring Apache on your server.
 */
  readonly apache?: boolean;
  /** If True, the MySQL Longview Client modules is monitoring MySQL on your server.
 */
  readonly mysql?: boolean;
  /** If True, the Nginx Longview Client module is monitoring Nginx on your server.
 */
  readonly nginx?: boolean;
};

/**
 * A LongviewClient is a single monitor set up to track statistics about one of your servers.

 */
export type CreateLongviewClientBody = {
  /** The API key for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly api_key?: string;
  /** The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.
 */
  readonly apps?: CreateLongviewClientBodyApps;
  /** When this Longview Client was created.
 */
  readonly created?: string;
  /** This Client's unique ID.
 */
  readonly id?: number;
  /** The install code for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly install_code?: string;
  /** This Client's unique label. This is for display purposes only.
 */
  label?: string;
  /** When this Longview Client was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLongviewClientsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLongviewClientsDefault = {
  errors?: GetLongviewClientsDefaultErrorsItem[];
};

/**
 * The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.

 */
export type GetLongviewClients200DataItemApps = {
  /** If True, the Apache Longview Client module is monitoring Apache on your server.
 */
  readonly apache?: boolean;
  /** If True, the MySQL Longview Client modules is monitoring MySQL on your server.
 */
  readonly mysql?: boolean;
  /** If True, the Nginx Longview Client module is monitoring Nginx on your server.
 */
  readonly nginx?: boolean;
};

/**
 * A LongviewClient is a single monitor set up to track statistics about one of your servers.

 */
export type GetLongviewClients200DataItem = {
  /** The API key for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly api_key?: string;
  /** The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.
 */
  readonly apps?: GetLongviewClients200DataItemApps;
  /** When this Longview Client was created.
 */
  readonly created?: string;
  /** This Client's unique ID.
 */
  readonly id?: number;
  /** The install code for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly install_code?: string;
  /** This Client's unique label. This is for display purposes only.
 */
  label?: string;
  /** When this Longview Client was last updated.
 */
  readonly updated?: string;
};

export type GetLongviewClients200 = {
  data?: GetLongviewClients200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetLongviewClientsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLKEVersionDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLKEVersionDefault = {
  errors?: GetLKEVersionDefaultErrorsItem[];
};

/**
 * LKE versions

 */
export type GetLKEVersion200 = {
  /** A Kubernetes version number available for deployment to a Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version.
 */
  readonly id?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLKEVersionsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLKEVersionsDefault = {
  errors?: GetLKEVersionsDefaultErrorsItem[];
};

/**
 * LKE versions

 */
export type GetLKEVersions200DataItem = {
  /** A Kubernetes version number available for deployment to a Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version.
 */
  readonly id?: string;
};

export type GetLKEVersions200 = {
  data?: GetLKEVersions200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostLKECServiceTokenDeleteDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostLKECServiceTokenDeleteDefault = {
  errors?: PostLKECServiceTokenDeleteDefaultErrorsItem[];
};

export type PostLKECServiceTokenDelete200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostLKEClusterRegenerateDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostLKEClusterRegenerateDefault = {
  errors?: PostLKEClusterRegenerateDefaultErrorsItem[];
};

export type PostLKEClusterRegenerate200 = { [key: string]: any };

export type PostLKEClusterRegenerateBody = {
  /** Whether to delete and regenerate the Kubeconfig file for this Cluster.
 */
  kubeconfig?: boolean;
  /** Whether to delete and regenerate the service access token for this Cluster.
 */
  servicetoken?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteLKEClusterKubeconfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteLKEClusterKubeconfigDefault = {
  errors?: DeleteLKEClusterKubeconfigDefaultErrorsItem[];
};

export type DeleteLKEClusterKubeconfig200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLKEClusterKubeconfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLKEClusterKubeconfigDefault = {
  errors?: GetLKEClusterKubeconfigDefaultErrorsItem[];
};

export type GetLKEClusterKubeconfig200 = {
  /** The Base64-encoded Kubeconfig file for this Cluster.
 */
  readonly kubeconfig?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLKEClusterDashboardDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLKEClusterDashboardDefault = {
  errors?: GetLKEClusterDashboardDefaultErrorsItem[];
};

export type GetLKEClusterDashboard200 = {
  /** The Cluster Dashboard access URL. */
  url?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLKEClusterAPIEndpointsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLKEClusterAPIEndpointsDefault = {
  errors?: GetLKEClusterAPIEndpointsDefaultErrorsItem[];
};

/**
 * The Kubernetes API server endpoints for this cluster.

 */
export type GetLKEClusterAPIEndpoints200DataItem = {
  /** A Kubernetes API server endpoint for this cluster.
 */
  readonly endpoint?: string;
};

export type GetLKEClusterAPIEndpoints200 = {
  data?: GetLKEClusterAPIEndpoints200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostLKEClusterNodeRecycleDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostLKEClusterNodeRecycleDefault = {
  errors?: PostLKEClusterNodeRecycleDefaultErrorsItem[];
};

export type PostLKEClusterNodeRecycle200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteLKEClusterNodeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteLKEClusterNodeDefault = {
  errors?: DeleteLKEClusterNodeDefaultErrorsItem[];
};

export type DeleteLKEClusterNode200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLKEClusterNodeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLKEClusterNodeDefault = {
  errors?: GetLKEClusterNodeDefaultErrorsItem[];
};

/**
 * The creation status of this Node. This status is distinct from this Node's readiness as a Kubernetes Node Object as determined by the command `kubectl get nodes`.

`not_ready` indicates that the Linode is still being created.

`ready` indicates that the Linode has successfully been created and is running Kubernetes software.

 */
export type GetLKEClusterNode200Status = typeof GetLKEClusterNode200Status[keyof typeof GetLKEClusterNode200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLKEClusterNode200Status = {
  ready: 'ready',
  not_ready: 'not_ready',
} as const;

export type GetLKEClusterNode200 = {
  /** The Node's ID.
 */
  readonly id?: string;
  /** The Linode's ID. If no Linode is currently provisioned for this Node, this is `null`.
 */
  instance_id?: number;
  /** The creation status of this Node. This status is distinct from this Node's readiness as a Kubernetes Node Object as determined by the command `kubectl get nodes`.

`not_ready` indicates that the Linode is still being created.

`ready` indicates that the Linode has successfully been created and is running Kubernetes software.
 */
  status?: GetLKEClusterNode200Status;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostLKEClusterPoolRecycleDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostLKEClusterPoolRecycleDefault = {
  errors?: PostLKEClusterPoolRecycleDefaultErrorsItem[];
};

export type PostLKEClusterPoolRecycle200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteLKENodePoolDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteLKENodePoolDefault = {
  errors?: DeleteLKENodePoolDefaultErrorsItem[];
};

export type DeleteLKENodePool200 = { [key: string]: any };

/**
 * The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.

 */
export type PutLKENodePool200 = {
  /** When enabled, the number of nodes autoscales within the defined minimum and maximum values.
 */
  autoscaler?: PutLKENodePool200Autoscaler;
  /** The number of nodes in the Node Pool. */
  count?: number;
  /** This Node Pool's custom disk layout.
 */
  disks?: PutLKENodePool200DisksItem[];
  /** This Node Pool's unique ID.
 */
  id?: number;
  /** Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the instance_id will be returned as null.
 */
  nodes?: PutLKENodePool200NodesItem[];
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** The Linode Type for all of the nodes in the Node Pool. */
  type?: string;
};

/**
 * The Node's status as it pertains to being a Kubernetes node.

 */
export type PutLKENodePool200NodesItemStatus = typeof PutLKENodePool200NodesItemStatus[keyof typeof PutLKENodePool200NodesItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutLKENodePool200NodesItemStatus = {
  ready: 'ready',
  not_ready: 'not_ready',
} as const;

/**
 * Status information for a Node which is a member of a Kubernetes cluster.

 */
export type PutLKENodePool200NodesItem = {
  /** The Node's ID.
 */
  readonly id?: string;
  /** The Linode's ID. When no Linode is currently provisioned for this Node, this will be null.
 */
  readonly instance_id?: string;
  /** The Node's status as it pertains to being a Kubernetes node.
 */
  readonly status?: PutLKENodePool200NodesItemStatus;
};

/**
 * This custom disk partition's filesystem type.

 */
export type PutLKENodePool200DisksItemType = typeof PutLKENodePool200DisksItemType[keyof typeof PutLKENodePool200DisksItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutLKENodePool200DisksItemType = {
  raw: 'raw',
  ext4: 'ext4',
} as const;

/**
 * The values to assign to each partition in this Node Pool's custom disk layout.

 */
export type PutLKENodePool200DisksItem = {
  /** The size of this custom disk partition in MB.

  * The size of this disk partition must not exceed the capacity of the node's plan type.
 */
  size?: number;
  /** This custom disk partition's filesystem type.
 */
  type?: PutLKENodePool200DisksItemType;
};

/**
 * When enabled, the number of nodes autoscales within the defined minimum and maximum values.

 */
export type PutLKENodePool200Autoscaler = {
  /** Whether autoscaling is enabled for this Node Pool. Defaults to `false`. */
  enabled?: boolean;
  /** The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  max?: number;
  /** The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  min?: number;
};

/**
 * When enabled, the number of nodes autoscales within the defined minimum and maximum values.

When making a request, `max` and `min` require each other.

 */
export type PutLKENodePoolBodyAutoscaler = {
  /** Whether autoscaling is enabled for this Node Pool. Defaults to `false`. */
  enabled?: boolean;
  /** The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. Defaults to the value provided by the `count` field.
 */
  max?: number;
  /** The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  min?: number;
};

export type PutLKENodePoolBody = {
  /** When enabled, the number of nodes autoscales within the defined minimum and maximum values.

When making a request, `max` and `min` require each other.
 */
  autoscaler?: PutLKENodePoolBodyAutoscaler;
  /** The number of nodes in the Node Pool. */
  count?: number;
};

/**
 * The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.

 */
export type GetLKENodePool200 = {
  /** When enabled, the number of nodes autoscales within the defined minimum and maximum values.
 */
  autoscaler?: GetLKENodePool200Autoscaler;
  /** The number of nodes in the Node Pool. */
  count?: number;
  /** This Node Pool's custom disk layout.
 */
  disks?: GetLKENodePool200DisksItem[];
  /** This Node Pool's unique ID.
 */
  id?: number;
  /** Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the instance_id will be returned as null.
 */
  nodes?: GetLKENodePool200NodesItem[];
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** The Linode Type for all of the nodes in the Node Pool. */
  type?: string;
};

/**
 * The Node's status as it pertains to being a Kubernetes node.

 */
export type GetLKENodePool200NodesItemStatus = typeof GetLKENodePool200NodesItemStatus[keyof typeof GetLKENodePool200NodesItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLKENodePool200NodesItemStatus = {
  ready: 'ready',
  not_ready: 'not_ready',
} as const;

/**
 * Status information for a Node which is a member of a Kubernetes cluster.

 */
export type GetLKENodePool200NodesItem = {
  /** The Node's ID.
 */
  readonly id?: string;
  /** The Linode's ID. When no Linode is currently provisioned for this Node, this will be null.
 */
  readonly instance_id?: string;
  /** The Node's status as it pertains to being a Kubernetes node.
 */
  readonly status?: GetLKENodePool200NodesItemStatus;
};

/**
 * This custom disk partition's filesystem type.

 */
export type GetLKENodePool200DisksItemType = typeof GetLKENodePool200DisksItemType[keyof typeof GetLKENodePool200DisksItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLKENodePool200DisksItemType = {
  raw: 'raw',
  ext4: 'ext4',
} as const;

/**
 * The values to assign to each partition in this Node Pool's custom disk layout.

 */
export type GetLKENodePool200DisksItem = {
  /** The size of this custom disk partition in MB.

  * The size of this disk partition must not exceed the capacity of the node's plan type.
 */
  size?: number;
  /** This custom disk partition's filesystem type.
 */
  type?: GetLKENodePool200DisksItemType;
};

/**
 * When enabled, the number of nodes autoscales within the defined minimum and maximum values.

 */
export type GetLKENodePool200Autoscaler = {
  /** Whether autoscaling is enabled for this Node Pool. Defaults to `false`. */
  enabled?: boolean;
  /** The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  max?: number;
  /** The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  min?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostLKEClusterRecycleDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostLKEClusterRecycleDefault = {
  errors?: PostLKEClusterRecycleDefaultErrorsItem[];
};

export type PostLKEClusterRecycle200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostLKEClusterPoolsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostLKEClusterPoolsDefault = {
  errors?: PostLKEClusterPoolsDefaultErrorsItem[];
};

/**
 * The Node's status as it pertains to being a Kubernetes node.

 */
export type PostLKEClusterPools200NodesItemStatus = typeof PostLKEClusterPools200NodesItemStatus[keyof typeof PostLKEClusterPools200NodesItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostLKEClusterPools200NodesItemStatus = {
  ready: 'ready',
  not_ready: 'not_ready',
} as const;

/**
 * Status information for a Node which is a member of a Kubernetes cluster.

 */
export type PostLKEClusterPools200NodesItem = {
  /** The Node's ID.
 */
  readonly id?: string;
  /** The Linode's ID. When no Linode is currently provisioned for this Node, this will be null.
 */
  readonly instance_id?: string;
  /** The Node's status as it pertains to being a Kubernetes node.
 */
  readonly status?: PostLKEClusterPools200NodesItemStatus;
};

/**
 * This custom disk partition's filesystem type.

 */
export type PostLKEClusterPools200DisksItemType = typeof PostLKEClusterPools200DisksItemType[keyof typeof PostLKEClusterPools200DisksItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostLKEClusterPools200DisksItemType = {
  raw: 'raw',
  ext4: 'ext4',
} as const;

/**
 * The values to assign to each partition in this Node Pool's custom disk layout.

 */
export type PostLKEClusterPools200DisksItem = {
  /** The size of this custom disk partition in MB.

  * The size of this disk partition must not exceed the capacity of the node's plan type.
 */
  size?: number;
  /** This custom disk partition's filesystem type.
 */
  type?: PostLKEClusterPools200DisksItemType;
};

/**
 * When enabled, the number of nodes autoscales within the defined minimum and maximum values.

 */
export type PostLKEClusterPools200Autoscaler = {
  /** Whether autoscaling is enabled for this Node Pool. Defaults to `false`. */
  enabled?: boolean;
  /** The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  max?: number;
  /** The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  min?: number;
};

/**
 * The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.

 */
export type PostLKEClusterPools200 = {
  /** When enabled, the number of nodes autoscales within the defined minimum and maximum values.
 */
  autoscaler?: PostLKEClusterPools200Autoscaler;
  /** The number of nodes in the Node Pool. */
  count?: number;
  /** This Node Pool's custom disk layout.
 */
  disks?: PostLKEClusterPools200DisksItem[];
  /** This Node Pool's unique ID.
 */
  id?: number;
  /** Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the instance_id will be returned as null.
 */
  nodes?: PostLKEClusterPools200NodesItem[];
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** The Linode Type for all of the nodes in the Node Pool. */
  type?: string;
};

/**
 * This custom disk partition's filesystem type.

 */
export type PostLKEClusterPoolsBodyAllOfDisksItemType = typeof PostLKEClusterPoolsBodyAllOfDisksItemType[keyof typeof PostLKEClusterPoolsBodyAllOfDisksItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostLKEClusterPoolsBodyAllOfDisksItemType = {
  raw: 'raw',
  ext4: 'ext4',
} as const;

/**
 * The values to assign to each partition in this Node Pool's custom disk layout.

 */
export type PostLKEClusterPoolsBodyAllOfDisksItem = {
  /** The size of this custom disk partition in MB.

  * The size of this disk partition must not exceed the capacity of the node's plan type.
 */
  size?: number;
  /** This custom disk partition's filesystem type.
 */
  type?: PostLKEClusterPoolsBodyAllOfDisksItemType;
};

/**
 * When enabled, the number of nodes autoscales within the defined minimum and maximum values.

When making a request, `max` and `min` require each other.

 */
export type PostLKEClusterPoolsBodyAllOfAutoscaler = {
  /** Whether autoscaling is enabled for this Node Pool. Defaults to `false`. */
  enabled?: boolean;
  /** The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. Defaults to the value provided by the `count` field.
 */
  max?: number;
  /** The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  min?: number;
};

/**
 * Specifies a collection of Linodes which will be members of a Kubernetes cluster.

 */
export type PostLKEClusterPoolsBodyAllOf = {
  /** When enabled, the number of nodes autoscales within the defined minimum and maximum values.

When making a request, `max` and `min` require each other.
 */
  autoscaler?: PostLKEClusterPoolsBodyAllOfAutoscaler;
  /** The number of nodes in the Node Pool. */
  count?: number;
  /** **Note**: This field should be omitted except for special use cases. The disks specified here are
partitions in *addition* to the primary partition and reduce the size of the primary partition,
which can lead to stability problems for the Node.

This Node Pool's custom disk layout. Each item in this array will create a new disk
partition for each node in this Node Pool.

  * The custom disk layout is applied to each node in this Node Pool.
  * The maximum number of custom disk partitions that can be configured is 7.
  * Once the requested disk paritions are allocated, the remaining disk space is allocated to the node's boot disk.
  * A Node Pool's custom disk layout is immutable over the lifetime of the Node Pool.
 */
  disks?: PostLKEClusterPoolsBodyAllOfDisksItem[];
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** The Linode Type for all of the nodes in the Node Pool. */
  type?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLKEClusterPoolsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLKEClusterPoolsDefault = {
  errors?: GetLKEClusterPoolsDefaultErrorsItem[];
};

/**
 * The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.

 */
export type GetLKEClusterPools200DataItem = {
  /** When enabled, the number of nodes autoscales within the defined minimum and maximum values.
 */
  autoscaler?: GetLKEClusterPools200DataItemAutoscaler;
  /** The number of nodes in the Node Pool. */
  count?: number;
  /** This Node Pool's custom disk layout.
 */
  disks?: GetLKEClusterPools200DataItemDisksItem[];
  /** This Node Pool's unique ID.
 */
  id?: number;
  /** Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the instance_id will be returned as null.
 */
  nodes?: GetLKEClusterPools200DataItemNodesItem[];
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** The Linode Type for all of the nodes in the Node Pool. */
  type?: string;
};

export type GetLKEClusterPools200 = {
  data?: GetLKEClusterPools200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The Node's status as it pertains to being a Kubernetes node.

 */
export type GetLKEClusterPools200DataItemNodesItemStatus = typeof GetLKEClusterPools200DataItemNodesItemStatus[keyof typeof GetLKEClusterPools200DataItemNodesItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLKEClusterPools200DataItemNodesItemStatus = {
  ready: 'ready',
  not_ready: 'not_ready',
} as const;

/**
 * Status information for a Node which is a member of a Kubernetes cluster.

 */
export type GetLKEClusterPools200DataItemNodesItem = {
  /** The Node's ID.
 */
  readonly id?: string;
  /** The Linode's ID. When no Linode is currently provisioned for this Node, this will be null.
 */
  readonly instance_id?: string;
  /** The Node's status as it pertains to being a Kubernetes node.
 */
  readonly status?: GetLKEClusterPools200DataItemNodesItemStatus;
};

/**
 * This custom disk partition's filesystem type.

 */
export type GetLKEClusterPools200DataItemDisksItemType = typeof GetLKEClusterPools200DataItemDisksItemType[keyof typeof GetLKEClusterPools200DataItemDisksItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLKEClusterPools200DataItemDisksItemType = {
  raw: 'raw',
  ext4: 'ext4',
} as const;

/**
 * The values to assign to each partition in this Node Pool's custom disk layout.

 */
export type GetLKEClusterPools200DataItemDisksItem = {
  /** The size of this custom disk partition in MB.

  * The size of this disk partition must not exceed the capacity of the node's plan type.
 */
  size?: number;
  /** This custom disk partition's filesystem type.
 */
  type?: GetLKEClusterPools200DataItemDisksItemType;
};

/**
 * When enabled, the number of nodes autoscales within the defined minimum and maximum values.

 */
export type GetLKEClusterPools200DataItemAutoscaler = {
  /** Whether autoscaling is enabled for this Node Pool. Defaults to `false`. */
  enabled?: boolean;
  /** The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  max?: number;
  /** The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  min?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteLKEClusterDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteLKEClusterDefault = {
  errors?: DeleteLKEClusterDefaultErrorsItem[];
};

export type DeleteLKECluster200 = { [key: string]: any };

export type PutLKECluster200 = {
  /** When this Kubernetes cluster was created. */
  readonly created?: string;
  /** The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.
 */
  k8s_version?: string;
  /** This Kubernetes cluster's unique label for display purposes only.
Labels have the following constraints:

  * UTF-8 characters will be returned by the API using escape
    sequences of their Unicode code points. For example, the
    Japanese character *„Åã* is 3 bytes in UTF-8 (`0xE382AB`). Its
    Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this
    character and the API will return it as the escape sequence
    using six 1 byte characters which represent 2 bytes of Unicode
    code point (`"\u30ab"`).
  * 4 byte UTF-8 characters are not supported.
  * If the label is entirely composed of UTF-8 characters, the API
    response will return the code points using up to 193 1 byte
    characters.
 */
  label?: string;
  /** This Kubernetes cluster's location. */
  region?: string;
  /** An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only. To delete a tag, exclude it from your `tags` array.
 */
  tags?: string[];
  /** When this Kubernetes cluster was updated. */
  readonly updated?: string;
};

/**
 * Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components.

Enabling High Availability for LKE is an **irreversible** change.

When upgrading pre-existing LKE clusters to use the HA Control Plane, the following changes will additionally occur:

- All nodes will be deleted and new nodes will be created to replace them.

- Any local storage (such as `hostPath` volumes) will be erased.

- The upgrade process may take several minutes to complete, as nodes will be replaced on a rolling basis.

 */
export type PutLKEClusterBodyControlPlane = {
  /** Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.
 */
  high_availability?: boolean;
};

export type PutLKEClusterBody = {
  /** Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components.

Enabling High Availability for LKE is an **irreversible** change.

When upgrading pre-existing LKE clusters to use the HA Control Plane, the following changes will additionally occur:

- All nodes will be deleted and new nodes will be created to replace them.

- Any local storage (such as `hostPath` volumes) will be erased.

- The upgrade process may take several minutes to complete, as nodes will be replaced on a rolling basis.
 */
  control_plane?: PutLKEClusterBodyControlPlane;
  /** The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;. New and recycled Nodes in this cluster will be installed with the latest available patch for the Cluster's Kubernetes version.

When upgrading the Kubernetes version, only the next latest minor version following the current version can be deployed. For example, a cluster with Kubernetes version 1.19 can be upgraded to version 1.20, but not directly to 1.21.

The Kubernetes version of a cluster can not be downgraded.
 */
  k8s_version?: string;
  /** This Kubernetes cluster's unique label for display purposes only.
Labels have the following constraints:

  * UTF-8 characters will be returned by the API using escape
    sequences of their Unicode code points. For example, the
    Japanese character *„Åã* is 3 bytes in UTF-8 (`0xE382AB`). Its
    Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this
    character and the API will return it as the escape sequence
    using six 1 byte characters which represent 2 bytes of Unicode
    code point (`"\u30ab"`).
  * 4 byte UTF-8 characters are not supported.
  * If the label is entirely composed of UTF-8 characters, the API
    response will return the code points using up to 193 1 byte
    characters.
 */
  label?: string;
  /** An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only. To delete a tag, exclude it from your `tags` array.
 */
  tags?: string[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLKEClusterDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLKEClusterDefault = {
  errors?: GetLKEClusterDefaultErrorsItem[];
};

/**
 * Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.

 */
export type GetLKECluster200ControlPlane = {
  /** Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.
 */
  high_availability?: boolean;
};

/**
 * A Kubernetes cluster.
 */
export type GetLKECluster200 = {
  /** Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.
 */
  control_plane?: GetLKECluster200ControlPlane;
  /** When this Kubernetes cluster was created. */
  readonly created?: string;
  /** This Kubernetes cluster's unique ID. */
  readonly id?: number;
  /** The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.
 */
  k8s_version?: string;
  /** This Kubernetes cluster's unique label for display purposes only.
Labels have the following constraints:

  * UTF-8 characters will be returned by the API using escape
    sequences of their Unicode code points. For example, the
    Japanese character *„Åã* is 3 bytes in UTF-8 (`0xE382AB`). Its
    Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this
    character and the API will return it as the escape sequence
    using six 1 byte characters which represent 2 bytes of Unicode
    code point (`"\u30ab"`).
  * 4 byte UTF-8 characters are not supported.
  * If the label is entirely composed of UTF-8 characters, the API
    response will return the code points using up to 193 1 byte
    characters.
 */
  label?: string;
  /** This Kubernetes cluster's location. */
  region?: string;
  /** An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Kubernetes cluster was updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateLKEClusterDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateLKEClusterDefault = {
  errors?: CreateLKEClusterDefaultErrorsItem[];
};

/**
 * Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.

 */
export type CreateLKECluster200ControlPlane = {
  /** Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.
 */
  high_availability?: boolean;
};

/**
 * A Kubernetes cluster.
 */
export type CreateLKECluster200 = {
  /** Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.
 */
  control_plane?: CreateLKECluster200ControlPlane;
  /** When this Kubernetes cluster was created. */
  readonly created?: string;
  /** This Kubernetes cluster's unique ID. */
  readonly id?: number;
  /** The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.
 */
  k8s_version?: string;
  /** This Kubernetes cluster's unique label for display purposes only.
Labels have the following constraints:

  * UTF-8 characters will be returned by the API using escape
    sequences of their Unicode code points. For example, the
    Japanese character *„Åã* is 3 bytes in UTF-8 (`0xE382AB`). Its
    Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this
    character and the API will return it as the escape sequence
    using six 1 byte characters which represent 2 bytes of Unicode
    code point (`"\u30ab"`).
  * 4 byte UTF-8 characters are not supported.
  * If the label is entirely composed of UTF-8 characters, the API
    response will return the code points using up to 193 1 byte
    characters.
 */
  label?: string;
  /** This Kubernetes cluster's location. */
  region?: string;
  /** An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Kubernetes cluster was updated. */
  readonly updated?: string;
};

export type CreateLKEClusterBody = {
  /** Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Availability for LKE is an **irreversible** change.
 */
  control_plane?: CreateLKEClusterBodyControlPlane;
  /** The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.
 */
  k8s_version: string;
  /** This Kubernetes cluster's unique label for display purposes only.
Labels have the following constraints:

  * UTF-8 characters will be returned by the API using escape
    sequences of their Unicode code points. For example, the
    Japanese character *„Åã* is 3 bytes in UTF-8 (`0xE382AB`). Its
    Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this
    character and the API will return it as the escape sequence
    using six 1 byte characters which represent 2 bytes of Unicode
    code point (`"\u30ab"`).
  * 4 byte UTF-8 characters are not supported.
  * If the label is entirely composed of UTF-8 characters, the API
    response will return the code points using up to 193 1 byte
    characters.
 */
  label: string;
  node_pools: CreateLKEClusterBodyNodePoolsItem[];
  /** This Kubernetes cluster's location. */
  region: string;
  /** An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
 */
  tags?: string[];
};

/**
 * This custom disk partition's filesystem type.

 */
export type CreateLKEClusterBodyNodePoolsItemDisksItemType = typeof CreateLKEClusterBodyNodePoolsItemDisksItemType[keyof typeof CreateLKEClusterBodyNodePoolsItemDisksItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateLKEClusterBodyNodePoolsItemDisksItemType = {
  raw: 'raw',
  ext4: 'ext4',
} as const;

/**
 * The values to assign to each partition in this Node Pool's custom disk layout.

 */
export type CreateLKEClusterBodyNodePoolsItemDisksItem = {
  /** The size of this custom disk partition in MB.

  * The size of this disk partition must not exceed the capacity of the node's plan type.
 */
  size?: number;
  /** This custom disk partition's filesystem type.
 */
  type?: CreateLKEClusterBodyNodePoolsItemDisksItemType;
};

/**
 * When enabled, the number of nodes autoscales within the defined minimum and maximum values.

When making a request, `max` and `min` require each other.

 */
export type CreateLKEClusterBodyNodePoolsItemAutoscaler = {
  /** Whether autoscaling is enabled for this Node Pool. Defaults to `false`. */
  enabled?: boolean;
  /** The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. Defaults to the value provided by the `count` field.
 */
  max?: number;
  /** The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  min?: number;
};

/**
 * Specifies a collection of Linodes which will be members of a Kubernetes cluster.

 */
export type CreateLKEClusterBodyNodePoolsItem = {
  /** When enabled, the number of nodes autoscales within the defined minimum and maximum values.

When making a request, `max` and `min` require each other.
 */
  autoscaler?: CreateLKEClusterBodyNodePoolsItemAutoscaler;
  /** The number of nodes in the Node Pool. */
  count?: number;
  /** **Note**: This field should be omitted except for special use cases. The disks specified here are
partitions in *addition* to the primary partition and reduce the size of the primary partition,
which can lead to stability problems for the Node.

This Node Pool's custom disk layout. Each item in this array will create a new disk
partition for each node in this Node Pool.

  * The custom disk layout is applied to each node in this Node Pool.
  * The maximum number of custom disk partitions that can be configured is 7.
  * Once the requested disk paritions are allocated, the remaining disk space is allocated to the node's boot disk.
  * A Node Pool's custom disk layout is immutable over the lifetime of the Node Pool.
 */
  disks?: CreateLKEClusterBodyNodePoolsItemDisksItem[];
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** The Linode Type for all of the nodes in the Node Pool. */
  type?: string;
};

/**
 * Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Availability for LKE is an **irreversible** change.

 */
export type CreateLKEClusterBodyControlPlane = {
  /** Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.
 */
  high_availability?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLKEClustersDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLKEClustersDefault = {
  errors?: GetLKEClustersDefaultErrorsItem[];
};

export type GetLKEClusters200 = {
  data?: GetLKEClusters200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.

 */
export type GetLKEClusters200DataItemControlPlane = {
  /** Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.
 */
  high_availability?: boolean;
};

/**
 * A Kubernetes cluster.
 */
export type GetLKEClusters200DataItem = {
  /** Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.
 */
  control_plane?: GetLKEClusters200DataItemControlPlane;
  /** When this Kubernetes cluster was created. */
  readonly created?: string;
  /** This Kubernetes cluster's unique ID. */
  readonly id?: number;
  /** The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.
 */
  k8s_version?: string;
  /** This Kubernetes cluster's unique label for display purposes only.
Labels have the following constraints:

  * UTF-8 characters will be returned by the API using escape
    sequences of their Unicode code points. For example, the
    Japanese character *„Åã* is 3 bytes in UTF-8 (`0xE382AB`). Its
    Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this
    character and the API will return it as the escape sequence
    using six 1 byte characters which represent 2 bytes of Unicode
    code point (`"\u30ab"`).
  * 4 byte UTF-8 characters are not supported.
  * If the label is entirely composed of UTF-8 characters, the API
    response will return the code points using up to 193 1 byte
    characters.
 */
  label?: string;
  /** This Kubernetes cluster's location. */
  region?: string;
  /** An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Kubernetes cluster was updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeTypeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeTypeDefault = {
  errors?: GetLinodeTypeDefaultErrorsItem[];
};

export type GetLinodeType200RegionPricesItem = {
  /** Cost (in US dollars) per hour for this Region. */
  hourly?: number;
  /** The Region ID for these prices. */
  id?: string;
  /** Cost (in US dollars) per month for this Region. */
  monthly?: number;
};

/**
 * The default cost of provisioning this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.

 */
export type GetLinodeType200Price = {
  /** Cost (in US dollars) per hour. */
  readonly hourly?: number;
  /** Cost (in US dollars) per month. */
  readonly monthly?: number;
};

/**
 * The class of the Linode Type.

We currently offer six classes of compute instances:

  * `nanode` - Nanode instances are good for low-duty workloads, where performance isn't critical. **Note:** As of June 16th, 2020, Nanodes became 1 GB Linodes in the Cloud Manager, however, the API, the CLI, and billing will continue to refer to these instances as Nanodes.
  * `standard` - Standard Shared instances are good for medium-duty workloads and are a good mix of performance, resources, and price. **Note:** As of June 16th, 2020, Standard Linodes in the Cloud Manager became Shared Linodes, however, the API, the CLI, and billing will continue to refer to these instances as Standard Linodes.
  * `dedicated` - Dedicated CPU instances are good for full-duty workloads where consistent performance is important.
  * `premium` (limited Regions) - In addition to the features of Dedicated instances, Premium instances come equipped with the latest AMD EPYC&trade; CPUs, ensuring your applications are running on the latest hardware with consistently high performance. Only available in [Regions](/docs/api/regions/#regions-list) with "Premium Plans" in their `capabilities`
  * `gpu` (limited Regions) - Linodes with dedicated NVIDIA Quadro&reg; RTX 6000 GPUs accelerate highly specialized applications such as machine learning, AI, and video transcoding. Only available in [Regions](/docs/api/regions/#regions-list) with "GPU Linodes" in their `capabilities`
  * `highmem` - High Memory instances favor RAM over other resources, and can be good for memory hungry use cases like caching and in-memory databases. All High Memory plans contain dedicated CPU cores.

 */
export type GetLinodeType200Class = typeof GetLinodeType200Class[keyof typeof GetLinodeType200Class];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeType200Class = {
  nanode: 'nanode',
  standard: 'standard',
  dedicated: 'dedicated',
  premium: 'premium',
  gpu: 'gpu',
  highmem: 'highmem',
} as const;

/**
 * Returns collection of Linode types, including pricing and specifications for each type. These are used when [creating](/docs/api/linode-instances/#linode-create) or [resizing](/docs/api/linode-instances/#linode-resize) Linodes.

 */
export type GetLinodeType200 = {
  /** A list of optional add-on services for Linodes and their associated costs.
 */
  readonly addons?: GetLinodeType200Addons;
  /** The class of the Linode Type.

We currently offer six classes of compute instances:

  * `nanode` - Nanode instances are good for low-duty workloads, where performance isn't critical. **Note:** As of June 16th, 2020, Nanodes became 1 GB Linodes in the Cloud Manager, however, the API, the CLI, and billing will continue to refer to these instances as Nanodes.
  * `standard` - Standard Shared instances are good for medium-duty workloads and are a good mix of performance, resources, and price. **Note:** As of June 16th, 2020, Standard Linodes in the Cloud Manager became Shared Linodes, however, the API, the CLI, and billing will continue to refer to these instances as Standard Linodes.
  * `dedicated` - Dedicated CPU instances are good for full-duty workloads where consistent performance is important.
  * `premium` (limited Regions) - In addition to the features of Dedicated instances, Premium instances come equipped with the latest AMD EPYC&trade; CPUs, ensuring your applications are running on the latest hardware with consistently high performance. Only available in [Regions](/docs/api/regions/#regions-list) with "Premium Plans" in their `capabilities`
  * `gpu` (limited Regions) - Linodes with dedicated NVIDIA Quadro&reg; RTX 6000 GPUs accelerate highly specialized applications such as machine learning, AI, and video transcoding. Only available in [Regions](/docs/api/regions/#regions-list) with "GPU Linodes" in their `capabilities`
  * `highmem` - High Memory instances favor RAM over other resources, and can be good for memory hungry use cases like caching and in-memory databases. All High Memory plans contain dedicated CPU cores.
 */
  readonly class?: GetLinodeType200Class;
  /** The Disk size, in MB, of the Linode Type.
 */
  readonly disk?: number;
  /** The number of GPUs this Linode Type offers.
 */
  readonly gpus?: number;
  /** The ID representing the Linode Type. */
  readonly id?: string;
  /** The Linode Type's label is for display purposes only.
 */
  readonly label?: string;
  /** Amount of RAM included in this Linode Type.
 */
  readonly memory?: number;
  /** The Mbits outbound bandwidth allocation.
 */
  readonly network_out?: number;
  /** The default cost of provisioning this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.
 */
  readonly price?: GetLinodeType200Price;
  region_prices?: GetLinodeType200RegionPricesItem[];
  /** The Linode Type that a [mutate](/docs/api/linode-instances/#linode-upgrade) will upgrade to for a Linode of this type.  If "null", a Linode of this type may not mutate.
 */
  readonly successor?: string | null;
  /** The monthly outbound transfer amount, in MB.
 */
  readonly transfer?: number;
  /** The number of VCPU cores this Linode Type offers.
 */
  readonly vcpus?: number;
};

export type GetLinodeType200AddonsBackupsRegionPricesItem = {
  /** Cost (in US dollars) per hour to add Backups service in this Region. */
  hourly?: number;
  /** The Region ID for these prices. */
  id?: string;
  /** Cost (in US dollars) per month to add Backups service in this Region. */
  monthly?: number;
};

/**
 * The default cost of enabling Backups for this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.

 */
export type GetLinodeType200AddonsBackupsPrice = {
  /** The cost (in US dollars) per hour to add Backups service.
 */
  hourly?: number;
  /** The cost (in US dollars) per month to add Backups service.
 */
  monthly?: number;
};

/**
 * Information about the optional Backup service offered for Linodes.

 */
export type GetLinodeType200AddonsBackups = {
  /** The default cost of enabling Backups for this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.
 */
  readonly price?: GetLinodeType200AddonsBackupsPrice;
  readonly region_prices?: GetLinodeType200AddonsBackupsRegionPricesItem[];
};

/**
 * A list of optional add-on services for Linodes and their associated costs.

 */
export type GetLinodeType200Addons = {
  /** Information about the optional Backup service offered for Linodes.
 */
  readonly backups?: GetLinodeType200AddonsBackups;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeTypesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeTypesDefault = {
  errors?: GetLinodeTypesDefaultErrorsItem[];
};

export type GetLinodeTypes200DataItemRegionPricesItem = {
  /** Cost (in US dollars) per hour for this Region. */
  hourly?: number;
  /** The Region ID for these prices. */
  id?: string;
  /** Cost (in US dollars) per month for this Region. */
  monthly?: number;
};

/**
 * The default cost of provisioning this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.

 */
export type GetLinodeTypes200DataItemPrice = {
  /** Cost (in US dollars) per hour. */
  readonly hourly?: number;
  /** Cost (in US dollars) per month. */
  readonly monthly?: number;
};

/**
 * The class of the Linode Type.

We currently offer six classes of compute instances:

  * `nanode` - Nanode instances are good for low-duty workloads, where performance isn't critical. **Note:** As of June 16th, 2020, Nanodes became 1 GB Linodes in the Cloud Manager, however, the API, the CLI, and billing will continue to refer to these instances as Nanodes.
  * `standard` - Standard Shared instances are good for medium-duty workloads and are a good mix of performance, resources, and price. **Note:** As of June 16th, 2020, Standard Linodes in the Cloud Manager became Shared Linodes, however, the API, the CLI, and billing will continue to refer to these instances as Standard Linodes.
  * `dedicated` - Dedicated CPU instances are good for full-duty workloads where consistent performance is important.
  * `premium` (limited Regions) - In addition to the features of Dedicated instances, Premium instances come equipped with the latest AMD EPYC&trade; CPUs, ensuring your applications are running on the latest hardware with consistently high performance. Only available in [Regions](/docs/api/regions/#regions-list) with "Premium Plans" in their `capabilities`
  * `gpu` (limited Regions) - Linodes with dedicated NVIDIA Quadro&reg; RTX 6000 GPUs accelerate highly specialized applications such as machine learning, AI, and video transcoding. Only available in [Regions](/docs/api/regions/#regions-list) with "GPU Linodes" in their `capabilities`
  * `highmem` - High Memory instances favor RAM over other resources, and can be good for memory hungry use cases like caching and in-memory databases. All High Memory plans contain dedicated CPU cores.

 */
export type GetLinodeTypes200DataItemClass = typeof GetLinodeTypes200DataItemClass[keyof typeof GetLinodeTypes200DataItemClass];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeTypes200DataItemClass = {
  nanode: 'nanode',
  standard: 'standard',
  dedicated: 'dedicated',
  premium: 'premium',
  gpu: 'gpu',
  highmem: 'highmem',
} as const;

/**
 * A list of optional add-on services for Linodes and their associated costs.

 */
export type GetLinodeTypes200DataItemAddons = {
  /** Information about the optional Backup service offered for Linodes.
 */
  readonly backups?: GetLinodeTypes200DataItemAddonsBackups;
};

/**
 * Returns collection of Linode types, including pricing and specifications for each type. These are used when [creating](/docs/api/linode-instances/#linode-create) or [resizing](/docs/api/linode-instances/#linode-resize) Linodes.

 */
export type GetLinodeTypes200DataItem = {
  /** A list of optional add-on services for Linodes and their associated costs.
 */
  readonly addons?: GetLinodeTypes200DataItemAddons;
  /** The class of the Linode Type.

We currently offer six classes of compute instances:

  * `nanode` - Nanode instances are good for low-duty workloads, where performance isn't critical. **Note:** As of June 16th, 2020, Nanodes became 1 GB Linodes in the Cloud Manager, however, the API, the CLI, and billing will continue to refer to these instances as Nanodes.
  * `standard` - Standard Shared instances are good for medium-duty workloads and are a good mix of performance, resources, and price. **Note:** As of June 16th, 2020, Standard Linodes in the Cloud Manager became Shared Linodes, however, the API, the CLI, and billing will continue to refer to these instances as Standard Linodes.
  * `dedicated` - Dedicated CPU instances are good for full-duty workloads where consistent performance is important.
  * `premium` (limited Regions) - In addition to the features of Dedicated instances, Premium instances come equipped with the latest AMD EPYC&trade; CPUs, ensuring your applications are running on the latest hardware with consistently high performance. Only available in [Regions](/docs/api/regions/#regions-list) with "Premium Plans" in their `capabilities`
  * `gpu` (limited Regions) - Linodes with dedicated NVIDIA Quadro&reg; RTX 6000 GPUs accelerate highly specialized applications such as machine learning, AI, and video transcoding. Only available in [Regions](/docs/api/regions/#regions-list) with "GPU Linodes" in their `capabilities`
  * `highmem` - High Memory instances favor RAM over other resources, and can be good for memory hungry use cases like caching and in-memory databases. All High Memory plans contain dedicated CPU cores.
 */
  readonly class?: GetLinodeTypes200DataItemClass;
  /** The Disk size, in MB, of the Linode Type.
 */
  readonly disk?: number;
  /** The number of GPUs this Linode Type offers.
 */
  readonly gpus?: number;
  /** The ID representing the Linode Type. */
  readonly id?: string;
  /** The Linode Type's label is for display purposes only.
 */
  readonly label?: string;
  /** Amount of RAM included in this Linode Type.
 */
  readonly memory?: number;
  /** The Mbits outbound bandwidth allocation.
 */
  readonly network_out?: number;
  /** The default cost of provisioning this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.
 */
  readonly price?: GetLinodeTypes200DataItemPrice;
  region_prices?: GetLinodeTypes200DataItemRegionPricesItem[];
  /** The Linode Type that a [mutate](/docs/api/linode-instances/#linode-upgrade) will upgrade to for a Linode of this type.  If "null", a Linode of this type may not mutate.
 */
  readonly successor?: string | null;
  /** The monthly outbound transfer amount, in MB.
 */
  readonly transfer?: number;
  /** The number of VCPU cores this Linode Type offers.
 */
  readonly vcpus?: number;
};

export type GetLinodeTypes200 = {
  data?: GetLinodeTypes200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetLinodeTypes200DataItemAddonsBackupsRegionPricesItem = {
  /** Cost (in US dollars) per hour to add Backups service in this Region. */
  hourly?: number;
  /** The Region ID for these prices. */
  id?: string;
  /** Cost (in US dollars) per month to add Backups service in this Region. */
  monthly?: number;
};

/**
 * The default cost of enabling Backups for this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.

 */
export type GetLinodeTypes200DataItemAddonsBackupsPrice = {
  /** The cost (in US dollars) per hour to add Backups service.
 */
  hourly?: number;
  /** The cost (in US dollars) per month to add Backups service.
 */
  monthly?: number;
};

/**
 * Information about the optional Backup service offered for Linodes.

 */
export type GetLinodeTypes200DataItemAddonsBackups = {
  /** The default cost of enabling Backups for this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.
 */
  readonly price?: GetLinodeTypes200DataItemAddonsBackupsPrice;
  readonly region_prices?: GetLinodeTypes200DataItemAddonsBackupsRegionPricesItem[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteStackScriptDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteStackScriptDefault = {
  errors?: DeleteStackScriptDefaultErrorsItem[];
};

export type DeleteStackScript200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateStackScriptDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateStackScriptDefault = {
  errors?: UpdateStackScriptDefaultErrorsItem[];
};

/**
 * A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.

 */
export type UpdateStackScript200UserDefinedFieldsItem = {
  /** The default value.  If not specified, this value will be used.
 */
  readonly default?: string;
  /** An example value for the field.
 */
  readonly example: string;
  /** A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
 */
  readonly label: string;
  /** A list of acceptable values for the field in any quantity, combination or order.
 */
  readonly manyOf?: string;
  /** The name of the field.
 */
  readonly name: string;
  /** A list of acceptable single values for the field.
 */
  readonly oneOf?: string;
};

/**
 * A StackScript enables you to quickly deploy a fully-configured application in an automated manner.

 */
export type UpdateStackScript200 = {
  /** The date this StackScript was created.
 */
  readonly created?: string;
  /** Count of currently active, deployed Linodes created from this StackScript.
 */
  readonly deployments_active?: number;
  /** The total number of times this StackScript has been deployed.
 */
  readonly deployments_total?: number;
  /** A description for the StackScript.
 */
  description?: string;
  /** The unique ID of this StackScript. */
  readonly id?: number;
  /** An array of Image IDs. These are the Images that can be deployed with this StackScript.

`any/all` indicates that all available Images, including private Images, are accepted.
 */
  images?: string[];
  /** This determines whether other users can use your StackScript. **Once a StackScript is made public, it cannot be made private.**
 */
  is_public?: boolean;
  /** The StackScript's label is for display purposes only.
 */
  label?: string;
  /** Returns `true` if this StackScript is owned by the account of the user making the request, and the user
making the request is unrestricted or has access to this StackScript.
 */
  readonly mine?: boolean;
  /** This field allows you to add notes for the set of revisions made to this StackScript.
 */
  rev_note?: string;
  /** The script to execute when provisioning a new Linode with this StackScript.
 */
  script?: string;
  /** The date this StackScript was last updated.
 */
  readonly updated?: string;
  /** This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment. See [Declare User-Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more information.
 */
  readonly user_defined_fields?: UpdateStackScript200UserDefinedFieldsItem[];
  /** The Gravatar ID for the User who created the StackScript.
 */
  readonly user_gravatar_id?: string;
  /** The User who created the StackScript.
 */
  readonly username?: string;
};

/**
 * A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.

 */
export type UpdateStackScriptBodyUserDefinedFieldsItem = {
  /** The default value.  If not specified, this value will be used.
 */
  readonly default?: string;
  /** An example value for the field.
 */
  readonly example: string;
  /** A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
 */
  readonly label: string;
  /** A list of acceptable values for the field in any quantity, combination or order.
 */
  readonly manyOf?: string;
  /** The name of the field.
 */
  readonly name: string;
  /** A list of acceptable single values for the field.
 */
  readonly oneOf?: string;
};

/**
 * A StackScript enables you to quickly deploy a fully-configured application in an automated manner.

 */
export type UpdateStackScriptBody = {
  /** The date this StackScript was created.
 */
  readonly created?: string;
  /** Count of currently active, deployed Linodes created from this StackScript.
 */
  readonly deployments_active?: number;
  /** The total number of times this StackScript has been deployed.
 */
  readonly deployments_total?: number;
  /** A description for the StackScript.
 */
  description?: string;
  /** The unique ID of this StackScript. */
  readonly id?: number;
  /** An array of Image IDs. These are the Images that can be deployed with this StackScript.

`any/all` indicates that all available Images, including private Images, are accepted.
 */
  images?: string[];
  /** This determines whether other users can use your StackScript. **Once a StackScript is made public, it cannot be made private.**
 */
  is_public?: boolean;
  /** The StackScript's label is for display purposes only.
 */
  label?: string;
  /** Returns `true` if this StackScript is owned by the account of the user making the request, and the user
making the request is unrestricted or has access to this StackScript.
 */
  readonly mine?: boolean;
  /** This field allows you to add notes for the set of revisions made to this StackScript.
 */
  rev_note?: string;
  /** The script to execute when provisioning a new Linode with this StackScript.
 */
  script?: string;
  /** The date this StackScript was last updated.
 */
  readonly updated?: string;
  /** This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment. See [Declare User-Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more information.
 */
  readonly user_defined_fields?: UpdateStackScriptBodyUserDefinedFieldsItem[];
  /** The Gravatar ID for the User who created the StackScript.
 */
  readonly user_gravatar_id?: string;
  /** The User who created the StackScript.
 */
  readonly username?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetStackScriptDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetStackScriptDefault = {
  errors?: GetStackScriptDefaultErrorsItem[];
};

/**
 * A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.

 */
export type GetStackScript200UserDefinedFieldsItem = {
  /** The default value.  If not specified, this value will be used.
 */
  readonly default?: string;
  /** An example value for the field.
 */
  readonly example: string;
  /** A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
 */
  readonly label: string;
  /** A list of acceptable values for the field in any quantity, combination or order.
 */
  readonly manyOf?: string;
  /** The name of the field.
 */
  readonly name: string;
  /** A list of acceptable single values for the field.
 */
  readonly oneOf?: string;
};

/**
 * A StackScript enables you to quickly deploy a fully-configured application in an automated manner.

 */
export type GetStackScript200 = {
  /** The date this StackScript was created.
 */
  readonly created?: string;
  /** Count of currently active, deployed Linodes created from this StackScript.
 */
  readonly deployments_active?: number;
  /** The total number of times this StackScript has been deployed.
 */
  readonly deployments_total?: number;
  /** A description for the StackScript.
 */
  description?: string;
  /** The unique ID of this StackScript. */
  readonly id?: number;
  /** An array of Image IDs. These are the Images that can be deployed with this StackScript.

`any/all` indicates that all available Images, including private Images, are accepted.
 */
  images?: string[];
  /** This determines whether other users can use your StackScript. **Once a StackScript is made public, it cannot be made private.**
 */
  is_public?: boolean;
  /** The StackScript's label is for display purposes only.
 */
  label?: string;
  /** Returns `true` if this StackScript is owned by the account of the user making the request, and the user
making the request is unrestricted or has access to this StackScript.
 */
  readonly mine?: boolean;
  /** This field allows you to add notes for the set of revisions made to this StackScript.
 */
  rev_note?: string;
  /** The script to execute when provisioning a new Linode with this StackScript.
 */
  script?: string;
  /** The date this StackScript was last updated.
 */
  readonly updated?: string;
  /** This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment. See [Declare User-Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more information.
 */
  readonly user_defined_fields?: GetStackScript200UserDefinedFieldsItem[];
  /** The Gravatar ID for the User who created the StackScript.
 */
  readonly user_gravatar_id?: string;
  /** The User who created the StackScript.
 */
  readonly username?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AddStackScriptDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AddStackScriptDefault = {
  errors?: AddStackScriptDefaultErrorsItem[];
};

/**
 * A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.

 */
export type AddStackScript200UserDefinedFieldsItem = {
  /** The default value.  If not specified, this value will be used.
 */
  readonly default?: string;
  /** An example value for the field.
 */
  readonly example: string;
  /** A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
 */
  readonly label: string;
  /** A list of acceptable values for the field in any quantity, combination or order.
 */
  readonly manyOf?: string;
  /** The name of the field.
 */
  readonly name: string;
  /** A list of acceptable single values for the field.
 */
  readonly oneOf?: string;
};

/**
 * A StackScript enables you to quickly deploy a fully-configured application in an automated manner.

 */
export type AddStackScript200 = {
  /** The date this StackScript was created.
 */
  readonly created?: string;
  /** Count of currently active, deployed Linodes created from this StackScript.
 */
  readonly deployments_active?: number;
  /** The total number of times this StackScript has been deployed.
 */
  readonly deployments_total?: number;
  /** A description for the StackScript.
 */
  description?: string;
  /** The unique ID of this StackScript. */
  readonly id?: number;
  /** An array of Image IDs. These are the Images that can be deployed with this StackScript.

`any/all` indicates that all available Images, including private Images, are accepted.
 */
  images?: string[];
  /** This determines whether other users can use your StackScript. **Once a StackScript is made public, it cannot be made private.**
 */
  is_public?: boolean;
  /** The StackScript's label is for display purposes only.
 */
  label?: string;
  /** Returns `true` if this StackScript is owned by the account of the user making the request, and the user
making the request is unrestricted or has access to this StackScript.
 */
  readonly mine?: boolean;
  /** This field allows you to add notes for the set of revisions made to this StackScript.
 */
  rev_note?: string;
  /** The script to execute when provisioning a new Linode with this StackScript.
 */
  script?: string;
  /** The date this StackScript was last updated.
 */
  readonly updated?: string;
  /** This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment. See [Declare User-Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more information.
 */
  readonly user_defined_fields?: AddStackScript200UserDefinedFieldsItem[];
  /** The Gravatar ID for the User who created the StackScript.
 */
  readonly user_gravatar_id?: string;
  /** The User who created the StackScript.
 */
  readonly username?: string;
};

/**
 * A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.

 */
export type AddStackScriptBodyAllOfUserDefinedFieldsItem = {
  /** The default value.  If not specified, this value will be used.
 */
  readonly default?: string;
  /** An example value for the field.
 */
  readonly example: string;
  /** A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
 */
  readonly label: string;
  /** A list of acceptable values for the field in any quantity, combination or order.
 */
  readonly manyOf?: string;
  /** The name of the field.
 */
  readonly name: string;
  /** A list of acceptable single values for the field.
 */
  readonly oneOf?: string;
};

/**
 * A StackScript enables you to quickly deploy a fully-configured application in an automated manner.

 */
export type AddStackScriptBodyAllOf = {
  /** The date this StackScript was created.
 */
  readonly created?: string;
  /** Count of currently active, deployed Linodes created from this StackScript.
 */
  readonly deployments_active?: number;
  /** The total number of times this StackScript has been deployed.
 */
  readonly deployments_total?: number;
  /** A description for the StackScript.
 */
  description?: string;
  /** The unique ID of this StackScript. */
  readonly id?: number;
  /** An array of Image IDs. These are the Images that can be deployed with this StackScript.

`any/all` indicates that all available Images, including private Images, are accepted.
 */
  images?: string[];
  /** This determines whether other users can use your StackScript. **Once a StackScript is made public, it cannot be made private.**
 */
  is_public?: boolean;
  /** The StackScript's label is for display purposes only.
 */
  label?: string;
  /** Returns `true` if this StackScript is owned by the account of the user making the request, and the user
making the request is unrestricted or has access to this StackScript.
 */
  readonly mine?: boolean;
  /** This field allows you to add notes for the set of revisions made to this StackScript.
 */
  rev_note?: string;
  /** The script to execute when provisioning a new Linode with this StackScript.
 */
  script?: string;
  /** The date this StackScript was last updated.
 */
  readonly updated?: string;
  /** This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment. See [Declare User-Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more information.
 */
  readonly user_defined_fields?: AddStackScriptBodyAllOfUserDefinedFieldsItem[];
  /** The Gravatar ID for the User who created the StackScript.
 */
  readonly user_gravatar_id?: string;
  /** The User who created the StackScript.
 */
  readonly username?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetStackScriptsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetStackScriptsDefault = {
  errors?: GetStackScriptsDefaultErrorsItem[];
};

/**
 * A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.

 */
export type GetStackScripts200DataItemUserDefinedFieldsItem = {
  /** The default value.  If not specified, this value will be used.
 */
  readonly default?: string;
  /** An example value for the field.
 */
  readonly example: string;
  /** A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
 */
  readonly label: string;
  /** A list of acceptable values for the field in any quantity, combination or order.
 */
  readonly manyOf?: string;
  /** The name of the field.
 */
  readonly name: string;
  /** A list of acceptable single values for the field.
 */
  readonly oneOf?: string;
};

/**
 * A StackScript enables you to quickly deploy a fully-configured application in an automated manner.

 */
export type GetStackScripts200DataItem = {
  /** The date this StackScript was created.
 */
  readonly created?: string;
  /** Count of currently active, deployed Linodes created from this StackScript.
 */
  readonly deployments_active?: number;
  /** The total number of times this StackScript has been deployed.
 */
  readonly deployments_total?: number;
  /** A description for the StackScript.
 */
  description?: string;
  /** The unique ID of this StackScript. */
  readonly id?: number;
  /** An array of Image IDs. These are the Images that can be deployed with this StackScript.

`any/all` indicates that all available Images, including private Images, are accepted.
 */
  images?: string[];
  /** This determines whether other users can use your StackScript. **Once a StackScript is made public, it cannot be made private.**
 */
  is_public?: boolean;
  /** The StackScript's label is for display purposes only.
 */
  label?: string;
  /** Returns `true` if this StackScript is owned by the account of the user making the request, and the user
making the request is unrestricted or has access to this StackScript.
 */
  readonly mine?: boolean;
  /** This field allows you to add notes for the set of revisions made to this StackScript.
 */
  rev_note?: string;
  /** The script to execute when provisioning a new Linode with this StackScript.
 */
  script?: string;
  /** The date this StackScript was last updated.
 */
  readonly updated?: string;
  /** This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment. See [Declare User-Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more information.
 */
  readonly user_defined_fields?: GetStackScripts200DataItemUserDefinedFieldsItem[];
  /** The Gravatar ID for the User who created the StackScript.
 */
  readonly user_gravatar_id?: string;
  /** The User who created the StackScript.
 */
  readonly username?: string;
};

export type GetStackScripts200 = {
  data?: GetStackScripts200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetStackScriptsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeVolumesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeVolumesDefault = {
  errors?: GetLinodeVolumesDefaultErrorsItem[];
};

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type GetLinodeVolumes200DataItemStatus = typeof GetLinodeVolumes200DataItemStatus[keyof typeof GetLinodeVolumes200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeVolumes200DataItemStatus = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type GetLinodeVolumes200DataItemHardwareType = typeof GetLinodeVolumes200DataItemHardwareType[keyof typeof GetLinodeVolumes200DataItemHardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeVolumes200DataItemHardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export type GetLinodeVolumes200DataItem = {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: GetLinodeVolumes200DataItemHardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: GetLinodeVolumes200DataItemStatus;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
};

export type GetLinodeVolumes200 = {
  data?: GetLinodeVolumes200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetLinodeVolumesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeStatsByYearMonthDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeStatsByYearMonthDefault = {
  errors?: GetLinodeStatsByYearMonthDefaultErrorsItem[];
};

/**
 * IPv6 statistics.
 */
export type GetLinodeStatsByYearMonth200Netv6 = {
  /** Input stats for IPv6, measured in bits/s (bits/second). */
  in?: number[][];
  /** Output stats for IPv6, measured in bits/s (bits/second). */
  out?: number[][];
  /** Private IPv6 input statistics, measured in bits/s (bits/second). */
  private_in?: number[][];
  /** Private IPv6 output statistics, measured in bits/s (bits/second). */
  private_out?: number[][];
};

/**
 * IPv4 statistics.
 */
export type GetLinodeStatsByYearMonth200Netv4 = {
  /** Input stats for IPv4, measured in bits/s (bits/second). */
  in?: number[][];
  /** Output stats for IPv4, measured in bits/s (bits/second). */
  out?: number[][];
  /** Private IPv4 input statistics, measured in bits/s (bits/second). */
  private_in?: number[][];
  /** Private IPv4 output statistics, measured in bits/s (bits/second). */
  private_out?: number[][];
};

/**
 * Input/Output statistics.
 */
export type GetLinodeStatsByYearMonth200Io = {
  /** Block/s written. */
  io?: number[][];
  /** Block/s written. */
  swap?: number[][];
};

/**
 * CPU, IO, IPv4, and IPv6 statistics. Graph data, if available, is in "[timestamp, reading]" array format. Timestamp is a UNIX timestamp in EST.

 */
export type GetLinodeStatsByYearMonth200 = {
  /** Percentage of CPU used.
 */
  readonly cpu?: number[][];
  /** Input/Output statistics. */
  readonly io?: GetLinodeStatsByYearMonth200Io;
  /** IPv4 statistics. */
  readonly netv4?: GetLinodeStatsByYearMonth200Netv4;
  /** IPv6 statistics. */
  readonly netv6?: GetLinodeStatsByYearMonth200Netv6;
  /** The title for this data set. */
  readonly title?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeStatsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeStatsDefault = {
  errors?: GetLinodeStatsDefaultErrorsItem[];
};

/**
 * IPv6 statistics.
 */
export type GetLinodeStats200Netv6 = {
  /** Input stats for IPv6, measured in bits/s (bits/second). */
  in?: number[][];
  /** Output stats for IPv6, measured in bits/s (bits/second). */
  out?: number[][];
  /** Private IPv6 input statistics, measured in bits/s (bits/second). */
  private_in?: number[][];
  /** Private IPv6 output statistics, measured in bits/s (bits/second). */
  private_out?: number[][];
};

/**
 * IPv4 statistics.
 */
export type GetLinodeStats200Netv4 = {
  /** Input stats for IPv4, measured in bits/s (bits/second). */
  in?: number[][];
  /** Output stats for IPv4, measured in bits/s (bits/second). */
  out?: number[][];
  /** Private IPv4 input statistics, measured in bits/s (bits/second). */
  private_in?: number[][];
  /** Private IPv4 output statistics, measured in bits/s (bits/second). */
  private_out?: number[][];
};

/**
 * Input/Output statistics.
 */
export type GetLinodeStats200Io = {
  /** Block/s written. */
  io?: number[][];
  /** Block/s written. */
  swap?: number[][];
};

/**
 * CPU, IO, IPv4, and IPv6 statistics. Graph data, if available, is in "[timestamp, reading]" array format. Timestamp is a UNIX timestamp in EST.

 */
export type GetLinodeStats200 = {
  /** Percentage of CPU used.
 */
  readonly cpu?: number[][];
  /** Input/Output statistics. */
  readonly io?: GetLinodeStats200Io;
  /** IPv4 statistics. */
  readonly netv4?: GetLinodeStats200Netv4;
  /** IPv6 statistics. */
  readonly netv6?: GetLinodeStats200Netv6;
  /** The title for this data set. */
  readonly title?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeTransferByYearMonthDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeTransferByYearMonthDefault = {
  errors?: GetLinodeTransferByYearMonthDefaultErrorsItem[];
};

export type GetLinodeTransferByYearMonth200 = {
  /** The amount of inbound public network traffic received by this Linode, in bytes, for a specific year/month.
 */
  readonly bytes_in?: number;
  /** The amount of outbound public network traffic sent by this Linode, in bytes, for a specific year/month.
 */
  readonly bytes_out?: number;
  /** The total amount of public network traffic sent and received by this Linode, in bytes, for a specific year/month.
 */
  readonly bytes_total?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeTransferDefault = {
  errors?: GetLinodeTransferDefaultErrorsItem[];
};

export type GetLinodeTransfer200 = {
  /** The amount of network transfer this Linode has used, in GB, past your monthly quota.
 */
  readonly billable?: number;
  /** The amount of network transfer this Linode adds to your transfer pool, in GB, for the current month's billing cycle.
 */
  readonly quota?: number;
  /** The amount of network transfer used by this Linode, in bytes, for the current month's billing cycle.
 */
  readonly used?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ShutdownLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ShutdownLinodeInstanceDefault = {
  errors?: ShutdownLinodeInstanceDefaultErrorsItem[];
};

export type ShutdownLinodeInstance200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ResizeLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ResizeLinodeInstanceDefault = {
  errors?: ResizeLinodeInstanceDefaultErrorsItem[];
};

export type ResizeLinodeInstance200 = { [key: string]: any };

export type ResizeLinodeInstanceBody = {
  /** Automatically resize disks when resizing a Linode. When resizing down to a smaller plan your Linode's data must fit within the smaller disk size.
 */
  allow_auto_disk_resize?: boolean;
  /** The ID representing the Linode Type. */
  type: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type RescueLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type RescueLinodeInstanceDefault = {
  errors?: RescueLinodeInstanceDefaultErrorsItem[];
};

export type RescueLinodeInstance200 = { [key: string]: any };

export type RescueLinodeInstanceBody = {
  devices?: RescueLinodeInstanceBodyDevices;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueLinodeInstanceBodyDevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueLinodeInstanceBodyDevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueLinodeInstanceBodyDevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueLinodeInstanceBodyDevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueLinodeInstanceBodyDevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueLinodeInstanceBodyDevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueLinodeInstanceBodyDevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

export type RescueLinodeInstanceBodyDevices = {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: RescueLinodeInstanceBodyDevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: RescueLinodeInstanceBodyDevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: RescueLinodeInstanceBodyDevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: RescueLinodeInstanceBodyDevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: RescueLinodeInstanceBodyDevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: RescueLinodeInstanceBodyDevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: RescueLinodeInstanceBodyDevicesSdg;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type RebuildLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type RebuildLinodeInstanceDefault = {
  errors?: RebuildLinodeInstanceDefaultErrorsItem[];
};

/**
 * A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".

 */
export type RebuildLinodeInstance200Status = typeof RebuildLinodeInstance200Status[keyof typeof RebuildLinodeInstance200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildLinodeInstance200Status = {
  running: 'running',
  offline: 'offline',
  booting: 'booting',
  rebooting: 'rebooting',
  shutting_down: 'shutting_down',
  provisioning: 'provisioning',
  deleting: 'deleting',
  migrating: 'migrating',
  rebuilding: 'rebuilding',
  cloning: 'cloning',
  restoring: 'restoring',
  stopped: 'stopped',
  billing_suspension: 'billing_suspension',
} as const;

/**
 * Information about the resources available to this Linode.
 */
export type RebuildLinodeInstance200Specs = {
  /** The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.
 */
  readonly disk?: number;
  /** The number of gpus this Linode has access to.
 */
  readonly gpus?: number;
  /** The amount of RAM, in MB, this Linode has access to.

Typically, a Linode boots with all of its available RAM, but this can be configured in a Config profile. See the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
 */
  readonly memory?: number;
  /** The amount of network transfer this Linode is allotted each month. */
  readonly transfer?: number;
  /** The number of vcpus this Linode has access to.
 */
  readonly vcpus?: number;
};

export type RebuildLinodeInstance200Image = string | null;

/**
 * The virtualization software powering this Linode.

 */
export type RebuildLinodeInstance200Hypervisor = typeof RebuildLinodeInstance200Hypervisor[keyof typeof RebuildLinodeInstance200Hypervisor];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildLinodeInstance200Hypervisor = {
  kvm: 'kvm',
} as const;

/**
 * Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).

 */
export type RebuildLinodeInstance200Backups = {
  /** Whether Backups for this Linode are available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).
 */
  readonly enabled?: boolean;
  /** The last successful backup date. 'null' if there was no previous backup. */
  readonly last_successful?: string;
  schedule?: RebuildLinodeInstance200BackupsSchedule;
};

export type RebuildLinodeInstance200 = {
  alerts?: RebuildLinodeInstance200Alerts;
  /** Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).
 */
  backups?: RebuildLinodeInstance200Backups;
  /** When this Linode was created. */
  readonly created?: string;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Linode Create](/docs/api/linode-instances/#linode-create) description for more information on Metadata. */
  readonly has_user_data?: boolean;
  /** The Linode's host machine, as a UUID. */
  readonly host_uuid?: string;
  /** The virtualization software powering this Linode.
 */
  readonly hypervisor?: RebuildLinodeInstance200Hypervisor;
  /** This Linode's ID which must be provided for all operations impacting this Linode.
 */
  readonly id?: number;
  readonly image?: RebuildLinodeInstance200Image;
  /** This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address
upon creation, and may get a single private IPv4 address if needed. You may need to
[open a support ticket](/docs/api/support/#support-ticket-open)
to get additional IPv4 addresses.

IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
See the [/networking](/docs/api/networking/) endpoints for details.
 */
  readonly ipv4?: string[];
  /** This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
 */
  readonly ipv6?: string | null;
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).
 */
  readonly region?: string;
  /** Information about the resources available to this Linode. */
  readonly specs?: RebuildLinodeInstance200Specs;
  /** A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".
 */
  readonly status?: RebuildLinodeInstance200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.
To change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).
 */
  readonly type?: string;
  /** When this Linode was last updated. */
  readonly updated?: string;
  /** The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
 */
  watchdog_enabled?: boolean;
};

/**
 * The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.

 */
export type RebuildLinodeInstance200BackupsScheduleWindow = typeof RebuildLinodeInstance200BackupsScheduleWindow[keyof typeof RebuildLinodeInstance200BackupsScheduleWindow];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildLinodeInstance200BackupsScheduleWindow = {
  Scheduling: 'Scheduling',
  W0: 'W0',
  W2: 'W2',
  W4: 'W4',
  W6: 'W6',
  W8: 'W8',
  W10: 'W10',
  W12: 'W12',
  W14: 'W14',
  W16: 'W16',
  W18: 'W18',
  W20: 'W20',
  W22: 'W22',
  null: null,
} as const;

/**
 * The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.

 */
export type RebuildLinodeInstance200BackupsScheduleDay = typeof RebuildLinodeInstance200BackupsScheduleDay[keyof typeof RebuildLinodeInstance200BackupsScheduleDay];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RebuildLinodeInstance200BackupsScheduleDay = {
  Scheduling: 'Scheduling',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  null: null,
} as const;

export type RebuildLinodeInstance200BackupsSchedule = {
  /** The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.
 */
  day?: RebuildLinodeInstance200BackupsScheduleDay;
  /** The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.
 */
  window?: RebuildLinodeInstance200BackupsScheduleWindow;
};

export type RebuildLinodeInstance200Alerts = {
  /** The percentage of CPU usage required to trigger an alert.
If the average CPU usage over two hours exceeds this value, we'll send you an alert.
Your Linode's total CPU capacity is represented as 100%, multiplied by its number of
cores.

For example, a two core Linode's CPU capacity is represented as 200%. If you want
to be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.

The default value is 90% multiplied by the number of cores.

If the value is set to `0` (zero), the alert is disabled.
 */
  cpu?: number;
  /** The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.
 */
  io?: number;
  /** The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_in?: number;
  /** The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_out?: number;
  /** The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.
 */
  transfer_quota?: number;
};

export type RebuildLinodeInstanceBodyAllOfFour = {
  /** The ID of the [Linode Type](/docs/api/linode-types/#types-list) to resize to with this request.
 */
  type?: string;
};

export type RebuildLinodeInstanceBody = RebuildLinodeInstanceBodyAllOf & RebuildLinodeInstanceBodyAllOfFour;

/**
 * This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.

 */
export type RebuildLinodeInstanceBodyAllOfStackscriptData = { [key: string]: any };

/**
 * An object containing user-defined data relevant to the creation of Linodes.

 */
export type RebuildLinodeInstanceBodyAllOfMetadata = {
  /** Base64-encoded [cloud-config](/docs/products/compute/compute-instances/guides/metadata-cloud-config/) data.

Cannot be modified after provisioning. To update, use either the [Linode Clone](/docs/api/linode-instances/#linode-clone) or [Linode Rebuild](/docs/api/linode-instances/#linode-rebuild) commands.

Must not be included when cloning to an existing Linode.

Unencoded data must not exceed 65535 bytes, or about 16kb encoded.
 */
  user_data?: string;
};

/**
 * Common properties for creating and rebuilding Linodes.
 */
export type RebuildLinodeInstanceBodyAllOf = {
  /** A list of public SSH keys that will be automatically appended
to the root user's `~/.ssh/authorized_keys` file when deploying from an Image.
 */
  authorized_keys?: string[];
  /** A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.
 */
  authorized_users?: string[];
  /** This field defaults to `true` if the Linode is created with an Image or from a Backup.
If it is deployed from an Image or a Backup and you wish it to remain `offline` after deployment, set this to `false`.
 */
  booted?: boolean;
  /** An Image ID to deploy the Linode Disk from.

Access the Images List ([GET /images](/docs/api/images/#images-list)) endpoint with authentication to view
all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating
a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Access the User's
Grant Update ([PUT /account/users/{username}/grants](/docs/api/account/#users-grants-update)) endpoint to
adjust permissions for an Account Image.
 */
  image?: string;
  /** An object containing user-defined data relevant to the creation of Linodes.
 */
  metadata?: RebuildLinodeInstanceBodyAllOfMetadata;
  /** This sets the root user's password on a newly-created Linode Disk when deploying from an Image.

* **Required** when creating a Linode Disk from an Image, including when using a StackScript.

* Must meet a password strength score requirement that is calculated internally by the API.
If the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.
 */
  root_pass?: string;
  /** This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.
 */
  stackscript_data?: RebuildLinodeInstanceBodyAllOfStackscriptData;
  /** A StackScript ID that will cause the referenced StackScript to be run during
deployment of this Linode. A compatible `image` is required to use a
StackScript. To get a list of available StackScript and their permitted Images
see [/stackscripts](/docs/api/stackscripts/#stackscripts-list).
This field cannot be used when deploying from a Backup or a Private Image.
 */
  stackscript_id?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type RebootLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type RebootLinodeInstanceDefault = {
  errors?: RebootLinodeInstanceDefaultErrorsItem[];
};

export type RebootLinodeInstance200 = { [key: string]: any };

export type RebootLinodeInstanceBody = {
  /** The Linode Config ID to reboot into.  If null or omitted, the last booted config will be used.  If there was no last booted config and this Linode only has one config, it will be used.  If a config cannot be determined, an error will be returned.
 */
  config_id?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ResetLinodePasswordDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ResetLinodePasswordDefault = {
  errors?: ResetLinodePasswordDefaultErrorsItem[];
};

export type ResetLinodePassword200 = { [key: string]: any };

export type ResetLinodePasswordBody = {
  /** The root user's password on this Linode. Linode passwords must meet a password strength score requirement that is calculated internally by the API. If the strength requirement is not met, you will receive a Password does not meet strength requirement error.
 */
  root_pass: string;
};

export type GetLinodeNodeBalancers200 = {
  data?: GetLinodeNodeBalancers200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * Information about the amount of transfer this NodeBalancer has had so far this month.

 */
export type GetLinodeNodeBalancers200DataItemTransfer = {
  /** The total outbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly in?: number | null;
  /** The total inbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly out?: number | null;
  /** The total transfer, in MB, used by this NodeBalancer this month.
 */
  readonly total?: number | null;
};

/**
 * Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.

 */
export type GetLinodeNodeBalancers200DataItem = {
  /** Throttle connections per second.  Set to 0 (zero) to disable throttling.
 */
  client_conn_throttle?: number;
  /** When this NodeBalancer was created.
 */
  readonly created?: string;
  /** This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
 */
  readonly hostname?: string;
  /** This NodeBalancer's unique ID.
 */
  readonly id?: number;
  /** This NodeBalancer's public IPv4 address.
 */
  readonly ipv4?: string;
  /** This NodeBalancer's public IPv6 address.
 */
  readonly ipv6?: string | null;
  /** This NodeBalancer's label. These must be unique on your Account.
 */
  label?: string;
  /** The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
 */
  readonly region?: string;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** Information about the amount of transfer this NodeBalancer has had so far this month.
 */
  readonly transfer?: GetLinodeNodeBalancers200DataItemTransfer;
  /** When this NodeBalancer was last updated.
 */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type MutateLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type MutateLinodeInstanceDefault = {
  errors?: MutateLinodeInstanceDefaultErrorsItem[];
};

export type MutateLinodeInstance200 = { [key: string]: any };

export type MutateLinodeInstanceBody = {
  /** Automatically resize disks when resizing a Linode. When resizing down to a smaller plan your Linode's data must fit within the smaller disk size.
 */
  allow_auto_disk_resize?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type MigrateLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type MigrateLinodeInstanceDefault = {
  errors?: MigrateLinodeInstanceDefaultErrorsItem[];
};

export type MigrateLinodeInstance200 = { [key: string]: any };

export type MigrateLinodeInstanceBody = {
  /** The region to which the Linode will be migrated. Must be a valid region slug. A list of regions can be viewed by using the [GET /regions](/docs/api/regions/#regions-list) endpoint. A cross data center migration will cancel a pending migration that has not yet been initiated.
A cross data center migration will initiate a `linode_migrate_datacenter_create` event.
 */
  region?: string;
  /** When initiating a cross DC migration, setting this value to true will also ensure that the Linode is upgraded to the latest generation of hardware that corresponds to your Linode's Type, if any free upgrades are available for it.
If no free upgrades are available, and this value is set to true, then the endpoint will return a 400 error code and the migration will not be performed.
If the data center set in the `region` field does not allow upgrades, then the endpoint will return a 400 error code and the migration will not be performed.
 */
  upgrade?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetKernelDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetKernelDefault = {
  errors?: GetKernelDefaultErrorsItem[];
};

/**
 * The architecture of this Kernel.
 */
export type GetKernel200Architecture = typeof GetKernel200Architecture[keyof typeof GetKernel200Architecture];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetKernel200Architecture = {
  x86_64: 'x86_64',
  i386: 'i386',
} as const;

/**
 * Linux kernel object
 */
export type GetKernel200 = {
  /** The architecture of this Kernel. */
  readonly architecture?: GetKernel200Architecture;
  /** The date on which this Kernel was built. */
  readonly built?: string;
  /** If this Kernel is marked as deprecated, this field has a value of true; otherwise, this field is false. */
  readonly deprecated?: boolean;
  /** The unique ID of this Kernel. */
  readonly id?: string;
  /** If this Kernel is suitable for KVM Linodes. */
  readonly kvm?: boolean;
  /** The friendly name of this Kernel. */
  readonly label?: string;
  /** If this Kernel is suitable for paravirtualized operations. */
  readonly pvops?: boolean;
  /** Linux Kernel version. */
  readonly version?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetKernelsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetKernelsDefault = {
  errors?: GetKernelsDefaultErrorsItem[];
};

/**
 * The architecture of this Kernel.
 */
export type GetKernels200DataItemArchitecture = typeof GetKernels200DataItemArchitecture[keyof typeof GetKernels200DataItemArchitecture];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetKernels200DataItemArchitecture = {
  x86_64: 'x86_64',
  i386: 'i386',
} as const;

/**
 * Linux kernel object
 */
export type GetKernels200DataItem = {
  /** The architecture of this Kernel. */
  readonly architecture?: GetKernels200DataItemArchitecture;
  /** The date on which this Kernel was built. */
  readonly built?: string;
  /** If this Kernel is marked as deprecated, this field has a value of true; otherwise, this field is false. */
  readonly deprecated?: boolean;
  /** The unique ID of this Kernel. */
  readonly id?: string;
  /** If this Kernel is suitable for KVM Linodes. */
  readonly kvm?: boolean;
  /** The friendly name of this Kernel. */
  readonly label?: string;
  /** If this Kernel is suitable for paravirtualized operations. */
  readonly pvops?: boolean;
  /** Linux Kernel version. */
  readonly version?: string;
};

export type GetKernels200 = {
  data?: GetKernels200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetKernelsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type RemoveLinodeIPDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type RemoveLinodeIPDefault = {
  errors?: RemoveLinodeIPDefaultErrorsItem[];
};

export type RemoveLinodeIP200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateLinodeIPDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateLinodeIPDefault = {
  errors?: UpdateLinodeIPDefaultErrorsItem[];
};

/**
 * The type of address this is.

 */
export type UpdateLinodeIP200Type = typeof UpdateLinodeIP200Type[keyof typeof UpdateLinodeIP200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeIP200Type = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export type UpdateLinodeIP200 = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: UpdateLinodeIP200Type;
};

export type UpdateLinodeIPBody = {
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeIPDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeIPDefault = {
  errors?: GetLinodeIPDefaultErrorsItem[];
};

/**
 * The type of address this is.

 */
export type GetLinodeIP200Type = typeof GetLinodeIP200Type[keyof typeof GetLinodeIP200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeIP200Type = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export type GetLinodeIP200 = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: GetLinodeIP200Type;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AddLinodeIPDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AddLinodeIPDefault = {
  errors?: AddLinodeIPDefaultErrorsItem[];
};

/**
 * The type of address this is.

 */
export type AddLinodeIP200Type = typeof AddLinodeIP200Type[keyof typeof AddLinodeIP200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeIP200Type = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export type AddLinodeIP200 = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: AddLinodeIP200Type;
};

/**
 * The type of address you are allocating. Only IPv4 addresses may be allocated through this endpoint.

 */
export type AddLinodeIPBodyType = typeof AddLinodeIPBodyType[keyof typeof AddLinodeIPBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeIPBodyType = {
  ipv4: 'ipv4',
} as const;

export type AddLinodeIPBody = {
  /** Whether to create a public or private IPv4 address.
 */
  public: boolean;
  /** The type of address you are allocating. Only IPv4 addresses may be allocated through this endpoint.
 */
  type: AddLinodeIPBodyType;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeIPsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeIPsDefault = {
  errors?: GetLinodeIPsDefaultErrorsItem[];
};

/**
 * A SLAAC IPv6 address that exists in Linode's system.

 */
export type GetLinodeIPs200Ipv6Slaac = {
  /** The address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string;
  /** The ID of the Linode this address currently belongs to.
 */
  readonly linode_id?: number;
  /** The network prefix.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address.
 */
  rdns?: string;
  /** The Region this address resides in.
 */
  readonly region?: string;
  /** The subnet mask.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: string;
};

/**
 * A link-local IPv6 address that exists in Linode's system,.

 */
export type GetLinodeIPs200Ipv6LinkLocal = {
  /** The IPv6 link-local address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string;
  /** The ID of the Linode this address currently belongs to.
 */
  readonly linode_id?: number;
  /** The network prefix.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address.
 */
  rdns?: string;
  /** The Region this address resides in.
 */
  readonly region?: string;
  /** The subnet mask.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: string;
};

/**
 * An object representing an IPv6 range.

 */
export type GetLinodeIPs200Ipv6GlobalItem = {
  /** The prefix length of the address. The total number of addresses that can be assigned from this range is calculated as 2<sup>(128 - prefix length)</sup>.
 */
  prefix?: number;
  /** The IPv6 address of this range.
 */
  readonly range?: string;
  /** The region for this range of IPv6 addresses.
 */
  readonly region?: string;
  /** The IPv6 SLAAC address.
 */
  route_target?: string;
};

/**
 * Information about this Linode's IPv6 addresses.

 */
export type GetLinodeIPs200Ipv6 = {
  /** A list of IPv6 range objects assigned to this Linode.
 */
  readonly global?: GetLinodeIPs200Ipv6GlobalItem[];
  /** A link-local IPv6 address that exists in Linode's system,.
 */
  readonly link_local?: GetLinodeIPs200Ipv6LinkLocal;
  /** A SLAAC IPv6 address that exists in Linode's system.
 */
  readonly slaac?: GetLinodeIPs200Ipv6Slaac;
};

/**
 * Information about this Linode's IPv4 addresses.

 */
export type GetLinodeIPs200Ipv4 = {
  /** A list of private IP Address objects belonging to this Linode.
 */
  readonly private?: GetLinodeIPs200Ipv4PrivateItem[];
  /** A list of public IP Address objects belonging to this Linode.
 */
  readonly public?: GetLinodeIPs200Ipv4PublicItem[];
  /** A list of reserved IP Address objects belonging to this Linode.
 */
  readonly reserved?: GetLinodeIPs200Ipv4ReservedItem[];
  /** A list of shared IP Address objects assigned to this Linode.
 */
  readonly shared?: GetLinodeIPs200Ipv4SharedItem[];
};

export type GetLinodeIPs200 = {
  /** Information about this Linode's IPv4 addresses.
 */
  readonly ipv4?: GetLinodeIPs200Ipv4;
  /** Information about this Linode's IPv6 addresses.
 */
  readonly ipv6?: GetLinodeIPs200Ipv6;
};

/**
 * The type of address this is.

 */
export type GetLinodeIPs200Ipv4SharedItemType = typeof GetLinodeIPs200Ipv4SharedItemType[keyof typeof GetLinodeIPs200Ipv4SharedItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeIPs200Ipv4SharedItemType = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export type GetLinodeIPs200Ipv4SharedItem = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: GetLinodeIPs200Ipv4SharedItemType;
};

/**
 * The type of address this is.

 */
export type GetLinodeIPs200Ipv4ReservedItemType = typeof GetLinodeIPs200Ipv4ReservedItemType[keyof typeof GetLinodeIPs200Ipv4ReservedItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeIPs200Ipv4ReservedItemType = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export type GetLinodeIPs200Ipv4ReservedItem = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: GetLinodeIPs200Ipv4ReservedItemType;
};

/**
 * The type of address this is.

 */
export type GetLinodeIPs200Ipv4PublicItemType = typeof GetLinodeIPs200Ipv4PublicItemType[keyof typeof GetLinodeIPs200Ipv4PublicItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeIPs200Ipv4PublicItemType = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export type GetLinodeIPs200Ipv4PublicItem = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: GetLinodeIPs200Ipv4PublicItemType;
};

/**
 * A private IPv4 address that exists in Linode's system.

 */
export type GetLinodeIPs200Ipv4PrivateItem = {
  /** The private IPv4 address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string;
  /** The ID of the Linode this address currently belongs to.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address.
 */
  rdns?: string;
  /** The Region this address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeFirewallsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeFirewallsDefault = {
  errors?: GetLinodeFirewallsDefaultErrorsItem[];
};

export type GetLinodeFirewalls200 = {
  data?: GetLinodeFirewalls200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.

 */
export type GetLinodeFirewalls200DataItemStatus = typeof GetLinodeFirewalls200DataItemStatus[keyof typeof GetLinodeFirewalls200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeFirewalls200DataItemStatus = {
  enabled: 'enabled',
  disabled: 'disabled',
  deleted: 'deleted',
} as const;

/**
 * A resource that controls incoming and outgoing network traffic to a compute service. Only one enabled Firewall can be attached to a particular service at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a service. Currently, Firewalls can assigned to Linode compute instances and NodeBalancers.

 */
export type GetLinodeFirewalls200DataItem = {
  /** When this Firewall was created.
 */
  readonly created?: string;
  /** The Firewall's unique ID.
 */
  readonly id?: number;
  /** The Firewall's label, for display purposes only.

Firewall labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
  * Must be between 3 and 32 characters.
  * Must be unique.
 */
  label?: string;
  /** The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
 */
  rules?: GetLinodeFirewalls200DataItemRules;
  /** The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
 */
  readonly status?: GetLinodeFirewalls200DataItemStatus;
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Firewall was last updated.
 */
  readonly updated?: string;
};

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type GetLinodeFirewalls200DataItemRulesOutboundPolicy = typeof GetLinodeFirewalls200DataItemRulesOutboundPolicy[keyof typeof GetLinodeFirewalls200DataItemRulesOutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeFirewalls200DataItemRulesOutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type GetLinodeFirewalls200DataItemRulesInboundPolicy = typeof GetLinodeFirewalls200DataItemRulesInboundPolicy[keyof typeof GetLinodeFirewalls200DataItemRulesInboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeFirewalls200DataItemRulesInboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type GetLinodeFirewalls200DataItemRules = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: GetLinodeFirewalls200DataItemRulesInboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: GetLinodeFirewalls200DataItemRulesInboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: GetLinodeFirewalls200DataItemRulesOutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: GetLinodeFirewalls200DataItemRulesOutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type GetLinodeFirewalls200DataItemRulesOutboundItemProtocol = typeof GetLinodeFirewalls200DataItemRulesOutboundItemProtocol[keyof typeof GetLinodeFirewalls200DataItemRulesOutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeFirewalls200DataItemRulesOutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetLinodeFirewalls200DataItemRulesOutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetLinodeFirewalls200DataItemRulesOutboundItemAction = typeof GetLinodeFirewalls200DataItemRulesOutboundItemAction[keyof typeof GetLinodeFirewalls200DataItemRulesOutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeFirewalls200DataItemRulesOutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetLinodeFirewalls200DataItemRulesOutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetLinodeFirewalls200DataItemRulesOutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetLinodeFirewalls200DataItemRulesOutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetLinodeFirewalls200DataItemRulesOutboundItemProtocol;
};

/**
 * The type of network traffic affected by this rule.

 */
export type GetLinodeFirewalls200DataItemRulesInboundItemProtocol = typeof GetLinodeFirewalls200DataItemRulesInboundItemProtocol[keyof typeof GetLinodeFirewalls200DataItemRulesInboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeFirewalls200DataItemRulesInboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type GetLinodeFirewalls200DataItemRulesInboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type GetLinodeFirewalls200DataItemRulesInboundItemAction = typeof GetLinodeFirewalls200DataItemRulesInboundItemAction[keyof typeof GetLinodeFirewalls200DataItemRulesInboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeFirewalls200DataItemRulesInboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type GetLinodeFirewalls200DataItemRulesInboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: GetLinodeFirewalls200DataItemRulesInboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: GetLinodeFirewalls200DataItemRulesInboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: GetLinodeFirewalls200DataItemRulesInboundItemProtocol;
};

export type GetLinodeFirewallsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ResizeDiskDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ResizeDiskDefault = {
  errors?: ResizeDiskDefaultErrorsItem[];
};

export type ResizeDisk200 = { [key: string]: any };

export type ResizeDiskBody = {
  /** The desired size, in MB, of the disk.
 */
  size: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ResetDiskPasswordDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ResetDiskPasswordDefault = {
  errors?: ResetDiskPasswordDefaultErrorsItem[];
};

export type ResetDiskPassword200 = { [key: string]: any };

export type ResetDiskPasswordBody = {
  /** The new root password for the OS installed on this Disk.
The password must meet the complexity strength validation requirements for a strong password.
 */
  password: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CloneLinodeDiskDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CloneLinodeDiskDefault = {
  errors?: CloneLinodeDiskDefaultErrorsItem[];
};

/**
 * A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.

 */
export type CloneLinodeDisk200Status = typeof CloneLinodeDisk200Status[keyof typeof CloneLinodeDisk200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneLinodeDisk200Status = {
  ready: 'ready',
  not_ready: 'not ready',
  deleting: 'deleting',
} as const;

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type CloneLinodeDisk200Filesystem = typeof CloneLinodeDisk200Filesystem[keyof typeof CloneLinodeDisk200Filesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneLinodeDisk200Filesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type CloneLinodeDisk200 = {
  /** When this Disk was created. */
  readonly created?: string;
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: CloneLinodeDisk200Filesystem;
  /** This Disk's ID which must be provided for all operations impacting this Disk.
 */
  readonly id?: number;
  /** The Disk's label is for display purposes only.
 */
  label?: string;
  /** The size of the Disk in MB. */
  size?: number;
  /** A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.
 */
  readonly status?: CloneLinodeDisk200Status;
  /** When this Disk was last updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteDiskDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteDiskDefault = {
  errors?: DeleteDiskDefaultErrorsItem[];
};

export type DeleteDisk200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateDiskDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateDiskDefault = {
  errors?: UpdateDiskDefaultErrorsItem[];
};

/**
 * A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.

 */
export type UpdateDisk200Status = typeof UpdateDisk200Status[keyof typeof UpdateDisk200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDisk200Status = {
  ready: 'ready',
  not_ready: 'not ready',
  deleting: 'deleting',
} as const;

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type UpdateDisk200Filesystem = typeof UpdateDisk200Filesystem[keyof typeof UpdateDisk200Filesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDisk200Filesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type UpdateDisk200 = {
  /** When this Disk was created. */
  readonly created?: string;
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: UpdateDisk200Filesystem;
  /** This Disk's ID which must be provided for all operations impacting this Disk.
 */
  readonly id?: number;
  /** The Disk's label is for display purposes only.
 */
  label?: string;
  /** The size of the Disk in MB. */
  size?: number;
  /** A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.
 */
  readonly status?: UpdateDisk200Status;
  /** When this Disk was last updated. */
  readonly updated?: string;
};

/**
 * A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.

 */
export type UpdateDiskBodyStatus = typeof UpdateDiskBodyStatus[keyof typeof UpdateDiskBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDiskBodyStatus = {
  ready: 'ready',
  not_ready: 'not ready',
  deleting: 'deleting',
} as const;

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type UpdateDiskBodyFilesystem = typeof UpdateDiskBodyFilesystem[keyof typeof UpdateDiskBodyFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDiskBodyFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type UpdateDiskBody = {
  /** When this Disk was created. */
  readonly created?: string;
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: UpdateDiskBodyFilesystem;
  /** This Disk's ID which must be provided for all operations impacting this Disk.
 */
  readonly id?: number;
  /** The Disk's label is for display purposes only.
 */
  label?: string;
  /** The size of the Disk in MB. */
  size?: number;
  /** A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.
 */
  readonly status?: UpdateDiskBodyStatus;
  /** When this Disk was last updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeDiskDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeDiskDefault = {
  errors?: GetLinodeDiskDefaultErrorsItem[];
};

/**
 * A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.

 */
export type GetLinodeDisk200Status = typeof GetLinodeDisk200Status[keyof typeof GetLinodeDisk200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeDisk200Status = {
  ready: 'ready',
  not_ready: 'not ready',
  deleting: 'deleting',
} as const;

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type GetLinodeDisk200Filesystem = typeof GetLinodeDisk200Filesystem[keyof typeof GetLinodeDisk200Filesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeDisk200Filesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type GetLinodeDisk200 = {
  /** When this Disk was created. */
  readonly created?: string;
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: GetLinodeDisk200Filesystem;
  /** This Disk's ID which must be provided for all operations impacting this Disk.
 */
  readonly id?: number;
  /** The Disk's label is for display purposes only.
 */
  label?: string;
  /** The size of the Disk in MB. */
  size?: number;
  /** A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.
 */
  readonly status?: GetLinodeDisk200Status;
  /** When this Disk was last updated. */
  readonly updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AddLinodeDiskDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AddLinodeDiskDefault = {
  errors?: AddLinodeDiskDefaultErrorsItem[];
};

/**
 * A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.

 */
export type AddLinodeDisk200Status = typeof AddLinodeDisk200Status[keyof typeof AddLinodeDisk200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeDisk200Status = {
  ready: 'ready',
  not_ready: 'not ready',
  deleting: 'deleting',
} as const;

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type AddLinodeDisk200Filesystem = typeof AddLinodeDisk200Filesystem[keyof typeof AddLinodeDisk200Filesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeDisk200Filesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type AddLinodeDisk200 = {
  /** When this Disk was created. */
  readonly created?: string;
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: AddLinodeDisk200Filesystem;
  /** This Disk's ID which must be provided for all operations impacting this Disk.
 */
  readonly id?: number;
  /** The Disk's label is for display purposes only.
 */
  label?: string;
  /** The size of the Disk in MB. */
  size?: number;
  /** A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.
 */
  readonly status?: AddLinodeDisk200Status;
  /** When this Disk was last updated. */
  readonly updated?: string;
};

/**
 * This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.

 */
export type AddLinodeDiskBodyAllOfStackscriptData = { [key: string]: any };

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type AddLinodeDiskBodyAllOfFilesystem = typeof AddLinodeDiskBodyAllOfFilesystem[keyof typeof AddLinodeDiskBodyAllOfFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeDiskBodyAllOfFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

/**
 * Disk object request.
 */
export type AddLinodeDiskBodyAllOf = {
  /** A list of public SSH keys that will be automatically appended
to the root user's `~/.ssh/authorized_keys` file when deploying from an Image.
 */
  authorized_keys?: string[];
  /** A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.
 */
  authorized_users?: string[];
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: AddLinodeDiskBodyAllOfFilesystem;
  /** An Image ID to deploy the Linode Disk from.

Access the Images List ([GET /images](/docs/api/images/#images-list)) endpoint with authentication to view
all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating
a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Access the User's
Grant Update ([PUT /account/users/{username}/grants](/docs/api/account/#users-grants-update)) endpoint to
adjust permissions for an Account Image.
 */
  image?: string;
  /** The Disk's label is for display purposes only.
 */
  label?: string;
  /** This sets the root user's password on a newly-created Linode Disk when deploying from an Image.

* **Required** when creating a Linode Disk from an Image, including when using a StackScript.

* Must meet a password strength score requirement that is calculated internally by the API.
If the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.
 */
  root_pass?: string;
  /** The size of the Disk in MB.

Images require a minimum size. Access the Image View ([GET /images/{imageID}](/docs/api/images/#image-view)) endpoint to view its size.
 */
  size?: number;
  /** This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.
 */
  stackscript_data?: AddLinodeDiskBodyAllOfStackscriptData;
  /** A StackScript ID that will cause the referenced StackScript to be run during
deployment of this Linode. A compatible `image` is required to use a
StackScript. To get a list of available StackScript and their permitted Images
see [/stackscripts](/docs/api/stackscripts/#stackscripts-list).
This field cannot be used when deploying from a Backup or a Private Image.
 */
  stackscript_id?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeDisksDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeDisksDefault = {
  errors?: GetLinodeDisksDefaultErrorsItem[];
};

export type GetLinodeDisks200 = {
  data?: GetLinodeDisks200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.

 */
export type GetLinodeDisks200DataItemStatus = typeof GetLinodeDisks200DataItemStatus[keyof typeof GetLinodeDisks200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeDisks200DataItemStatus = {
  ready: 'ready',
  not_ready: 'not ready',
  deleting: 'deleting',
} as const;

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type GetLinodeDisks200DataItemFilesystem = typeof GetLinodeDisks200DataItemFilesystem[keyof typeof GetLinodeDisks200DataItemFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeDisks200DataItemFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type GetLinodeDisks200DataItem = {
  /** When this Disk was created. */
  readonly created?: string;
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: GetLinodeDisks200DataItemFilesystem;
  /** This Disk's ID which must be provided for all operations impacting this Disk.
 */
  readonly id?: number;
  /** The Disk's label is for display purposes only.
 */
  label?: string;
  /** The size of the Disk in MB. */
  size?: number;
  /** A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.
 */
  readonly status?: GetLinodeDisks200DataItemStatus;
  /** When this Disk was last updated. */
  readonly updated?: string;
};

export type GetLinodeDisksParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteLinodeConfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteLinodeConfigDefault = {
  errors?: DeleteLinodeConfigDefaultErrorsItem[];
};

export type DeleteLinodeConfig200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateLinodeConfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateLinodeConfigDefault = {
  errors?: UpdateLinodeConfigDefaultErrorsItem[];
};

/**
 * Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.

 */
export type UpdateLinodeConfig200VirtMode = typeof UpdateLinodeConfig200VirtMode[keyof typeof UpdateLinodeConfig200VirtMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeConfig200VirtMode = {
  paravirt: 'paravirt',
  fullvirt: 'fullvirt',
} as const;

/**
 * Defines the state of your Linode after booting. Defaults to `default`.

 */
export type UpdateLinodeConfig200RunLevel = typeof UpdateLinodeConfig200RunLevel[keyof typeof UpdateLinodeConfig200RunLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeConfig200RunLevel = {
  default: 'default',
  single: 'single',
  binbash: 'binbash',
} as const;

export type UpdateLinodeConfig200 = {
  /** Optional field for arbitrary User comments on this Config. */
  comments?: string | null;
  /** A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.
 */
  devices?: UpdateLinodeConfig200Devices;
  /** Helpers enabled when booting to this Linode Config. */
  helpers?: UpdateLinodeConfig200Helpers;
  /** The ID of this Config. */
  readonly id?: number;
  /** An array of Network Interfaces to add to this Linode's Configuration Profile.

At least one and up to three interface objects can be entered in this array. The position in the array determines which of the Linode's network interfaces is configured:

- First [0]:  eth0
- Second [1]: eth1
- Third [2]:  eth2

When updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.

If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.

**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
 */
  interfaces?: UpdateLinodeConfig200InterfacesItem[];
  /** A Kernel ID to boot a Linode with. Here are examples of commonly-used kernels:

* `linode/latest-64bit` (default): Our latest kernel at the time of instance boot/reboot.
* `linode/grub2`: The upstream distribution-supplied kernel that is installed on the primary disk, or a custom kernel if installed.
* `linode/direct-disk`: The MBR (Master Boot Record) of the primary disk/root device, used instead of a Linux kernel.

For a complete list of options, use the [Kernels List](/docs/api/linode-instances/#kernels-list) command.
 */
  kernel?: string;
  /** The Config's label is for display purposes only.
 */
  label?: string;
  /** Defaults to the total RAM of the Linode.
 */
  memory_limit?: number;
  /** The root device to boot.
* If no value or an invalid value is provided, root device will default to `/dev/sda`.
* If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
 */
  root_device?: string;
  /** Defines the state of your Linode after booting. Defaults to `default`.
 */
  run_level?: UpdateLinodeConfig200RunLevel;
  /** Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.
 */
  virt_mode?: UpdateLinodeConfig200VirtMode;
};

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type UpdateLinodeConfig200InterfacesItemPurpose = typeof UpdateLinodeConfig200InterfacesItemPurpose[keyof typeof UpdateLinodeConfig200InterfacesItemPurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeConfig200InterfacesItemPurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export type UpdateLinodeConfig200InterfacesItem = {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: UpdateLinodeConfig200InterfacesItemPurpose;
};

/**
 * Helpers enabled when booting to this Linode Config.
 */
export type UpdateLinodeConfig200Helpers = {
  /** Populates the /dev directory early during boot without udev.  Defaults to false.
 */
  devtmpfs_automount?: boolean;
  /** Helps maintain correct inittab/upstart console device. */
  distro?: boolean;
  /** Creates a modules dependency file for the Kernel you run. */
  modules_dep?: boolean;
  /** Automatically configures static networking. */
  network?: boolean;
  /** Disables updatedb cron job to avoid disk thrashing. */
  updatedb_disabled?: boolean;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfig200DevicesSdh = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfig200DevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfig200DevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfig200DevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfig200DevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfig200DevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfig200DevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfig200DevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.

 */
export type UpdateLinodeConfig200Devices = {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: UpdateLinodeConfig200DevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: UpdateLinodeConfig200DevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: UpdateLinodeConfig200DevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: UpdateLinodeConfig200DevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: UpdateLinodeConfig200DevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: UpdateLinodeConfig200DevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: UpdateLinodeConfig200DevicesSdg;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdh?: UpdateLinodeConfig200DevicesSdh;
};

/**
 * Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.

 */
export type UpdateLinodeConfigBodyVirtMode = typeof UpdateLinodeConfigBodyVirtMode[keyof typeof UpdateLinodeConfigBodyVirtMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeConfigBodyVirtMode = {
  paravirt: 'paravirt',
  fullvirt: 'fullvirt',
} as const;

/**
 * Defines the state of your Linode after booting. Defaults to `default`.

 */
export type UpdateLinodeConfigBodyRunLevel = typeof UpdateLinodeConfigBodyRunLevel[keyof typeof UpdateLinodeConfigBodyRunLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeConfigBodyRunLevel = {
  default: 'default',
  single: 'single',
  binbash: 'binbash',
} as const;

export type UpdateLinodeConfigBody = {
  /** Optional field for arbitrary User comments on this Config. */
  comments?: string | null;
  /** A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.
 */
  devices?: UpdateLinodeConfigBodyDevices;
  /** Helpers enabled when booting to this Linode Config. */
  helpers?: UpdateLinodeConfigBodyHelpers;
  /** The ID of this Config. */
  readonly id?: number;
  /** An array of Network Interfaces to add to this Linode's Configuration Profile.

At least one and up to three interface objects can be entered in this array. The position in the array determines which of the Linode's network interfaces is configured:

- First [0]:  eth0
- Second [1]: eth1
- Third [2]:  eth2

When updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.

If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.

**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
 */
  interfaces?: UpdateLinodeConfigBodyInterfacesItem[];
  /** A Kernel ID to boot a Linode with. Here are examples of commonly-used kernels:

* `linode/latest-64bit` (default): Our latest kernel at the time of instance boot/reboot.
* `linode/grub2`: The upstream distribution-supplied kernel that is installed on the primary disk, or a custom kernel if installed.
* `linode/direct-disk`: The MBR (Master Boot Record) of the primary disk/root device, used instead of a Linux kernel.

For a complete list of options, use the [Kernels List](/docs/api/linode-instances/#kernels-list) command.
 */
  kernel?: string;
  /** The Config's label is for display purposes only.
 */
  label?: string;
  /** Defaults to the total RAM of the Linode.
 */
  memory_limit?: number;
  /** The root device to boot.
* If no value or an invalid value is provided, root device will default to `/dev/sda`.
* If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
 */
  root_device?: string;
  /** Defines the state of your Linode after booting. Defaults to `default`.
 */
  run_level?: UpdateLinodeConfigBodyRunLevel;
  /** Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.
 */
  virt_mode?: UpdateLinodeConfigBodyVirtMode;
};

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type UpdateLinodeConfigBodyInterfacesItemPurpose = typeof UpdateLinodeConfigBodyInterfacesItemPurpose[keyof typeof UpdateLinodeConfigBodyInterfacesItemPurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeConfigBodyInterfacesItemPurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export type UpdateLinodeConfigBodyInterfacesItem = {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: UpdateLinodeConfigBodyInterfacesItemPurpose;
};

/**
 * Helpers enabled when booting to this Linode Config.
 */
export type UpdateLinodeConfigBodyHelpers = {
  /** Populates the /dev directory early during boot without udev.  Defaults to false.
 */
  devtmpfs_automount?: boolean;
  /** Helps maintain correct inittab/upstart console device. */
  distro?: boolean;
  /** Creates a modules dependency file for the Kernel you run. */
  modules_dep?: boolean;
  /** Automatically configures static networking. */
  network?: boolean;
  /** Disables updatedb cron job to avoid disk thrashing. */
  updatedb_disabled?: boolean;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfigBodyDevicesSdh = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfigBodyDevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfigBodyDevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfigBodyDevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfigBodyDevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfigBodyDevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfigBodyDevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type UpdateLinodeConfigBodyDevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.

 */
export type UpdateLinodeConfigBodyDevices = {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: UpdateLinodeConfigBodyDevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: UpdateLinodeConfigBodyDevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: UpdateLinodeConfigBodyDevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: UpdateLinodeConfigBodyDevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: UpdateLinodeConfigBodyDevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: UpdateLinodeConfigBodyDevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: UpdateLinodeConfigBodyDevicesSdg;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdh?: UpdateLinodeConfigBodyDevicesSdh;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeConfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeConfigDefault = {
  errors?: GetLinodeConfigDefaultErrorsItem[];
};

/**
 * Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.

 */
export type GetLinodeConfig200VirtMode = typeof GetLinodeConfig200VirtMode[keyof typeof GetLinodeConfig200VirtMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeConfig200VirtMode = {
  paravirt: 'paravirt',
  fullvirt: 'fullvirt',
} as const;

/**
 * Defines the state of your Linode after booting. Defaults to `default`.

 */
export type GetLinodeConfig200RunLevel = typeof GetLinodeConfig200RunLevel[keyof typeof GetLinodeConfig200RunLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeConfig200RunLevel = {
  default: 'default',
  single: 'single',
  binbash: 'binbash',
} as const;

export type GetLinodeConfig200 = {
  /** Optional field for arbitrary User comments on this Config. */
  comments?: string | null;
  /** A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.
 */
  devices?: GetLinodeConfig200Devices;
  /** Helpers enabled when booting to this Linode Config. */
  helpers?: GetLinodeConfig200Helpers;
  /** The ID of this Config. */
  readonly id?: number;
  /** An array of Network Interfaces to add to this Linode's Configuration Profile.

At least one and up to three interface objects can be entered in this array. The position in the array determines which of the Linode's network interfaces is configured:

- First [0]:  eth0
- Second [1]: eth1
- Third [2]:  eth2

When updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.

If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.

**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
 */
  interfaces?: GetLinodeConfig200InterfacesItem[];
  /** A Kernel ID to boot a Linode with. Here are examples of commonly-used kernels:

* `linode/latest-64bit` (default): Our latest kernel at the time of instance boot/reboot.
* `linode/grub2`: The upstream distribution-supplied kernel that is installed on the primary disk, or a custom kernel if installed.
* `linode/direct-disk`: The MBR (Master Boot Record) of the primary disk/root device, used instead of a Linux kernel.

For a complete list of options, use the [Kernels List](/docs/api/linode-instances/#kernels-list) command.
 */
  kernel?: string;
  /** The Config's label is for display purposes only.
 */
  label?: string;
  /** Defaults to the total RAM of the Linode.
 */
  memory_limit?: number;
  /** The root device to boot.
* If no value or an invalid value is provided, root device will default to `/dev/sda`.
* If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
 */
  root_device?: string;
  /** Defines the state of your Linode after booting. Defaults to `default`.
 */
  run_level?: GetLinodeConfig200RunLevel;
  /** Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.
 */
  virt_mode?: GetLinodeConfig200VirtMode;
};

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type GetLinodeConfig200InterfacesItemPurpose = typeof GetLinodeConfig200InterfacesItemPurpose[keyof typeof GetLinodeConfig200InterfacesItemPurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeConfig200InterfacesItemPurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export type GetLinodeConfig200InterfacesItem = {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: GetLinodeConfig200InterfacesItemPurpose;
};

/**
 * Helpers enabled when booting to this Linode Config.
 */
export type GetLinodeConfig200Helpers = {
  /** Populates the /dev directory early during boot without udev.  Defaults to false.
 */
  devtmpfs_automount?: boolean;
  /** Helps maintain correct inittab/upstart console device. */
  distro?: boolean;
  /** Creates a modules dependency file for the Kernel you run. */
  modules_dep?: boolean;
  /** Automatically configures static networking. */
  network?: boolean;
  /** Disables updatedb cron job to avoid disk thrashing. */
  updatedb_disabled?: boolean;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfig200DevicesSdh = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfig200DevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfig200DevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfig200DevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfig200DevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfig200DevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfig200DevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfig200DevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.

 */
export type GetLinodeConfig200Devices = {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: GetLinodeConfig200DevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: GetLinodeConfig200DevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: GetLinodeConfig200DevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: GetLinodeConfig200DevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: GetLinodeConfig200DevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: GetLinodeConfig200DevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: GetLinodeConfig200DevicesSdg;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdh?: GetLinodeConfig200DevicesSdh;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AddLinodeConfigDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AddLinodeConfigDefault = {
  errors?: AddLinodeConfigDefaultErrorsItem[];
};

/**
 * Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.

 */
export type AddLinodeConfig200VirtMode = typeof AddLinodeConfig200VirtMode[keyof typeof AddLinodeConfig200VirtMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeConfig200VirtMode = {
  paravirt: 'paravirt',
  fullvirt: 'fullvirt',
} as const;

/**
 * Defines the state of your Linode after booting. Defaults to `default`.

 */
export type AddLinodeConfig200RunLevel = typeof AddLinodeConfig200RunLevel[keyof typeof AddLinodeConfig200RunLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeConfig200RunLevel = {
  default: 'default',
  single: 'single',
  binbash: 'binbash',
} as const;

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type AddLinodeConfig200InterfacesItemPurpose = typeof AddLinodeConfig200InterfacesItemPurpose[keyof typeof AddLinodeConfig200InterfacesItemPurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeConfig200InterfacesItemPurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export type AddLinodeConfig200InterfacesItem = {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: AddLinodeConfig200InterfacesItemPurpose;
};

/**
 * Helpers enabled when booting to this Linode Config.
 */
export type AddLinodeConfig200Helpers = {
  /** Populates the /dev directory early during boot without udev.  Defaults to false.
 */
  devtmpfs_automount?: boolean;
  /** Helps maintain correct inittab/upstart console device. */
  distro?: boolean;
  /** Creates a modules dependency file for the Kernel you run. */
  modules_dep?: boolean;
  /** Automatically configures static networking. */
  network?: boolean;
  /** Disables updatedb cron job to avoid disk thrashing. */
  updatedb_disabled?: boolean;
};

export type AddLinodeConfig200 = {
  /** Optional field for arbitrary User comments on this Config. */
  comments?: string | null;
  /** A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.
 */
  devices?: AddLinodeConfig200Devices;
  /** Helpers enabled when booting to this Linode Config. */
  helpers?: AddLinodeConfig200Helpers;
  /** The ID of this Config. */
  readonly id?: number;
  /** An array of Network Interfaces to add to this Linode's Configuration Profile.

At least one and up to three interface objects can be entered in this array. The position in the array determines which of the Linode's network interfaces is configured:

- First [0]:  eth0
- Second [1]: eth1
- Third [2]:  eth2

When updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.

If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.

**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
 */
  interfaces?: AddLinodeConfig200InterfacesItem[];
  /** A Kernel ID to boot a Linode with. Here are examples of commonly-used kernels:

* `linode/latest-64bit` (default): Our latest kernel at the time of instance boot/reboot.
* `linode/grub2`: The upstream distribution-supplied kernel that is installed on the primary disk, or a custom kernel if installed.
* `linode/direct-disk`: The MBR (Master Boot Record) of the primary disk/root device, used instead of a Linux kernel.

For a complete list of options, use the [Kernels List](/docs/api/linode-instances/#kernels-list) command.
 */
  kernel?: string;
  /** The Config's label is for display purposes only.
 */
  label?: string;
  /** Defaults to the total RAM of the Linode.
 */
  memory_limit?: number;
  /** The root device to boot.
* If no value or an invalid value is provided, root device will default to `/dev/sda`.
* If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
 */
  root_device?: string;
  /** Defines the state of your Linode after booting. Defaults to `default`.
 */
  run_level?: AddLinodeConfig200RunLevel;
  /** Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.
 */
  virt_mode?: AddLinodeConfig200VirtMode;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfig200DevicesSdh = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfig200DevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfig200DevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfig200DevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfig200DevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfig200DevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfig200DevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfig200DevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.

 */
export type AddLinodeConfig200Devices = {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: AddLinodeConfig200DevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: AddLinodeConfig200DevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: AddLinodeConfig200DevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: AddLinodeConfig200DevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: AddLinodeConfig200DevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: AddLinodeConfig200DevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: AddLinodeConfig200DevicesSdg;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdh?: AddLinodeConfig200DevicesSdh;
};

/**
 * Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.

 */
export type AddLinodeConfigBodyAllOfVirtMode = typeof AddLinodeConfigBodyAllOfVirtMode[keyof typeof AddLinodeConfigBodyAllOfVirtMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeConfigBodyAllOfVirtMode = {
  paravirt: 'paravirt',
  fullvirt: 'fullvirt',
} as const;

/**
 * Defines the state of your Linode after booting. Defaults to `default`.

 */
export type AddLinodeConfigBodyAllOfRunLevel = typeof AddLinodeConfigBodyAllOfRunLevel[keyof typeof AddLinodeConfigBodyAllOfRunLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeConfigBodyAllOfRunLevel = {
  default: 'default',
  single: 'single',
  binbash: 'binbash',
} as const;

export type AddLinodeConfigBodyAllOf = {
  /** Optional field for arbitrary User comments on this Config. */
  comments?: string | null;
  /** A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.
 */
  devices?: AddLinodeConfigBodyAllOfDevices;
  /** Helpers enabled when booting to this Linode Config. */
  helpers?: AddLinodeConfigBodyAllOfHelpers;
  /** The ID of this Config. */
  readonly id?: number;
  /** An array of Network Interfaces to add to this Linode's Configuration Profile.

At least one and up to three interface objects can be entered in this array. The position in the array determines which of the Linode's network interfaces is configured:

- First [0]:  eth0
- Second [1]: eth1
- Third [2]:  eth2

When updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.

If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.

**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
 */
  interfaces?: AddLinodeConfigBodyAllOfInterfacesItem[];
  /** A Kernel ID to boot a Linode with. Here are examples of commonly-used kernels:

* `linode/latest-64bit` (default): Our latest kernel at the time of instance boot/reboot.
* `linode/grub2`: The upstream distribution-supplied kernel that is installed on the primary disk, or a custom kernel if installed.
* `linode/direct-disk`: The MBR (Master Boot Record) of the primary disk/root device, used instead of a Linux kernel.

For a complete list of options, use the [Kernels List](/docs/api/linode-instances/#kernels-list) command.
 */
  kernel?: string;
  /** The Config's label is for display purposes only.
 */
  label?: string;
  /** Defaults to the total RAM of the Linode.
 */
  memory_limit?: number;
  /** The root device to boot.
* If no value or an invalid value is provided, root device will default to `/dev/sda`.
* If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
 */
  root_device?: string;
  /** Defines the state of your Linode after booting. Defaults to `default`.
 */
  run_level?: AddLinodeConfigBodyAllOfRunLevel;
  /** Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.
 */
  virt_mode?: AddLinodeConfigBodyAllOfVirtMode;
};

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type AddLinodeConfigBodyAllOfInterfacesItemPurpose = typeof AddLinodeConfigBodyAllOfInterfacesItemPurpose[keyof typeof AddLinodeConfigBodyAllOfInterfacesItemPurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddLinodeConfigBodyAllOfInterfacesItemPurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export type AddLinodeConfigBodyAllOfInterfacesItem = {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: AddLinodeConfigBodyAllOfInterfacesItemPurpose;
};

/**
 * Helpers enabled when booting to this Linode Config.
 */
export type AddLinodeConfigBodyAllOfHelpers = {
  /** Populates the /dev directory early during boot without udev.  Defaults to false.
 */
  devtmpfs_automount?: boolean;
  /** Helps maintain correct inittab/upstart console device. */
  distro?: boolean;
  /** Creates a modules dependency file for the Kernel you run. */
  modules_dep?: boolean;
  /** Automatically configures static networking. */
  network?: boolean;
  /** Disables updatedb cron job to avoid disk thrashing. */
  updatedb_disabled?: boolean;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfigBodyAllOfDevicesSdh = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfigBodyAllOfDevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfigBodyAllOfDevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfigBodyAllOfDevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfigBodyAllOfDevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfigBodyAllOfDevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfigBodyAllOfDevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type AddLinodeConfigBodyAllOfDevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.

 */
export type AddLinodeConfigBodyAllOfDevices = {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: AddLinodeConfigBodyAllOfDevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: AddLinodeConfigBodyAllOfDevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: AddLinodeConfigBodyAllOfDevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: AddLinodeConfigBodyAllOfDevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: AddLinodeConfigBodyAllOfDevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: AddLinodeConfigBodyAllOfDevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: AddLinodeConfigBodyAllOfDevicesSdg;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdh?: AddLinodeConfigBodyAllOfDevicesSdh;
};

/**
 * Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.

 */
export type GetLinodeConfigs200DataItemVirtMode = typeof GetLinodeConfigs200DataItemVirtMode[keyof typeof GetLinodeConfigs200DataItemVirtMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeConfigs200DataItemVirtMode = {
  paravirt: 'paravirt',
  fullvirt: 'fullvirt',
} as const;

/**
 * Defines the state of your Linode after booting. Defaults to `default`.

 */
export type GetLinodeConfigs200DataItemRunLevel = typeof GetLinodeConfigs200DataItemRunLevel[keyof typeof GetLinodeConfigs200DataItemRunLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeConfigs200DataItemRunLevel = {
  default: 'default',
  single: 'single',
  binbash: 'binbash',
} as const;

export type GetLinodeConfigs200DataItem = {
  /** Optional field for arbitrary User comments on this Config. */
  comments?: string | null;
  /** A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.
 */
  devices?: GetLinodeConfigs200DataItemDevices;
  /** Helpers enabled when booting to this Linode Config. */
  helpers?: GetLinodeConfigs200DataItemHelpers;
  /** The ID of this Config. */
  readonly id?: number;
  /** An array of Network Interfaces to add to this Linode's Configuration Profile.

At least one and up to three interface objects can be entered in this array. The position in the array determines which of the Linode's network interfaces is configured:

- First [0]:  eth0
- Second [1]: eth1
- Third [2]:  eth2

When updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.

If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.

**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
 */
  interfaces?: GetLinodeConfigs200DataItemInterfacesItem[];
  /** A Kernel ID to boot a Linode with. Here are examples of commonly-used kernels:

* `linode/latest-64bit` (default): Our latest kernel at the time of instance boot/reboot.
* `linode/grub2`: The upstream distribution-supplied kernel that is installed on the primary disk, or a custom kernel if installed.
* `linode/direct-disk`: The MBR (Master Boot Record) of the primary disk/root device, used instead of a Linux kernel.

For a complete list of options, use the [Kernels List](/docs/api/linode-instances/#kernels-list) command.
 */
  kernel?: string;
  /** The Config's label is for display purposes only.
 */
  label?: string;
  /** Defaults to the total RAM of the Linode.
 */
  memory_limit?: number;
  /** The root device to boot.
* If no value or an invalid value is provided, root device will default to `/dev/sda`.
* If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
 */
  root_device?: string;
  /** Defines the state of your Linode after booting. Defaults to `default`.
 */
  run_level?: GetLinodeConfigs200DataItemRunLevel;
  /** Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.
 */
  virt_mode?: GetLinodeConfigs200DataItemVirtMode;
};

export type GetLinodeConfigs200 = {
  data?: GetLinodeConfigs200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type GetLinodeConfigs200DataItemInterfacesItemPurpose = typeof GetLinodeConfigs200DataItemInterfacesItemPurpose[keyof typeof GetLinodeConfigs200DataItemInterfacesItemPurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeConfigs200DataItemInterfacesItemPurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export type GetLinodeConfigs200DataItemInterfacesItem = {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: GetLinodeConfigs200DataItemInterfacesItemPurpose;
};

/**
 * Helpers enabled when booting to this Linode Config.
 */
export type GetLinodeConfigs200DataItemHelpers = {
  /** Populates the /dev directory early during boot without udev.  Defaults to false.
 */
  devtmpfs_automount?: boolean;
  /** Helps maintain correct inittab/upstart console device. */
  distro?: boolean;
  /** Creates a modules dependency file for the Kernel you run. */
  modules_dep?: boolean;
  /** Automatically configures static networking. */
  network?: boolean;
  /** Disables updatedb cron job to avoid disk thrashing. */
  updatedb_disabled?: boolean;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfigs200DataItemDevicesSdh = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfigs200DataItemDevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfigs200DataItemDevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfigs200DataItemDevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfigs200DataItemDevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfigs200DataItemDevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfigs200DataItemDevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type GetLinodeConfigs200DataItemDevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.

 */
export type GetLinodeConfigs200DataItemDevices = {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: GetLinodeConfigs200DataItemDevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: GetLinodeConfigs200DataItemDevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: GetLinodeConfigs200DataItemDevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: GetLinodeConfigs200DataItemDevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: GetLinodeConfigs200DataItemDevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: GetLinodeConfigs200DataItemDevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: GetLinodeConfigs200DataItemDevicesSdg;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdh?: GetLinodeConfigs200DataItemDevicesSdh;
};

export type GetLinodeConfigsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CloneLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CloneLinodeInstanceDefault = {
  errors?: CloneLinodeInstanceDefaultErrorsItem[];
};

/**
 * A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".

 */
export type CloneLinodeInstance200Status = typeof CloneLinodeInstance200Status[keyof typeof CloneLinodeInstance200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneLinodeInstance200Status = {
  running: 'running',
  offline: 'offline',
  booting: 'booting',
  rebooting: 'rebooting',
  shutting_down: 'shutting_down',
  provisioning: 'provisioning',
  deleting: 'deleting',
  migrating: 'migrating',
  rebuilding: 'rebuilding',
  cloning: 'cloning',
  restoring: 'restoring',
  stopped: 'stopped',
  billing_suspension: 'billing_suspension',
} as const;

/**
 * Information about the resources available to this Linode.
 */
export type CloneLinodeInstance200Specs = {
  /** The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.
 */
  readonly disk?: number;
  /** The number of gpus this Linode has access to.
 */
  readonly gpus?: number;
  /** The amount of RAM, in MB, this Linode has access to.

Typically, a Linode boots with all of its available RAM, but this can be configured in a Config profile. See the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
 */
  readonly memory?: number;
  /** The amount of network transfer this Linode is allotted each month. */
  readonly transfer?: number;
  /** The number of vcpus this Linode has access to.
 */
  readonly vcpus?: number;
};

export type CloneLinodeInstance200Image = string | null;

/**
 * The virtualization software powering this Linode.

 */
export type CloneLinodeInstance200Hypervisor = typeof CloneLinodeInstance200Hypervisor[keyof typeof CloneLinodeInstance200Hypervisor];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneLinodeInstance200Hypervisor = {
  kvm: 'kvm',
} as const;

export type CloneLinodeInstance200 = {
  alerts?: CloneLinodeInstance200Alerts;
  /** Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).
 */
  backups?: CloneLinodeInstance200Backups;
  /** When this Linode was created. */
  readonly created?: string;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Linode Create](/docs/api/linode-instances/#linode-create) description for more information on Metadata. */
  readonly has_user_data?: boolean;
  /** The Linode's host machine, as a UUID. */
  readonly host_uuid?: string;
  /** The virtualization software powering this Linode.
 */
  readonly hypervisor?: CloneLinodeInstance200Hypervisor;
  /** This Linode's ID which must be provided for all operations impacting this Linode.
 */
  readonly id?: number;
  readonly image?: CloneLinodeInstance200Image;
  /** This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address
upon creation, and may get a single private IPv4 address if needed. You may need to
[open a support ticket](/docs/api/support/#support-ticket-open)
to get additional IPv4 addresses.

IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
See the [/networking](/docs/api/networking/) endpoints for details.
 */
  readonly ipv4?: string[];
  /** This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
 */
  readonly ipv6?: string | null;
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).
 */
  readonly region?: string;
  /** Information about the resources available to this Linode. */
  readonly specs?: CloneLinodeInstance200Specs;
  /** A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".
 */
  readonly status?: CloneLinodeInstance200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.
To change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).
 */
  readonly type?: string;
  /** When this Linode was last updated. */
  readonly updated?: string;
  /** The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
 */
  watchdog_enabled?: boolean;
};

/**
 * The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.

 */
export type CloneLinodeInstance200BackupsScheduleWindow = typeof CloneLinodeInstance200BackupsScheduleWindow[keyof typeof CloneLinodeInstance200BackupsScheduleWindow];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneLinodeInstance200BackupsScheduleWindow = {
  Scheduling: 'Scheduling',
  W0: 'W0',
  W2: 'W2',
  W4: 'W4',
  W6: 'W6',
  W8: 'W8',
  W10: 'W10',
  W12: 'W12',
  W14: 'W14',
  W16: 'W16',
  W18: 'W18',
  W20: 'W20',
  W22: 'W22',
  null: null,
} as const;

/**
 * The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.

 */
export type CloneLinodeInstance200BackupsScheduleDay = typeof CloneLinodeInstance200BackupsScheduleDay[keyof typeof CloneLinodeInstance200BackupsScheduleDay];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneLinodeInstance200BackupsScheduleDay = {
  Scheduling: 'Scheduling',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  null: null,
} as const;

export type CloneLinodeInstance200BackupsSchedule = {
  /** The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.
 */
  day?: CloneLinodeInstance200BackupsScheduleDay;
  /** The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.
 */
  window?: CloneLinodeInstance200BackupsScheduleWindow;
};

/**
 * Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).

 */
export type CloneLinodeInstance200Backups = {
  /** Whether Backups for this Linode are available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).
 */
  readonly enabled?: boolean;
  /** The last successful backup date. 'null' if there was no previous backup. */
  readonly last_successful?: string;
  schedule?: CloneLinodeInstance200BackupsSchedule;
};

export type CloneLinodeInstance200Alerts = {
  /** The percentage of CPU usage required to trigger an alert.
If the average CPU usage over two hours exceeds this value, we'll send you an alert.
Your Linode's total CPU capacity is represented as 100%, multiplied by its number of
cores.

For example, a two core Linode's CPU capacity is represented as 200%. If you want
to be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.

The default value is 90% multiplied by the number of cores.

If the value is set to `0` (zero), the alert is disabled.
 */
  cpu?: number;
  /** The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.
 */
  io?: number;
  /** The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_in?: number;
  /** The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_out?: number;
  /** The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.
 */
  transfer_quota?: number;
};

/**
 * An object containing user-defined data relevant to the creation of Linodes.

 */
export type CloneLinodeInstanceBodyMetadata = {
  /** Base64-encoded [cloud-config](/docs/products/compute/compute-instances/guides/metadata-cloud-config/) data.

Cannot be modified after provisioning. To update, use either the [Linode Clone](/docs/api/linode-instances/#linode-clone) or [Linode Rebuild](/docs/api/linode-instances/#linode-rebuild) commands.

Must not be included when cloning to an existing Linode.

Unencoded data must not exceed 65535 bytes, or about 16kb encoded.
 */
  user_data?: string;
};

export type CloneLinodeInstanceBody = {
  /** If this field is set to `true`, the created Linode will
automatically be enrolled in the Linode Backup service. This
will incur an additional charge. Pricing is included in the
response from
[/linodes/types](/docs/api/linode-types/#types-list).

* Can only be included when cloning to a new Linode.
 */
  backups_enabled?: boolean;
  /** An array of configuration profile IDs.
* If the `configs` parameter **is not provided**, then **all configuration profiles and their associated disks will be cloned** from the source Linode. Any disks specified by the `disks` parameter will also be cloned.
* **If an empty array is provided** for the `configs` parameter, then **no configuration profiles (nor their associated disks) will be cloned** from the source Linode. Any disks specified by the `disks` parameter will still be cloned.
* **If a non-empty array is provided** for the `configs` parameter, then **the configuration profiles specified in the array (and their associated disks) will be cloned** from the source Linode. Any disks specified by the `disks` parameter will also be cloned.
 */
  configs?: number[];
  /** An array of disk IDs.
* If the `disks` parameter **is not provided**, then **no extra disks will be cloned** from the source Linode. All disks associated with the configuration profiles specified by the `configs` parameter will still be cloned.
* **If an empty array is provided** for the `disks` parameter, then **no extra disks will be cloned** from the source Linode. All disks associated with the configuration profiles specified by the `configs` parameter will still be cloned.
* **If a non-empty array is provided** for the `disks` parameter, then **the disks specified in the array will be cloned** from the source Linode, in addition to any disks associated with the configuration profiles specified by the `configs` parameter.
 */
  disks?: number[];
  /**
   * A label used to group Linodes for display. Linodes are not required to have a group.

   * @deprecated
   */
  group?: string;
  /** The label to assign this Linode when cloning to a new Linode.
* Can only be provided when cloning to a new Linode.
* Defaults to "linode".
 */
  label?: string;
  /** If an existing Linode is the target for the clone, the ID of that Linode. The existing Linode must have enough resources to accept the clone.
 */
  linode_id?: number;
  /** An object containing user-defined data relevant to the creation of Linodes.
 */
  metadata?: CloneLinodeInstanceBodyMetadata;
  /** If true, the created Linode will have private networking enabled and assigned a private IPv4 address.
* Can only be provided when cloning to a new Linode.
 */
  private_ip?: boolean;
  /** This is the Region where the Linode will be deployed.
To view all available Regions you can deploy to see [/regions](/docs/api/regions/#regions-list).
* Region can only be provided and is required when cloning to a new Linode.
 */
  region?: string;
  /** A Linode's Type determines what resources are available to
it, including disk space, memory, and virtual cpus. The
amounts available to a specific Linode are returned as
`specs` on the Linode object.

To view all available Linode Types you can deploy with
see [/linode/types](/docs/api/linode-types/#types-list).

* Type can only be provided and is required when cloning to a new Linode.
 */
  type?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type BootLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type BootLinodeInstanceDefault = {
  errors?: BootLinodeInstanceDefaultErrorsItem[];
};

export type BootLinodeInstance200 = { [key: string]: any };

export type BootLinodeInstanceBody = {
  /** The Linode Config ID to boot into.
 */
  config_id?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type RestoreBackupDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type RestoreBackupDefault = {
  errors?: RestoreBackupDefaultErrorsItem[];
};

export type RestoreBackup200 = { [key: string]: any };

export type RestoreBackupBody = {
  /** The ID of the Linode to restore a Backup to.
 */
  linode_id: number;
  /** If True, deletes all Disks and Configs on the target Linode
before restoring.

If False, and the Disk image size is larger than the available
space on the Linode, an error message indicating insufficient
space is returned.
 */
  overwrite?: boolean;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetBackupDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetBackupDefault = {
  errors?: GetBackupDefaultErrorsItem[];
};

/**
 * This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.

 */
export type GetBackup200Type = typeof GetBackup200Type[keyof typeof GetBackup200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackup200Type = {
  auto: 'auto',
  snapshot: 'snapshot',
} as const;

/**
 * The current state of a specific Backup.
 */
export type GetBackup200Status = typeof GetBackup200Status[keyof typeof GetBackup200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackup200Status = {
  paused: 'paused',
  pending: 'pending',
  running: 'running',
  needsPostProcessing: 'needsPostProcessing',
  successful: 'successful',
  failed: 'failed',
  userAborted: 'userAborted',
} as const;

/**
 * An object representing a Backup or snapshot for a Linode with Backup service enabled.

 */
export type GetBackup200 = {
  /** Whether this Backup is available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** A list of the labels of the Configuration profiles that are part of the Backup.
 */
  readonly configs?: string[];
  /** The date the Backup was taken. */
  readonly created?: string;
  /** A list of the disks that are part of the Backup.
 */
  readonly disks?: GetBackup200DisksItem[];
  /** The date the Backup completed. */
  readonly finished?: string;
  /** The unique ID of this Backup. */
  readonly id?: number;
  /** A label for Backups that are of type `snapshot`. */
  label?: string | null;
  /** The current state of a specific Backup. */
  readonly status?: GetBackup200Status;
  /** This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.
 */
  readonly type?: GetBackup200Type;
  /** The date the Backup was most recently updated. */
  readonly updated?: string;
};

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type GetBackup200DisksItemFilesystem = typeof GetBackup200DisksItemFilesystem[keyof typeof GetBackup200DisksItemFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackup200DisksItemFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type GetBackup200DisksItem = {
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: GetBackup200DisksItemFilesystem;
  label?: string;
  size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type EnableBackupsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type EnableBackupsDefault = {
  errors?: EnableBackupsDefaultErrorsItem[];
};

export type EnableBackups200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CancelBackupsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CancelBackupsDefault = {
  errors?: CancelBackupsDefaultErrorsItem[];
};

export type CancelBackups200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateSnapshotDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateSnapshotDefault = {
  errors?: CreateSnapshotDefaultErrorsItem[];
};

/**
 * This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.

 */
export type CreateSnapshot200Type = typeof CreateSnapshot200Type[keyof typeof CreateSnapshot200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSnapshot200Type = {
  auto: 'auto',
  snapshot: 'snapshot',
} as const;

/**
 * The current state of a specific Backup.
 */
export type CreateSnapshot200Status = typeof CreateSnapshot200Status[keyof typeof CreateSnapshot200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSnapshot200Status = {
  paused: 'paused',
  pending: 'pending',
  running: 'running',
  needsPostProcessing: 'needsPostProcessing',
  successful: 'successful',
  failed: 'failed',
  userAborted: 'userAborted',
} as const;

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type CreateSnapshot200DisksItemFilesystem = typeof CreateSnapshot200DisksItemFilesystem[keyof typeof CreateSnapshot200DisksItemFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSnapshot200DisksItemFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type CreateSnapshot200DisksItem = {
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: CreateSnapshot200DisksItemFilesystem;
  label?: string;
  size?: number;
};

/**
 * An object representing a Backup or snapshot for a Linode with Backup service enabled.

 */
export type CreateSnapshot200 = {
  /** Whether this Backup is available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** A list of the labels of the Configuration profiles that are part of the Backup.
 */
  readonly configs?: string[];
  /** The date the Backup was taken. */
  readonly created?: string;
  /** A list of the disks that are part of the Backup.
 */
  readonly disks?: CreateSnapshot200DisksItem[];
  /** The date the Backup completed. */
  readonly finished?: string;
  /** The unique ID of this Backup. */
  readonly id?: number;
  /** A label for Backups that are of type `snapshot`. */
  label?: string | null;
  /** The current state of a specific Backup. */
  readonly status?: CreateSnapshot200Status;
  /** This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.
 */
  readonly type?: CreateSnapshot200Type;
  /** The date the Backup was most recently updated. */
  readonly updated?: string;
};

export type CreateSnapshotBody = {
  /** The label for the new snapshot. */
  label: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetBackupsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetBackupsDefault = {
  errors?: GetBackupsDefaultErrorsItem[];
};

export type GetBackups200Snapshot = {
  /** An object representing a Backup or snapshot for a Linode with Backup service enabled.
 */
  current?: GetBackups200SnapshotCurrent;
  /** An object representing a Backup or snapshot for a Linode with Backup service enabled.
 */
  in_progress?: GetBackups200SnapshotInProgress;
};

export type GetBackups200 = {
  automatic?: GetBackups200AutomaticItem[];
  snapshot?: GetBackups200Snapshot;
};

/**
 * This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.

 */
export type GetBackups200SnapshotInProgressType = typeof GetBackups200SnapshotInProgressType[keyof typeof GetBackups200SnapshotInProgressType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackups200SnapshotInProgressType = {
  auto: 'auto',
  snapshot: 'snapshot',
} as const;

/**
 * The current state of a specific Backup.
 */
export type GetBackups200SnapshotInProgressStatus = typeof GetBackups200SnapshotInProgressStatus[keyof typeof GetBackups200SnapshotInProgressStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackups200SnapshotInProgressStatus = {
  paused: 'paused',
  pending: 'pending',
  running: 'running',
  needsPostProcessing: 'needsPostProcessing',
  successful: 'successful',
  failed: 'failed',
  userAborted: 'userAborted',
} as const;

/**
 * An object representing a Backup or snapshot for a Linode with Backup service enabled.

 */
export type GetBackups200SnapshotInProgress = {
  /** Whether this Backup is available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** A list of the labels of the Configuration profiles that are part of the Backup.
 */
  readonly configs?: string[];
  /** The date the Backup was taken. */
  readonly created?: string;
  /** A list of the disks that are part of the Backup.
 */
  readonly disks?: GetBackups200SnapshotInProgressDisksItem[];
  /** The date the Backup completed. */
  readonly finished?: string;
  /** The unique ID of this Backup. */
  readonly id?: number;
  /** A label for Backups that are of type `snapshot`. */
  label?: string | null;
  /** The current state of a specific Backup. */
  readonly status?: GetBackups200SnapshotInProgressStatus;
  /** This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.
 */
  readonly type?: GetBackups200SnapshotInProgressType;
  /** The date the Backup was most recently updated. */
  readonly updated?: string;
};

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type GetBackups200SnapshotInProgressDisksItemFilesystem = typeof GetBackups200SnapshotInProgressDisksItemFilesystem[keyof typeof GetBackups200SnapshotInProgressDisksItemFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackups200SnapshotInProgressDisksItemFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type GetBackups200SnapshotInProgressDisksItem = {
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: GetBackups200SnapshotInProgressDisksItemFilesystem;
  label?: string;
  size?: number;
};

/**
 * This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.

 */
export type GetBackups200SnapshotCurrentType = typeof GetBackups200SnapshotCurrentType[keyof typeof GetBackups200SnapshotCurrentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackups200SnapshotCurrentType = {
  auto: 'auto',
  snapshot: 'snapshot',
} as const;

/**
 * The current state of a specific Backup.
 */
export type GetBackups200SnapshotCurrentStatus = typeof GetBackups200SnapshotCurrentStatus[keyof typeof GetBackups200SnapshotCurrentStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackups200SnapshotCurrentStatus = {
  paused: 'paused',
  pending: 'pending',
  running: 'running',
  needsPostProcessing: 'needsPostProcessing',
  successful: 'successful',
  failed: 'failed',
  userAborted: 'userAborted',
} as const;

/**
 * An object representing a Backup or snapshot for a Linode with Backup service enabled.

 */
export type GetBackups200SnapshotCurrent = {
  /** Whether this Backup is available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** A list of the labels of the Configuration profiles that are part of the Backup.
 */
  readonly configs?: string[];
  /** The date the Backup was taken. */
  readonly created?: string;
  /** A list of the disks that are part of the Backup.
 */
  readonly disks?: GetBackups200SnapshotCurrentDisksItem[];
  /** The date the Backup completed. */
  readonly finished?: string;
  /** The unique ID of this Backup. */
  readonly id?: number;
  /** A label for Backups that are of type `snapshot`. */
  label?: string | null;
  /** The current state of a specific Backup. */
  readonly status?: GetBackups200SnapshotCurrentStatus;
  /** This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.
 */
  readonly type?: GetBackups200SnapshotCurrentType;
  /** The date the Backup was most recently updated. */
  readonly updated?: string;
};

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type GetBackups200SnapshotCurrentDisksItemFilesystem = typeof GetBackups200SnapshotCurrentDisksItemFilesystem[keyof typeof GetBackups200SnapshotCurrentDisksItemFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackups200SnapshotCurrentDisksItemFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type GetBackups200SnapshotCurrentDisksItem = {
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: GetBackups200SnapshotCurrentDisksItemFilesystem;
  label?: string;
  size?: number;
};

export type GetBackups200AutomaticItemAllOfSix = {
  type?: string;
};

export type GetBackups200AutomaticItem = GetBackups200AutomaticItemAllOf & GetBackups200AutomaticItemAllOfSix;

/**
 * This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.

 */
export type GetBackups200AutomaticItemAllOfType = typeof GetBackups200AutomaticItemAllOfType[keyof typeof GetBackups200AutomaticItemAllOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackups200AutomaticItemAllOfType = {
  auto: 'auto',
  snapshot: 'snapshot',
} as const;

/**
 * The current state of a specific Backup.
 */
export type GetBackups200AutomaticItemAllOfStatus = typeof GetBackups200AutomaticItemAllOfStatus[keyof typeof GetBackups200AutomaticItemAllOfStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackups200AutomaticItemAllOfStatus = {
  paused: 'paused',
  pending: 'pending',
  running: 'running',
  needsPostProcessing: 'needsPostProcessing',
  successful: 'successful',
  failed: 'failed',
  userAborted: 'userAborted',
} as const;

/**
 * An object representing a Backup or snapshot for a Linode with Backup service enabled.

 */
export type GetBackups200AutomaticItemAllOf = {
  /** Whether this Backup is available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** A list of the labels of the Configuration profiles that are part of the Backup.
 */
  readonly configs?: string[];
  /** The date the Backup was taken. */
  readonly created?: string;
  /** A list of the disks that are part of the Backup.
 */
  readonly disks?: GetBackups200AutomaticItemAllOfDisksItem[];
  /** The date the Backup completed. */
  readonly finished?: string;
  /** The unique ID of this Backup. */
  readonly id?: number;
  /** A label for Backups that are of type `snapshot`. */
  label?: string | null;
  /** The current state of a specific Backup. */
  readonly status?: GetBackups200AutomaticItemAllOfStatus;
  /** This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.
 */
  readonly type?: GetBackups200AutomaticItemAllOfType;
  /** The date the Backup was most recently updated. */
  readonly updated?: string;
};

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type GetBackups200AutomaticItemAllOfDisksItemFilesystem = typeof GetBackups200AutomaticItemAllOfDisksItemFilesystem[keyof typeof GetBackups200AutomaticItemAllOfDisksItemFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBackups200AutomaticItemAllOfDisksItemFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type GetBackups200AutomaticItemAllOfDisksItem = {
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: GetBackups200AutomaticItemAllOfDisksItemFilesystem;
  label?: string;
  size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteLinodeInstanceDefault = {
  errors?: DeleteLinodeInstanceDefaultErrorsItem[];
};

export type DeleteLinodeInstance200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateLinodeInstanceDefault = {
  errors?: UpdateLinodeInstanceDefaultErrorsItem[];
};

/**
 * A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".

 */
export type UpdateLinodeInstance200Status = typeof UpdateLinodeInstance200Status[keyof typeof UpdateLinodeInstance200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeInstance200Status = {
  running: 'running',
  offline: 'offline',
  booting: 'booting',
  rebooting: 'rebooting',
  shutting_down: 'shutting_down',
  provisioning: 'provisioning',
  deleting: 'deleting',
  migrating: 'migrating',
  rebuilding: 'rebuilding',
  cloning: 'cloning',
  restoring: 'restoring',
  stopped: 'stopped',
  billing_suspension: 'billing_suspension',
} as const;

/**
 * Information about the resources available to this Linode.
 */
export type UpdateLinodeInstance200Specs = {
  /** The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.
 */
  readonly disk?: number;
  /** The number of gpus this Linode has access to.
 */
  readonly gpus?: number;
  /** The amount of RAM, in MB, this Linode has access to.

Typically, a Linode boots with all of its available RAM, but this can be configured in a Config profile. See the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
 */
  readonly memory?: number;
  /** The amount of network transfer this Linode is allotted each month. */
  readonly transfer?: number;
  /** The number of vcpus this Linode has access to.
 */
  readonly vcpus?: number;
};

export type UpdateLinodeInstance200Image = string | null;

/**
 * The virtualization software powering this Linode.

 */
export type UpdateLinodeInstance200Hypervisor = typeof UpdateLinodeInstance200Hypervisor[keyof typeof UpdateLinodeInstance200Hypervisor];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeInstance200Hypervisor = {
  kvm: 'kvm',
} as const;

/**
 * Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).

 */
export type UpdateLinodeInstance200Backups = {
  /** Whether Backups for this Linode are available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).
 */
  readonly enabled?: boolean;
  /** The last successful backup date. 'null' if there was no previous backup. */
  readonly last_successful?: string;
  schedule?: UpdateLinodeInstance200BackupsSchedule;
};

export type UpdateLinodeInstance200 = {
  alerts?: UpdateLinodeInstance200Alerts;
  /** Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).
 */
  backups?: UpdateLinodeInstance200Backups;
  /** When this Linode was created. */
  readonly created?: string;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Linode Create](/docs/api/linode-instances/#linode-create) description for more information on Metadata. */
  readonly has_user_data?: boolean;
  /** The Linode's host machine, as a UUID. */
  readonly host_uuid?: string;
  /** The virtualization software powering this Linode.
 */
  readonly hypervisor?: UpdateLinodeInstance200Hypervisor;
  /** This Linode's ID which must be provided for all operations impacting this Linode.
 */
  readonly id?: number;
  readonly image?: UpdateLinodeInstance200Image;
  /** This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address
upon creation, and may get a single private IPv4 address if needed. You may need to
[open a support ticket](/docs/api/support/#support-ticket-open)
to get additional IPv4 addresses.

IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
See the [/networking](/docs/api/networking/) endpoints for details.
 */
  readonly ipv4?: string[];
  /** This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
 */
  readonly ipv6?: string | null;
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).
 */
  readonly region?: string;
  /** Information about the resources available to this Linode. */
  readonly specs?: UpdateLinodeInstance200Specs;
  /** A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".
 */
  readonly status?: UpdateLinodeInstance200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.
To change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).
 */
  readonly type?: string;
  /** When this Linode was last updated. */
  readonly updated?: string;
  /** The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
 */
  watchdog_enabled?: boolean;
};

/**
 * The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.

 */
export type UpdateLinodeInstance200BackupsScheduleWindow = typeof UpdateLinodeInstance200BackupsScheduleWindow[keyof typeof UpdateLinodeInstance200BackupsScheduleWindow];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeInstance200BackupsScheduleWindow = {
  Scheduling: 'Scheduling',
  W0: 'W0',
  W2: 'W2',
  W4: 'W4',
  W6: 'W6',
  W8: 'W8',
  W10: 'W10',
  W12: 'W12',
  W14: 'W14',
  W16: 'W16',
  W18: 'W18',
  W20: 'W20',
  W22: 'W22',
  null: null,
} as const;

/**
 * The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.

 */
export type UpdateLinodeInstance200BackupsScheduleDay = typeof UpdateLinodeInstance200BackupsScheduleDay[keyof typeof UpdateLinodeInstance200BackupsScheduleDay];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeInstance200BackupsScheduleDay = {
  Scheduling: 'Scheduling',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  null: null,
} as const;

export type UpdateLinodeInstance200BackupsSchedule = {
  /** The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.
 */
  day?: UpdateLinodeInstance200BackupsScheduleDay;
  /** The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.
 */
  window?: UpdateLinodeInstance200BackupsScheduleWindow;
};

export type UpdateLinodeInstance200Alerts = {
  /** The percentage of CPU usage required to trigger an alert.
If the average CPU usage over two hours exceeds this value, we'll send you an alert.
Your Linode's total CPU capacity is represented as 100%, multiplied by its number of
cores.

For example, a two core Linode's CPU capacity is represented as 200%. If you want
to be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.

The default value is 90% multiplied by the number of cores.

If the value is set to `0` (zero), the alert is disabled.
 */
  cpu?: number;
  /** The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.
 */
  io?: number;
  /** The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_in?: number;
  /** The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_out?: number;
  /** The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.
 */
  transfer_quota?: number;
};

/**
 * A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".

 */
export type UpdateLinodeInstanceBodyStatus = typeof UpdateLinodeInstanceBodyStatus[keyof typeof UpdateLinodeInstanceBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeInstanceBodyStatus = {
  running: 'running',
  offline: 'offline',
  booting: 'booting',
  rebooting: 'rebooting',
  shutting_down: 'shutting_down',
  provisioning: 'provisioning',
  deleting: 'deleting',
  migrating: 'migrating',
  rebuilding: 'rebuilding',
  cloning: 'cloning',
  restoring: 'restoring',
  stopped: 'stopped',
  billing_suspension: 'billing_suspension',
} as const;

/**
 * Information about the resources available to this Linode.
 */
export type UpdateLinodeInstanceBodySpecs = {
  /** The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.
 */
  readonly disk?: number;
  /** The number of gpus this Linode has access to.
 */
  readonly gpus?: number;
  /** The amount of RAM, in MB, this Linode has access to.

Typically, a Linode boots with all of its available RAM, but this can be configured in a Config profile. See the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
 */
  readonly memory?: number;
  /** The amount of network transfer this Linode is allotted each month. */
  readonly transfer?: number;
  /** The number of vcpus this Linode has access to.
 */
  readonly vcpus?: number;
};

export type UpdateLinodeInstanceBodyImage = string | null;

/**
 * The virtualization software powering this Linode.

 */
export type UpdateLinodeInstanceBodyHypervisor = typeof UpdateLinodeInstanceBodyHypervisor[keyof typeof UpdateLinodeInstanceBodyHypervisor];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeInstanceBodyHypervisor = {
  kvm: 'kvm',
} as const;

/**
 * Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).

 */
export type UpdateLinodeInstanceBodyBackups = {
  /** Whether Backups for this Linode are available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).
 */
  readonly enabled?: boolean;
  /** The last successful backup date. 'null' if there was no previous backup. */
  readonly last_successful?: string;
  schedule?: UpdateLinodeInstanceBodyBackupsSchedule;
};

export type UpdateLinodeInstanceBody = {
  alerts?: UpdateLinodeInstanceBodyAlerts;
  /** Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).
 */
  backups?: UpdateLinodeInstanceBodyBackups;
  /** When this Linode was created. */
  readonly created?: string;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Linode Create](/docs/api/linode-instances/#linode-create) description for more information on Metadata. */
  readonly has_user_data?: boolean;
  /** The Linode's host machine, as a UUID. */
  readonly host_uuid?: string;
  /** The virtualization software powering this Linode.
 */
  readonly hypervisor?: UpdateLinodeInstanceBodyHypervisor;
  /** This Linode's ID which must be provided for all operations impacting this Linode.
 */
  readonly id?: number;
  readonly image?: UpdateLinodeInstanceBodyImage;
  /** This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address
upon creation, and may get a single private IPv4 address if needed. You may need to
[open a support ticket](/docs/api/support/#support-ticket-open)
to get additional IPv4 addresses.

IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
See the [/networking](/docs/api/networking/) endpoints for details.
 */
  readonly ipv4?: string[];
  /** This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
 */
  readonly ipv6?: string | null;
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).
 */
  readonly region?: string;
  /** Information about the resources available to this Linode. */
  readonly specs?: UpdateLinodeInstanceBodySpecs;
  /** A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".
 */
  readonly status?: UpdateLinodeInstanceBodyStatus;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.
To change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).
 */
  readonly type?: string;
  /** When this Linode was last updated. */
  readonly updated?: string;
  /** The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
 */
  watchdog_enabled?: boolean;
};

/**
 * The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.

 */
export type UpdateLinodeInstanceBodyBackupsScheduleWindow = typeof UpdateLinodeInstanceBodyBackupsScheduleWindow[keyof typeof UpdateLinodeInstanceBodyBackupsScheduleWindow];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeInstanceBodyBackupsScheduleWindow = {
  Scheduling: 'Scheduling',
  W0: 'W0',
  W2: 'W2',
  W4: 'W4',
  W6: 'W6',
  W8: 'W8',
  W10: 'W10',
  W12: 'W12',
  W14: 'W14',
  W16: 'W16',
  W18: 'W18',
  W20: 'W20',
  W22: 'W22',
  null: null,
} as const;

/**
 * The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.

 */
export type UpdateLinodeInstanceBodyBackupsScheduleDay = typeof UpdateLinodeInstanceBodyBackupsScheduleDay[keyof typeof UpdateLinodeInstanceBodyBackupsScheduleDay];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLinodeInstanceBodyBackupsScheduleDay = {
  Scheduling: 'Scheduling',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  null: null,
} as const;

export type UpdateLinodeInstanceBodyBackupsSchedule = {
  /** The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.
 */
  day?: UpdateLinodeInstanceBodyBackupsScheduleDay;
  /** The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.
 */
  window?: UpdateLinodeInstanceBodyBackupsScheduleWindow;
};

export type UpdateLinodeInstanceBodyAlerts = {
  /** The percentage of CPU usage required to trigger an alert.
If the average CPU usage over two hours exceeds this value, we'll send you an alert.
Your Linode's total CPU capacity is represented as 100%, multiplied by its number of
cores.

For example, a two core Linode's CPU capacity is represented as 200%. If you want
to be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.

The default value is 90% multiplied by the number of cores.

If the value is set to `0` (zero), the alert is disabled.
 */
  cpu?: number;
  /** The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.
 */
  io?: number;
  /** The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_in?: number;
  /** The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_out?: number;
  /** The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.
 */
  transfer_quota?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeInstanceDefault = {
  errors?: GetLinodeInstanceDefaultErrorsItem[];
};

/**
 * A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".

 */
export type GetLinodeInstance200Status = typeof GetLinodeInstance200Status[keyof typeof GetLinodeInstance200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeInstance200Status = {
  running: 'running',
  offline: 'offline',
  booting: 'booting',
  rebooting: 'rebooting',
  shutting_down: 'shutting_down',
  provisioning: 'provisioning',
  deleting: 'deleting',
  migrating: 'migrating',
  rebuilding: 'rebuilding',
  cloning: 'cloning',
  restoring: 'restoring',
  stopped: 'stopped',
  billing_suspension: 'billing_suspension',
} as const;

/**
 * Information about the resources available to this Linode.
 */
export type GetLinodeInstance200Specs = {
  /** The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.
 */
  readonly disk?: number;
  /** The number of gpus this Linode has access to.
 */
  readonly gpus?: number;
  /** The amount of RAM, in MB, this Linode has access to.

Typically, a Linode boots with all of its available RAM, but this can be configured in a Config profile. See the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
 */
  readonly memory?: number;
  /** The amount of network transfer this Linode is allotted each month. */
  readonly transfer?: number;
  /** The number of vcpus this Linode has access to.
 */
  readonly vcpus?: number;
};

export type GetLinodeInstance200Image = string | null;

/**
 * The virtualization software powering this Linode.

 */
export type GetLinodeInstance200Hypervisor = typeof GetLinodeInstance200Hypervisor[keyof typeof GetLinodeInstance200Hypervisor];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeInstance200Hypervisor = {
  kvm: 'kvm',
} as const;

/**
 * Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).

 */
export type GetLinodeInstance200Backups = {
  /** Whether Backups for this Linode are available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).
 */
  readonly enabled?: boolean;
  /** The last successful backup date. 'null' if there was no previous backup. */
  readonly last_successful?: string;
  schedule?: GetLinodeInstance200BackupsSchedule;
};

export type GetLinodeInstance200 = {
  alerts?: GetLinodeInstance200Alerts;
  /** Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).
 */
  backups?: GetLinodeInstance200Backups;
  /** When this Linode was created. */
  readonly created?: string;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Linode Create](/docs/api/linode-instances/#linode-create) description for more information on Metadata. */
  readonly has_user_data?: boolean;
  /** The Linode's host machine, as a UUID. */
  readonly host_uuid?: string;
  /** The virtualization software powering this Linode.
 */
  readonly hypervisor?: GetLinodeInstance200Hypervisor;
  /** This Linode's ID which must be provided for all operations impacting this Linode.
 */
  readonly id?: number;
  readonly image?: GetLinodeInstance200Image;
  /** This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address
upon creation, and may get a single private IPv4 address if needed. You may need to
[open a support ticket](/docs/api/support/#support-ticket-open)
to get additional IPv4 addresses.

IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
See the [/networking](/docs/api/networking/) endpoints for details.
 */
  readonly ipv4?: string[];
  /** This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
 */
  readonly ipv6?: string | null;
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).
 */
  readonly region?: string;
  /** Information about the resources available to this Linode. */
  readonly specs?: GetLinodeInstance200Specs;
  /** A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".
 */
  readonly status?: GetLinodeInstance200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.
To change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).
 */
  readonly type?: string;
  /** When this Linode was last updated. */
  readonly updated?: string;
  /** The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
 */
  watchdog_enabled?: boolean;
};

/**
 * The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.

 */
export type GetLinodeInstance200BackupsScheduleWindow = typeof GetLinodeInstance200BackupsScheduleWindow[keyof typeof GetLinodeInstance200BackupsScheduleWindow];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeInstance200BackupsScheduleWindow = {
  Scheduling: 'Scheduling',
  W0: 'W0',
  W2: 'W2',
  W4: 'W4',
  W6: 'W6',
  W8: 'W8',
  W10: 'W10',
  W12: 'W12',
  W14: 'W14',
  W16: 'W16',
  W18: 'W18',
  W20: 'W20',
  W22: 'W22',
  null: null,
} as const;

/**
 * The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.

 */
export type GetLinodeInstance200BackupsScheduleDay = typeof GetLinodeInstance200BackupsScheduleDay[keyof typeof GetLinodeInstance200BackupsScheduleDay];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeInstance200BackupsScheduleDay = {
  Scheduling: 'Scheduling',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  null: null,
} as const;

export type GetLinodeInstance200BackupsSchedule = {
  /** The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.
 */
  day?: GetLinodeInstance200BackupsScheduleDay;
  /** The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.
 */
  window?: GetLinodeInstance200BackupsScheduleWindow;
};

export type GetLinodeInstance200Alerts = {
  /** The percentage of CPU usage required to trigger an alert.
If the average CPU usage over two hours exceeds this value, we'll send you an alert.
Your Linode's total CPU capacity is represented as 100%, multiplied by its number of
cores.

For example, a two core Linode's CPU capacity is represented as 200%. If you want
to be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.

The default value is 90% multiplied by the number of cores.

If the value is set to `0` (zero), the alert is disabled.
 */
  cpu?: number;
  /** The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.
 */
  io?: number;
  /** The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_in?: number;
  /** The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_out?: number;
  /** The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.
 */
  transfer_quota?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateLinodeInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateLinodeInstanceDefault = {
  errors?: CreateLinodeInstanceDefaultErrorsItem[];
};

/**
 * A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".

 */
export type CreateLinodeInstance200Status = typeof CreateLinodeInstance200Status[keyof typeof CreateLinodeInstance200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateLinodeInstance200Status = {
  running: 'running',
  offline: 'offline',
  booting: 'booting',
  rebooting: 'rebooting',
  shutting_down: 'shutting_down',
  provisioning: 'provisioning',
  deleting: 'deleting',
  migrating: 'migrating',
  rebuilding: 'rebuilding',
  cloning: 'cloning',
  restoring: 'restoring',
  stopped: 'stopped',
  billing_suspension: 'billing_suspension',
} as const;

/**
 * Information about the resources available to this Linode.
 */
export type CreateLinodeInstance200Specs = {
  /** The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.
 */
  readonly disk?: number;
  /** The number of gpus this Linode has access to.
 */
  readonly gpus?: number;
  /** The amount of RAM, in MB, this Linode has access to.

Typically, a Linode boots with all of its available RAM, but this can be configured in a Config profile. See the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
 */
  readonly memory?: number;
  /** The amount of network transfer this Linode is allotted each month. */
  readonly transfer?: number;
  /** The number of vcpus this Linode has access to.
 */
  readonly vcpus?: number;
};

export type CreateLinodeInstance200Image = string | null;

/**
 * The virtualization software powering this Linode.

 */
export type CreateLinodeInstance200Hypervisor = typeof CreateLinodeInstance200Hypervisor[keyof typeof CreateLinodeInstance200Hypervisor];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateLinodeInstance200Hypervisor = {
  kvm: 'kvm',
} as const;

/**
 * Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).

 */
export type CreateLinodeInstance200Backups = {
  /** Whether Backups for this Linode are available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).
 */
  readonly enabled?: boolean;
  /** The last successful backup date. 'null' if there was no previous backup. */
  readonly last_successful?: string;
  schedule?: CreateLinodeInstance200BackupsSchedule;
};

export type CreateLinodeInstance200 = {
  alerts?: CreateLinodeInstance200Alerts;
  /** Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).
 */
  backups?: CreateLinodeInstance200Backups;
  /** When this Linode was created. */
  readonly created?: string;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Linode Create](/docs/api/linode-instances/#linode-create) description for more information on Metadata. */
  readonly has_user_data?: boolean;
  /** The Linode's host machine, as a UUID. */
  readonly host_uuid?: string;
  /** The virtualization software powering this Linode.
 */
  readonly hypervisor?: CreateLinodeInstance200Hypervisor;
  /** This Linode's ID which must be provided for all operations impacting this Linode.
 */
  readonly id?: number;
  readonly image?: CreateLinodeInstance200Image;
  /** This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address
upon creation, and may get a single private IPv4 address if needed. You may need to
[open a support ticket](/docs/api/support/#support-ticket-open)
to get additional IPv4 addresses.

IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
See the [/networking](/docs/api/networking/) endpoints for details.
 */
  readonly ipv4?: string[];
  /** This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
 */
  readonly ipv6?: string | null;
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).
 */
  readonly region?: string;
  /** Information about the resources available to this Linode. */
  readonly specs?: CreateLinodeInstance200Specs;
  /** A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".
 */
  readonly status?: CreateLinodeInstance200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.
To change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).
 */
  readonly type?: string;
  /** When this Linode was last updated. */
  readonly updated?: string;
  /** The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
 */
  watchdog_enabled?: boolean;
};

/**
 * The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.

 */
export type CreateLinodeInstance200BackupsScheduleWindow = typeof CreateLinodeInstance200BackupsScheduleWindow[keyof typeof CreateLinodeInstance200BackupsScheduleWindow];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateLinodeInstance200BackupsScheduleWindow = {
  Scheduling: 'Scheduling',
  W0: 'W0',
  W2: 'W2',
  W4: 'W4',
  W6: 'W6',
  W8: 'W8',
  W10: 'W10',
  W12: 'W12',
  W14: 'W14',
  W16: 'W16',
  W18: 'W18',
  W20: 'W20',
  W22: 'W22',
  null: null,
} as const;

/**
 * The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.

 */
export type CreateLinodeInstance200BackupsScheduleDay = typeof CreateLinodeInstance200BackupsScheduleDay[keyof typeof CreateLinodeInstance200BackupsScheduleDay];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateLinodeInstance200BackupsScheduleDay = {
  Scheduling: 'Scheduling',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  null: null,
} as const;

export type CreateLinodeInstance200BackupsSchedule = {
  /** The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.
 */
  day?: CreateLinodeInstance200BackupsScheduleDay;
  /** The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.
 */
  window?: CreateLinodeInstance200BackupsScheduleWindow;
};

export type CreateLinodeInstance200Alerts = {
  /** The percentage of CPU usage required to trigger an alert.
If the average CPU usage over two hours exceeds this value, we'll send you an alert.
Your Linode's total CPU capacity is represented as 100%, multiplied by its number of
cores.

For example, a two core Linode's CPU capacity is represented as 200%. If you want
to be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.

The default value is 90% multiplied by the number of cores.

If the value is set to `0` (zero), the alert is disabled.
 */
  cpu?: number;
  /** The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.
 */
  io?: number;
  /** The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_in?: number;
  /** The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_out?: number;
  /** The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.
 */
  transfer_quota?: number;
};

export type CreateLinodeInstanceBodyAllOfFour = {
  /** A Backup ID from another Linode's available backups. Your User must have
`read_write` access to that Linode, the Backup must have a `status` of
`successful`, and the Linode must be deployed to the same `region` as the Backup.
See [GET /linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list)
for a Linode's available backups.

This field and the `image` field are mutually exclusive.
 */
  backup_id?: number;
  /** If this field is set to `true`, the created Linode will automatically be
enrolled in the Linode Backup service. This will incur an additional charge.
The cost for the Backup service is dependent on the Type of Linode deployed.

This option is always treated as `true` if the account-wide `backups_enabled`
setting is `true`.  See [account settings](/docs/api/account/#account-settings-view)
for more information.

Backup pricing is included in the response from [/linodes/types](/docs/api/linode-types/#types-list)
 */
  backups_enabled?: boolean;
  /** The `id` of the Firewall to attach this Linode to upon creation. */
  firewall_id?: number;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** An array of Network Interfaces to add to this Linode's Configuration Profile.

At least one and up to three interface objects can be entered in this array. The position in the array determines which of the Linode's network interfaces is configured:

- First [0]:  eth0
- Second [1]: eth1
- Third [2]:  eth2

When updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.

If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.

**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
 */
  interfaces?: CreateLinodeInstanceBodyAllOfFourInterfacesItem[];
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** If true, the created Linode will have private networking enabled and assigned a private IPv4 address.
 */
  private_ip?: boolean;
  /** The [Region](/docs/api/regions/#regions-list) where the Linode will be located.
 */
  region?: string;
  /** When deploying from an Image, this field is optional, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
 */
  swap_size?: number;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** The [Linode Type](/docs/api/linode-types/#types-list) of the Linode you are creating.
 */
  type?: string;
};

export type CreateLinodeInstanceBody = CreateLinodeInstanceBodyAllOf & CreateLinodeInstanceBodyAllOfFour;

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type CreateLinodeInstanceBodyAllOfFourInterfacesItemPurpose = typeof CreateLinodeInstanceBodyAllOfFourInterfacesItemPurpose[keyof typeof CreateLinodeInstanceBodyAllOfFourInterfacesItemPurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateLinodeInstanceBodyAllOfFourInterfacesItemPurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export type CreateLinodeInstanceBodyAllOfFourInterfacesItem = {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: CreateLinodeInstanceBodyAllOfFourInterfacesItemPurpose;
};

/**
 * This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.

 */
export type CreateLinodeInstanceBodyAllOfStackscriptData = { [key: string]: any };

/**
 * An object containing user-defined data relevant to the creation of Linodes.

 */
export type CreateLinodeInstanceBodyAllOfMetadata = {
  /** Base64-encoded [cloud-config](/docs/products/compute/compute-instances/guides/metadata-cloud-config/) data.

Cannot be modified after provisioning. To update, use either the [Linode Clone](/docs/api/linode-instances/#linode-clone) or [Linode Rebuild](/docs/api/linode-instances/#linode-rebuild) commands.

Must not be included when cloning to an existing Linode.

Unencoded data must not exceed 65535 bytes, or about 16kb encoded.
 */
  user_data?: string;
};

/**
 * Common properties for creating and rebuilding Linodes.
 */
export type CreateLinodeInstanceBodyAllOf = {
  /** A list of public SSH keys that will be automatically appended
to the root user's `~/.ssh/authorized_keys` file when deploying from an Image.
 */
  authorized_keys?: string[];
  /** A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.
 */
  authorized_users?: string[];
  /** This field defaults to `true` if the Linode is created with an Image or from a Backup.
If it is deployed from an Image or a Backup and you wish it to remain `offline` after deployment, set this to `false`.
 */
  booted?: boolean;
  /** An Image ID to deploy the Linode Disk from.

Access the Images List ([GET /images](/docs/api/images/#images-list)) endpoint with authentication to view
all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating
a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Access the User's
Grant Update ([PUT /account/users/{username}/grants](/docs/api/account/#users-grants-update)) endpoint to
adjust permissions for an Account Image.
 */
  image?: string;
  /** An object containing user-defined data relevant to the creation of Linodes.
 */
  metadata?: CreateLinodeInstanceBodyAllOfMetadata;
  /** This sets the root user's password on a newly-created Linode Disk when deploying from an Image.

* **Required** when creating a Linode Disk from an Image, including when using a StackScript.

* Must meet a password strength score requirement that is calculated internally by the API.
If the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.
 */
  root_pass?: string;
  /** This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.
 */
  stackscript_data?: CreateLinodeInstanceBodyAllOfStackscriptData;
  /** A StackScript ID that will cause the referenced StackScript to be run during
deployment of this Linode. A compatible `image` is required to use a
StackScript. To get a list of available StackScript and their permitted Images
see [/stackscripts](/docs/api/stackscripts/#stackscripts-list).
This field cannot be used when deploying from a Backup or a Private Image.
 */
  stackscript_id?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetLinodeInstancesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetLinodeInstancesDefault = {
  errors?: GetLinodeInstancesDefaultErrorsItem[];
};

export type GetLinodeInstances200 = {
  data?: GetLinodeInstances200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".

 */
export type GetLinodeInstances200DataItemStatus = typeof GetLinodeInstances200DataItemStatus[keyof typeof GetLinodeInstances200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeInstances200DataItemStatus = {
  running: 'running',
  offline: 'offline',
  booting: 'booting',
  rebooting: 'rebooting',
  shutting_down: 'shutting_down',
  provisioning: 'provisioning',
  deleting: 'deleting',
  migrating: 'migrating',
  rebuilding: 'rebuilding',
  cloning: 'cloning',
  restoring: 'restoring',
  stopped: 'stopped',
  billing_suspension: 'billing_suspension',
} as const;

/**
 * Information about the resources available to this Linode.
 */
export type GetLinodeInstances200DataItemSpecs = {
  /** The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.
 */
  readonly disk?: number;
  /** The number of gpus this Linode has access to.
 */
  readonly gpus?: number;
  /** The amount of RAM, in MB, this Linode has access to.

Typically, a Linode boots with all of its available RAM, but this can be configured in a Config profile. See the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
 */
  readonly memory?: number;
  /** The amount of network transfer this Linode is allotted each month. */
  readonly transfer?: number;
  /** The number of vcpus this Linode has access to.
 */
  readonly vcpus?: number;
};

export type GetLinodeInstances200DataItemImage = string | null;

/**
 * The virtualization software powering this Linode.

 */
export type GetLinodeInstances200DataItemHypervisor = typeof GetLinodeInstances200DataItemHypervisor[keyof typeof GetLinodeInstances200DataItemHypervisor];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeInstances200DataItemHypervisor = {
  kvm: 'kvm',
} as const;

/**
 * Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).

 */
export type GetLinodeInstances200DataItemBackups = {
  /** Whether Backups for this Linode are available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).
 */
  readonly enabled?: boolean;
  /** The last successful backup date. 'null' if there was no previous backup. */
  readonly last_successful?: string;
  schedule?: GetLinodeInstances200DataItemBackupsSchedule;
};

export type GetLinodeInstances200DataItem = {
  alerts?: GetLinodeInstances200DataItemAlerts;
  /** Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).
 */
  backups?: GetLinodeInstances200DataItemBackups;
  /** When this Linode was created. */
  readonly created?: string;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Linode Create](/docs/api/linode-instances/#linode-create) description for more information on Metadata. */
  readonly has_user_data?: boolean;
  /** The Linode's host machine, as a UUID. */
  readonly host_uuid?: string;
  /** The virtualization software powering this Linode.
 */
  readonly hypervisor?: GetLinodeInstances200DataItemHypervisor;
  /** This Linode's ID which must be provided for all operations impacting this Linode.
 */
  readonly id?: number;
  readonly image?: GetLinodeInstances200DataItemImage;
  /** This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address
upon creation, and may get a single private IPv4 address if needed. You may need to
[open a support ticket](/docs/api/support/#support-ticket-open)
to get additional IPv4 addresses.

IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
See the [/networking](/docs/api/networking/) endpoints for details.
 */
  readonly ipv4?: string[];
  /** This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
 */
  readonly ipv6?: string | null;
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).
 */
  readonly region?: string;
  /** Information about the resources available to this Linode. */
  readonly specs?: GetLinodeInstances200DataItemSpecs;
  /** A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".
 */
  readonly status?: GetLinodeInstances200DataItemStatus;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.
To change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).
 */
  readonly type?: string;
  /** When this Linode was last updated. */
  readonly updated?: string;
  /** The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
 */
  watchdog_enabled?: boolean;
};

/**
 * The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.

 */
export type GetLinodeInstances200DataItemBackupsScheduleWindow = typeof GetLinodeInstances200DataItemBackupsScheduleWindow[keyof typeof GetLinodeInstances200DataItemBackupsScheduleWindow];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeInstances200DataItemBackupsScheduleWindow = {
  Scheduling: 'Scheduling',
  W0: 'W0',
  W2: 'W2',
  W4: 'W4',
  W6: 'W6',
  W8: 'W8',
  W10: 'W10',
  W12: 'W12',
  W14: 'W14',
  W16: 'W16',
  W18: 'W18',
  W20: 'W20',
  W22: 'W22',
  null: null,
} as const;

/**
 * The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.

 */
export type GetLinodeInstances200DataItemBackupsScheduleDay = typeof GetLinodeInstances200DataItemBackupsScheduleDay[keyof typeof GetLinodeInstances200DataItemBackupsScheduleDay];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLinodeInstances200DataItemBackupsScheduleDay = {
  Scheduling: 'Scheduling',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  null: null,
} as const;

export type GetLinodeInstances200DataItemBackupsSchedule = {
  /** The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.
 */
  day?: GetLinodeInstances200DataItemBackupsScheduleDay;
  /** The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.
 */
  window?: GetLinodeInstances200DataItemBackupsScheduleWindow;
};

export type GetLinodeInstances200DataItemAlerts = {
  /** The percentage of CPU usage required to trigger an alert.
If the average CPU usage over two hours exceeds this value, we'll send you an alert.
Your Linode's total CPU capacity is represented as 100%, multiplied by its number of
cores.

For example, a two core Linode's CPU capacity is represented as 200%. If you want
to be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.

The default value is 90% multiplied by the number of cores.

If the value is set to `0` (zero), the alert is disabled.
 */
  cpu?: number;
  /** The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.
 */
  io?: number;
  /** The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_in?: number;
  /** The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_out?: number;
  /** The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.
 */
  transfer_quota?: number;
};

export type GetLinodeInstancesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteImageDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteImageDefault = {
  errors?: DeleteImageDefaultErrorsItem[];
};

export type DeleteImage200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateImageDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateImageDefault = {
  errors?: UpdateImageDefaultErrorsItem[];
};

/**
 * How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.

 */
export type UpdateImage200Type = typeof UpdateImage200Type[keyof typeof UpdateImage200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateImage200Type = {
  manual: 'manual',
  automatic: 'automatic',
} as const;

/**
 * The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.

 */
export type UpdateImage200Status = typeof UpdateImage200Status[keyof typeof UpdateImage200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateImage200Status = {
  creating: 'creating',
  pending_upload: 'pending_upload',
  available: 'available',
} as const;

/**
 * Image object
 */
export type UpdateImage200 = {
  /** A list containing the following possible capabilities of this Image:

`cloud-init`: This Image supports cloud-init with [Metadata](/docs/products/compute/compute-instances/guides/metadata/). Only applies to public Images.
 */
  readonly capabilities?: string[];
  /** When this Image was created. */
  readonly created?: string;
  /** The name of the User who created this Image, or "linode" for public Images.
 */
  readonly created_by?: string;
  /** Whether or not this Image is deprecated. Will only be true for deprecated public Images.
 */
  readonly deprecated?: boolean;
  /** A detailed description of this Image. */
  description?: string | null;
  /** The date of the public Image's planned end of life. `None` for private Images.
 */
  readonly eol?: string;
  /** Only Images created automatically from a deleted Linode (type=automatic) will expire.
 */
  readonly expiry?: string | null;
  /** The unique ID of this Image. */
  readonly id?: string;
  /** True if the Image is a public distribution image. False if Image is private Account-specific Image. */
  readonly is_public?: boolean;
  /** A short description of the Image.
 */
  label?: string;
  /** The minimum size this Image needs to deploy. Size is in MB.
 */
  readonly size?: number;
  /** The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.
 */
  readonly status?: UpdateImage200Status;
  /** How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.
 */
  readonly type?: UpdateImage200Type;
  /** When this Image was last updated. */
  readonly updated?: string;
  /** The upstream distribution vendor. `None` for private Images.
 */
  readonly vendor?: string;
};

/**
 * How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.

 */
export type UpdateImageBodyType = typeof UpdateImageBodyType[keyof typeof UpdateImageBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateImageBodyType = {
  manual: 'manual',
  automatic: 'automatic',
} as const;

/**
 * The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.

 */
export type UpdateImageBodyStatus = typeof UpdateImageBodyStatus[keyof typeof UpdateImageBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateImageBodyStatus = {
  creating: 'creating',
  pending_upload: 'pending_upload',
  available: 'available',
} as const;

/**
 * Image object
 */
export type UpdateImageBody = {
  /** A list containing the following possible capabilities of this Image:

`cloud-init`: This Image supports cloud-init with [Metadata](/docs/products/compute/compute-instances/guides/metadata/). Only applies to public Images.
 */
  readonly capabilities?: string[];
  /** When this Image was created. */
  readonly created?: string;
  /** The name of the User who created this Image, or "linode" for public Images.
 */
  readonly created_by?: string;
  /** Whether or not this Image is deprecated. Will only be true for deprecated public Images.
 */
  readonly deprecated?: boolean;
  /** A detailed description of this Image. */
  description?: string | null;
  /** The date of the public Image's planned end of life. `None` for private Images.
 */
  readonly eol?: string;
  /** Only Images created automatically from a deleted Linode (type=automatic) will expire.
 */
  readonly expiry?: string | null;
  /** The unique ID of this Image. */
  readonly id?: string;
  /** True if the Image is a public distribution image. False if Image is private Account-specific Image. */
  readonly is_public?: boolean;
  /** A short description of the Image.
 */
  label?: string;
  /** The minimum size this Image needs to deploy. Size is in MB.
 */
  readonly size?: number;
  /** The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.
 */
  readonly status?: UpdateImageBodyStatus;
  /** How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.
 */
  readonly type?: UpdateImageBodyType;
  /** When this Image was last updated. */
  readonly updated?: string;
  /** The upstream distribution vendor. `None` for private Images.
 */
  readonly vendor?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetImageDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetImageDefault = {
  errors?: GetImageDefaultErrorsItem[];
};

/**
 * How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.

 */
export type GetImage200Type = typeof GetImage200Type[keyof typeof GetImage200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetImage200Type = {
  manual: 'manual',
  automatic: 'automatic',
} as const;

/**
 * The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.

 */
export type GetImage200Status = typeof GetImage200Status[keyof typeof GetImage200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetImage200Status = {
  creating: 'creating',
  pending_upload: 'pending_upload',
  available: 'available',
} as const;

/**
 * Image object
 */
export type GetImage200 = {
  /** A list containing the following possible capabilities of this Image:

`cloud-init`: This Image supports cloud-init with [Metadata](/docs/products/compute/compute-instances/guides/metadata/). Only applies to public Images.
 */
  readonly capabilities?: string[];
  /** When this Image was created. */
  readonly created?: string;
  /** The name of the User who created this Image, or "linode" for public Images.
 */
  readonly created_by?: string;
  /** Whether or not this Image is deprecated. Will only be true for deprecated public Images.
 */
  readonly deprecated?: boolean;
  /** A detailed description of this Image. */
  description?: string | null;
  /** The date of the public Image's planned end of life. `None` for private Images.
 */
  readonly eol?: string;
  /** Only Images created automatically from a deleted Linode (type=automatic) will expire.
 */
  readonly expiry?: string | null;
  /** The unique ID of this Image. */
  readonly id?: string;
  /** True if the Image is a public distribution image. False if Image is private Account-specific Image. */
  readonly is_public?: boolean;
  /** A short description of the Image.
 */
  label?: string;
  /** The minimum size this Image needs to deploy. Size is in MB.
 */
  readonly size?: number;
  /** The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.
 */
  readonly status?: GetImage200Status;
  /** How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.
 */
  readonly type?: GetImage200Type;
  /** When this Image was last updated. */
  readonly updated?: string;
  /** The upstream distribution vendor. `None` for private Images.
 */
  readonly vendor?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostImagesUploadDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostImagesUploadDefault = {
  errors?: PostImagesUploadDefaultErrorsItem[];
};

export type PostImagesUpload200 = {
  /** Image object */
  image?: PostImagesUpload200Image;
  /** The URL to upload the Image to. */
  upload_to?: string;
};

/**
 * How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.

 */
export type PostImagesUpload200ImageType = typeof PostImagesUpload200ImageType[keyof typeof PostImagesUpload200ImageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostImagesUpload200ImageType = {
  manual: 'manual',
  automatic: 'automatic',
} as const;

/**
 * The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.

 */
export type PostImagesUpload200ImageStatus = typeof PostImagesUpload200ImageStatus[keyof typeof PostImagesUpload200ImageStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostImagesUpload200ImageStatus = {
  creating: 'creating',
  pending_upload: 'pending_upload',
  available: 'available',
} as const;

/**
 * Image object
 */
export type PostImagesUpload200Image = {
  /** A list containing the following possible capabilities of this Image:

`cloud-init`: This Image supports cloud-init with [Metadata](/docs/products/compute/compute-instances/guides/metadata/). Only applies to public Images.
 */
  readonly capabilities?: string[];
  /** When this Image was created. */
  readonly created?: string;
  /** The name of the User who created this Image, or "linode" for public Images.
 */
  readonly created_by?: string;
  /** Whether or not this Image is deprecated. Will only be true for deprecated public Images.
 */
  readonly deprecated?: boolean;
  /** A detailed description of this Image. */
  description?: string | null;
  /** The date of the public Image's planned end of life. `None` for private Images.
 */
  readonly eol?: string;
  /** Only Images created automatically from a deleted Linode (type=automatic) will expire.
 */
  readonly expiry?: string | null;
  /** The unique ID of this Image. */
  readonly id?: string;
  /** True if the Image is a public distribution image. False if Image is private Account-specific Image. */
  readonly is_public?: boolean;
  /** A short description of the Image.
 */
  label?: string;
  /** The minimum size this Image needs to deploy. Size is in MB.
 */
  readonly size?: number;
  /** The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.
 */
  readonly status?: PostImagesUpload200ImageStatus;
  /** How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.
 */
  readonly type?: PostImagesUpload200ImageType;
  /** When this Image was last updated. */
  readonly updated?: string;
  /** The upstream distribution vendor. `None` for private Images.
 */
  readonly vendor?: string;
};

export type PostImagesUploadBody = {
  /** Whether the uploaded Image supports cloud-init. */
  cloud_init?: boolean;
  /** Description for the uploaded Image. */
  description?: string;
  /** Label for the uploaded Image. */
  label: string;
  /** The region to upload to. Once uploaded, the Image can be used in any region.
 */
  region: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateImageDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateImageDefault = {
  errors?: CreateImageDefaultErrorsItem[];
};

/**
 * How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.

 */
export type CreateImage200Type = typeof CreateImage200Type[keyof typeof CreateImage200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateImage200Type = {
  manual: 'manual',
  automatic: 'automatic',
} as const;

/**
 * The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.

 */
export type CreateImage200Status = typeof CreateImage200Status[keyof typeof CreateImage200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateImage200Status = {
  creating: 'creating',
  pending_upload: 'pending_upload',
  available: 'available',
} as const;

/**
 * Image object
 */
export type CreateImage200 = {
  /** A list containing the following possible capabilities of this Image:

`cloud-init`: This Image supports cloud-init with [Metadata](/docs/products/compute/compute-instances/guides/metadata/). Only applies to public Images.
 */
  readonly capabilities?: string[];
  /** When this Image was created. */
  readonly created?: string;
  /** The name of the User who created this Image, or "linode" for public Images.
 */
  readonly created_by?: string;
  /** Whether or not this Image is deprecated. Will only be true for deprecated public Images.
 */
  readonly deprecated?: boolean;
  /** A detailed description of this Image. */
  description?: string | null;
  /** The date of the public Image's planned end of life. `None` for private Images.
 */
  readonly eol?: string;
  /** Only Images created automatically from a deleted Linode (type=automatic) will expire.
 */
  readonly expiry?: string | null;
  /** The unique ID of this Image. */
  readonly id?: string;
  /** True if the Image is a public distribution image. False if Image is private Account-specific Image. */
  readonly is_public?: boolean;
  /** A short description of the Image.
 */
  label?: string;
  /** The minimum size this Image needs to deploy. Size is in MB.
 */
  readonly size?: number;
  /** The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.
 */
  readonly status?: CreateImage200Status;
  /** How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.
 */
  readonly type?: CreateImage200Type;
  /** When this Image was last updated. */
  readonly updated?: string;
  /** The upstream distribution vendor. `None` for private Images.
 */
  readonly vendor?: string;
};

export type CreateImageBody = {
  /** Whether this Image supports cloud-init. */
  cloud_init?: boolean;
  /** A detailed description of this Image.
 */
  description?: string;
  /** The ID of the Linode Disk that this Image will be created from.
 */
  disk_id: number;
  /** A short title of this Image. Defaults to the label of the Disk it is being created from if not provided.
 */
  label?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetImagesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetImagesDefault = {
  errors?: GetImagesDefaultErrorsItem[];
};

/**
 * How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.

 */
export type GetImages200DataItemType = typeof GetImages200DataItemType[keyof typeof GetImages200DataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetImages200DataItemType = {
  manual: 'manual',
  automatic: 'automatic',
} as const;

/**
 * The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.

 */
export type GetImages200DataItemStatus = typeof GetImages200DataItemStatus[keyof typeof GetImages200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetImages200DataItemStatus = {
  creating: 'creating',
  pending_upload: 'pending_upload',
  available: 'available',
} as const;

/**
 * Image object
 */
export type GetImages200DataItem = {
  /** A list containing the following possible capabilities of this Image:

`cloud-init`: This Image supports cloud-init with [Metadata](/docs/products/compute/compute-instances/guides/metadata/). Only applies to public Images.
 */
  readonly capabilities?: string[];
  /** When this Image was created. */
  readonly created?: string;
  /** The name of the User who created this Image, or "linode" for public Images.
 */
  readonly created_by?: string;
  /** Whether or not this Image is deprecated. Will only be true for deprecated public Images.
 */
  readonly deprecated?: boolean;
  /** A detailed description of this Image. */
  description?: string | null;
  /** The date of the public Image's planned end of life. `None` for private Images.
 */
  readonly eol?: string;
  /** Only Images created automatically from a deleted Linode (type=automatic) will expire.
 */
  readonly expiry?: string | null;
  /** The unique ID of this Image. */
  readonly id?: string;
  /** True if the Image is a public distribution image. False if Image is private Account-specific Image. */
  readonly is_public?: boolean;
  /** A short description of the Image.
 */
  label?: string;
  /** The minimum size this Image needs to deploy. Size is in MB.
 */
  readonly size?: number;
  /** The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.
 */
  readonly status?: GetImages200DataItemStatus;
  /** How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.
 */
  readonly type?: GetImages200DataItemType;
  /** When this Image was last updated. */
  readonly updated?: string;
  /** The upstream distribution vendor. `None` for private Images.
 */
  readonly vendor?: string;
};

export type GetImages200 = {
  data?: GetImages200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetImagesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteDomainRecordDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteDomainRecordDefault = {
  errors?: DeleteDomainRecordDefaultErrorsItem[];
};

export type DeleteDomainRecord200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateDomainRecordDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateDomainRecordDefault = {
  errors?: UpdateDomainRecordDefaultErrorsItem[];
};

/**
 * The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).

 */
export type UpdateDomainRecord200Type = typeof UpdateDomainRecord200Type[keyof typeof UpdateDomainRecord200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDomainRecord200Type = {
  A: 'A',
  AAAA: 'AAAA',
  NS: 'NS',
  MX: 'MX',
  CNAME: 'CNAME',
  TXT: 'TXT',
  SRV: 'SRV',
  PTR: 'PTR',
  CAA: 'CAA',
} as const;

/**
 * The tag portion of a CAA record. Only valid and required for CAA record requests.

 */
export type UpdateDomainRecord200Tag = typeof UpdateDomainRecord200Tag[keyof typeof UpdateDomainRecord200Tag];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDomainRecord200Tag = {
  issue: 'issue',
  issuewild: 'issuewild',
  iodef: 'iodef',
  null: null,
} as const;

/**
 * A single record on a Domain.

 */
export type UpdateDomainRecord200 = {
  /** When this Domain Record was created. */
  readonly created?: string;
  /** This Record's unique ID. */
  readonly id?: number;
  /** The name of this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The hostname or FQDN of the Record.

`NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.

`MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`
Domain.
* The left-most subdomain component may be an asterix (`*`) to designate a wildcard subdomain.
* Other subdomain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* Must be an empty string (`""`) for a Null MX Record.

`CNAME`: The hostname. Must be unique. Required.

`TXT`: The hostname.

`SRV`: Unused. Use the `service` property to set the service name for this record.

`CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.

`PTR`: See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).
 */
  name?: string;
  /** The port this Record points to. Only valid and required for SRV record requests.
 */
  port?: number;
  /** The priority of the target host for this Record. Lower values are preferred. Only valid for
MX and SRV record requests. Required for SRV record requests.

Defaults to `0` for MX record requests. Must be `0` for Null MX records.
 */
  priority?: number;
  /** The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.
 */
  protocol?: string | null;
  /** The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.
 */
  service?: string | null;
  /** The tag portion of a CAA record. Only valid and required for CAA record requests.
 */
  tag?: UpdateDomainRecord200Tag;
  /** The target for this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.

`NS`: The name server. Must be a valid domain. Required.

`MX`: The mail server. Must be a valid domain unless creating a Null MX Record. Required.
* Must have less than 254 total characters.
* The left-most domain component may be an asterix (`*`) to designate a wildcard domain.
* Other domain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* To create a [Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first [remove](/docs/api/domains/#domain-record-delete) any additional MX records, then create an MX record with empty strings (`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created.

`CNAME`: The alias. Must be a valid domain. Required.

`TXT`: The value. Required.

`SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.
To configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for
`example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a
target set to `sample.com`. Required.

`CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`
tag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:
  * `issue`: The domain of your certificate issuer. Must include a valid domain. May include additional parameters separated with semicolons (`;`), for example: `www.example.com; foo=bar`
  * `issuewild`: The domain of your wildcard certificate issuer. Must be a valid domain and must not start with an asterisk (`*`).
  * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.

`PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).

With the exception of A, AAAA, and CAA records, this field accepts a trailing period.
 */
  target?: string;
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
 */
  ttl_sec?: number;
  /** The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).
 */
  type?: UpdateDomainRecord200Type;
  /** When this Domain Record was last updated. */
  readonly updated?: string;
  /** The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.
 */
  weight?: number;
};

/**
 * The tag portion of a CAA record. Only valid and required for CAA record requests.

 */
export type UpdateDomainRecordBodyTag = typeof UpdateDomainRecordBodyTag[keyof typeof UpdateDomainRecordBodyTag];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDomainRecordBodyTag = {
  issue: 'issue',
  issuewild: 'issuewild',
  iodef: 'iodef',
  null: null,
} as const;

/**
 * A Domain Record Update request object.
 */
export type UpdateDomainRecordBody = {
  /** The name of this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The hostname or FQDN of the Record.

`NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.

`MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`
Domain.
* The left-most subdomain component may be an asterix (`*`) to designate a wildcard subdomain.
* Other subdomain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* Must be an empty string (`""`) for a Null MX Record.

`CNAME`: The hostname. Must be unique. Required.

`TXT`: The hostname.

`SRV`: Unused. Use the `service` property to set the service name for this record.

`CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.

`PTR`: See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).
 */
  name?: string;
  /** The port this Record points to. Only valid and required for SRV record requests.
 */
  port?: number;
  /** The priority of the target host for this Record. Lower values are preferred. Only valid for
MX and SRV record requests. Required for SRV record requests.

Defaults to `0` for MX record requests. Must be `0` for Null MX records.
 */
  priority?: number;
  /** The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.
 */
  protocol?: string | null;
  /** The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.
 */
  service?: string | null;
  /** The tag portion of a CAA record. Only valid and required for CAA record requests.
 */
  tag?: UpdateDomainRecordBodyTag;
  /** The target for this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.

`NS`: The name server. Must be a valid domain. Required.

`MX`: The mail server. Must be a valid domain unless creating a Null MX Record. Required.
* Must have less than 254 total characters.
* The left-most domain component may be an asterix (`*`) to designate a wildcard domain.
* Other domain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* To create a [Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first [remove](/docs/api/domains/#domain-record-delete) any additional MX records, then create an MX record with empty strings (`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created.

`CNAME`: The alias. Must be a valid domain. Required.

`TXT`: The value. Required.

`SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.
To configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for
`example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a
target set to `sample.com`. Required.

`CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`
tag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:
  * `issue`: The domain of your certificate issuer. Must include a valid domain. May include additional parameters separated with semicolons (`;`), for example: `www.example.com; foo=bar`
  * `issuewild`: The domain of your wildcard certificate issuer. Must be a valid domain and must not start with an asterisk (`*`).
  * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.

`PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).

With the exception of A, AAAA, and CAA records, this field accepts a trailing period.
 */
  target?: string;
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
 */
  ttl_sec?: number;
  /** The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.
 */
  weight?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDomainRecordDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDomainRecordDefault = {
  errors?: GetDomainRecordDefaultErrorsItem[];
};

/**
 * The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).

 */
export type GetDomainRecord200Type = typeof GetDomainRecord200Type[keyof typeof GetDomainRecord200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDomainRecord200Type = {
  A: 'A',
  AAAA: 'AAAA',
  NS: 'NS',
  MX: 'MX',
  CNAME: 'CNAME',
  TXT: 'TXT',
  SRV: 'SRV',
  PTR: 'PTR',
  CAA: 'CAA',
} as const;

/**
 * The tag portion of a CAA record. Only valid and required for CAA record requests.

 */
export type GetDomainRecord200Tag = typeof GetDomainRecord200Tag[keyof typeof GetDomainRecord200Tag];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDomainRecord200Tag = {
  issue: 'issue',
  issuewild: 'issuewild',
  iodef: 'iodef',
  null: null,
} as const;

/**
 * A single record on a Domain.

 */
export type GetDomainRecord200 = {
  /** When this Domain Record was created. */
  readonly created?: string;
  /** This Record's unique ID. */
  readonly id?: number;
  /** The name of this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The hostname or FQDN of the Record.

`NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.

`MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`
Domain.
* The left-most subdomain component may be an asterix (`*`) to designate a wildcard subdomain.
* Other subdomain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* Must be an empty string (`""`) for a Null MX Record.

`CNAME`: The hostname. Must be unique. Required.

`TXT`: The hostname.

`SRV`: Unused. Use the `service` property to set the service name for this record.

`CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.

`PTR`: See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).
 */
  name?: string;
  /** The port this Record points to. Only valid and required for SRV record requests.
 */
  port?: number;
  /** The priority of the target host for this Record. Lower values are preferred. Only valid for
MX and SRV record requests. Required for SRV record requests.

Defaults to `0` for MX record requests. Must be `0` for Null MX records.
 */
  priority?: number;
  /** The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.
 */
  protocol?: string | null;
  /** The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.
 */
  service?: string | null;
  /** The tag portion of a CAA record. Only valid and required for CAA record requests.
 */
  tag?: GetDomainRecord200Tag;
  /** The target for this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.

`NS`: The name server. Must be a valid domain. Required.

`MX`: The mail server. Must be a valid domain unless creating a Null MX Record. Required.
* Must have less than 254 total characters.
* The left-most domain component may be an asterix (`*`) to designate a wildcard domain.
* Other domain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* To create a [Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first [remove](/docs/api/domains/#domain-record-delete) any additional MX records, then create an MX record with empty strings (`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created.

`CNAME`: The alias. Must be a valid domain. Required.

`TXT`: The value. Required.

`SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.
To configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for
`example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a
target set to `sample.com`. Required.

`CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`
tag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:
  * `issue`: The domain of your certificate issuer. Must include a valid domain. May include additional parameters separated with semicolons (`;`), for example: `www.example.com; foo=bar`
  * `issuewild`: The domain of your wildcard certificate issuer. Must be a valid domain and must not start with an asterisk (`*`).
  * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.

`PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).

With the exception of A, AAAA, and CAA records, this field accepts a trailing period.
 */
  target?: string;
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
 */
  ttl_sec?: number;
  /** The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).
 */
  type?: GetDomainRecord200Type;
  /** When this Domain Record was last updated. */
  readonly updated?: string;
  /** The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.
 */
  weight?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateDomainRecordDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateDomainRecordDefault = {
  errors?: CreateDomainRecordDefaultErrorsItem[];
};

/**
 * The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).

 */
export type CreateDomainRecord200Type = typeof CreateDomainRecord200Type[keyof typeof CreateDomainRecord200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDomainRecord200Type = {
  A: 'A',
  AAAA: 'AAAA',
  NS: 'NS',
  MX: 'MX',
  CNAME: 'CNAME',
  TXT: 'TXT',
  SRV: 'SRV',
  PTR: 'PTR',
  CAA: 'CAA',
} as const;

/**
 * The tag portion of a CAA record. Only valid and required for CAA record requests.

 */
export type CreateDomainRecord200Tag = typeof CreateDomainRecord200Tag[keyof typeof CreateDomainRecord200Tag];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDomainRecord200Tag = {
  issue: 'issue',
  issuewild: 'issuewild',
  iodef: 'iodef',
  null: null,
} as const;

/**
 * A single record on a Domain.

 */
export type CreateDomainRecord200 = {
  /** When this Domain Record was created. */
  readonly created?: string;
  /** This Record's unique ID. */
  readonly id?: number;
  /** The name of this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The hostname or FQDN of the Record.

`NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.

`MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`
Domain.
* The left-most subdomain component may be an asterix (`*`) to designate a wildcard subdomain.
* Other subdomain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* Must be an empty string (`""`) for a Null MX Record.

`CNAME`: The hostname. Must be unique. Required.

`TXT`: The hostname.

`SRV`: Unused. Use the `service` property to set the service name for this record.

`CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.

`PTR`: See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).
 */
  name?: string;
  /** The port this Record points to. Only valid and required for SRV record requests.
 */
  port?: number;
  /** The priority of the target host for this Record. Lower values are preferred. Only valid for
MX and SRV record requests. Required for SRV record requests.

Defaults to `0` for MX record requests. Must be `0` for Null MX records.
 */
  priority?: number;
  /** The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.
 */
  protocol?: string | null;
  /** The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.
 */
  service?: string | null;
  /** The tag portion of a CAA record. Only valid and required for CAA record requests.
 */
  tag?: CreateDomainRecord200Tag;
  /** The target for this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.

`NS`: The name server. Must be a valid domain. Required.

`MX`: The mail server. Must be a valid domain unless creating a Null MX Record. Required.
* Must have less than 254 total characters.
* The left-most domain component may be an asterix (`*`) to designate a wildcard domain.
* Other domain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* To create a [Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first [remove](/docs/api/domains/#domain-record-delete) any additional MX records, then create an MX record with empty strings (`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created.

`CNAME`: The alias. Must be a valid domain. Required.

`TXT`: The value. Required.

`SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.
To configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for
`example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a
target set to `sample.com`. Required.

`CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`
tag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:
  * `issue`: The domain of your certificate issuer. Must include a valid domain. May include additional parameters separated with semicolons (`;`), for example: `www.example.com; foo=bar`
  * `issuewild`: The domain of your wildcard certificate issuer. Must be a valid domain and must not start with an asterisk (`*`).
  * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.

`PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).

With the exception of A, AAAA, and CAA records, this field accepts a trailing period.
 */
  target?: string;
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
 */
  ttl_sec?: number;
  /** The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).
 */
  type?: CreateDomainRecord200Type;
  /** When this Domain Record was last updated. */
  readonly updated?: string;
  /** The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.
 */
  weight?: number;
};

/**
 * The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).

 */
export type CreateDomainRecordBodyAllOfType = typeof CreateDomainRecordBodyAllOfType[keyof typeof CreateDomainRecordBodyAllOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDomainRecordBodyAllOfType = {
  A: 'A',
  AAAA: 'AAAA',
  NS: 'NS',
  MX: 'MX',
  CNAME: 'CNAME',
  TXT: 'TXT',
  SRV: 'SRV',
  PTR: 'PTR',
  CAA: 'CAA',
} as const;

/**
 * The tag portion of a CAA record. Only valid and required for CAA record requests.

 */
export type CreateDomainRecordBodyAllOfTag = typeof CreateDomainRecordBodyAllOfTag[keyof typeof CreateDomainRecordBodyAllOfTag];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDomainRecordBodyAllOfTag = {
  issue: 'issue',
  issuewild: 'issuewild',
  iodef: 'iodef',
  null: null,
} as const;

/**
 * A single record on a Domain.

 */
export type CreateDomainRecordBodyAllOf = {
  /** When this Domain Record was created. */
  readonly created?: string;
  /** This Record's unique ID. */
  readonly id?: number;
  /** The name of this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The hostname or FQDN of the Record.

`NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.

`MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`
Domain.
* The left-most subdomain component may be an asterix (`*`) to designate a wildcard subdomain.
* Other subdomain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* Must be an empty string (`""`) for a Null MX Record.

`CNAME`: The hostname. Must be unique. Required.

`TXT`: The hostname.

`SRV`: Unused. Use the `service` property to set the service name for this record.

`CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.

`PTR`: See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).
 */
  name?: string;
  /** The port this Record points to. Only valid and required for SRV record requests.
 */
  port?: number;
  /** The priority of the target host for this Record. Lower values are preferred. Only valid for
MX and SRV record requests. Required for SRV record requests.

Defaults to `0` for MX record requests. Must be `0` for Null MX records.
 */
  priority?: number;
  /** The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.
 */
  protocol?: string | null;
  /** The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.
 */
  service?: string | null;
  /** The tag portion of a CAA record. Only valid and required for CAA record requests.
 */
  tag?: CreateDomainRecordBodyAllOfTag;
  /** The target for this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.

`NS`: The name server. Must be a valid domain. Required.

`MX`: The mail server. Must be a valid domain unless creating a Null MX Record. Required.
* Must have less than 254 total characters.
* The left-most domain component may be an asterix (`*`) to designate a wildcard domain.
* Other domain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* To create a [Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first [remove](/docs/api/domains/#domain-record-delete) any additional MX records, then create an MX record with empty strings (`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created.

`CNAME`: The alias. Must be a valid domain. Required.

`TXT`: The value. Required.

`SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.
To configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for
`example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a
target set to `sample.com`. Required.

`CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`
tag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:
  * `issue`: The domain of your certificate issuer. Must include a valid domain. May include additional parameters separated with semicolons (`;`), for example: `www.example.com; foo=bar`
  * `issuewild`: The domain of your wildcard certificate issuer. Must be a valid domain and must not start with an asterisk (`*`).
  * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.

`PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).

With the exception of A, AAAA, and CAA records, this field accepts a trailing period.
 */
  target?: string;
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
 */
  ttl_sec?: number;
  /** The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).
 */
  type?: CreateDomainRecordBodyAllOfType;
  /** When this Domain Record was last updated. */
  readonly updated?: string;
  /** The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.
 */
  weight?: number;
};

/**
 * The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).

 */
export type GetDomainRecords200DataItemType = typeof GetDomainRecords200DataItemType[keyof typeof GetDomainRecords200DataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDomainRecords200DataItemType = {
  A: 'A',
  AAAA: 'AAAA',
  NS: 'NS',
  MX: 'MX',
  CNAME: 'CNAME',
  TXT: 'TXT',
  SRV: 'SRV',
  PTR: 'PTR',
  CAA: 'CAA',
} as const;

/**
 * The tag portion of a CAA record. Only valid and required for CAA record requests.

 */
export type GetDomainRecords200DataItemTag = typeof GetDomainRecords200DataItemTag[keyof typeof GetDomainRecords200DataItemTag];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDomainRecords200DataItemTag = {
  issue: 'issue',
  issuewild: 'issuewild',
  iodef: 'iodef',
  null: null,
} as const;

/**
 * A single record on a Domain.

 */
export type GetDomainRecords200DataItem = {
  /** When this Domain Record was created. */
  readonly created?: string;
  /** This Record's unique ID. */
  readonly id?: number;
  /** The name of this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The hostname or FQDN of the Record.

`NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.

`MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`
Domain.
* The left-most subdomain component may be an asterix (`*`) to designate a wildcard subdomain.
* Other subdomain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* Must be an empty string (`""`) for a Null MX Record.

`CNAME`: The hostname. Must be unique. Required.

`TXT`: The hostname.

`SRV`: Unused. Use the `service` property to set the service name for this record.

`CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.

`PTR`: See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).
 */
  name?: string;
  /** The port this Record points to. Only valid and required for SRV record requests.
 */
  port?: number;
  /** The priority of the target host for this Record. Lower values are preferred. Only valid for
MX and SRV record requests. Required for SRV record requests.

Defaults to `0` for MX record requests. Must be `0` for Null MX records.
 */
  priority?: number;
  /** The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.
 */
  protocol?: string | null;
  /** The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.
 */
  service?: string | null;
  /** The tag portion of a CAA record. Only valid and required for CAA record requests.
 */
  tag?: GetDomainRecords200DataItemTag;
  /** The target for this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.

`NS`: The name server. Must be a valid domain. Required.

`MX`: The mail server. Must be a valid domain unless creating a Null MX Record. Required.
* Must have less than 254 total characters.
* The left-most domain component may be an asterix (`*`) to designate a wildcard domain.
* Other domain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* To create a [Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first [remove](/docs/api/domains/#domain-record-delete) any additional MX records, then create an MX record with empty strings (`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created.

`CNAME`: The alias. Must be a valid domain. Required.

`TXT`: The value. Required.

`SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.
To configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for
`example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a
target set to `sample.com`. Required.

`CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`
tag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:
  * `issue`: The domain of your certificate issuer. Must include a valid domain. May include additional parameters separated with semicolons (`;`), for example: `www.example.com; foo=bar`
  * `issuewild`: The domain of your wildcard certificate issuer. Must be a valid domain and must not start with an asterisk (`*`).
  * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.

`PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).

With the exception of A, AAAA, and CAA records, this field accepts a trailing period.
 */
  target?: string;
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
 */
  ttl_sec?: number;
  /** The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).
 */
  type?: GetDomainRecords200DataItemType;
  /** When this Domain Record was last updated. */
  readonly updated?: string;
  /** The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.
 */
  weight?: number;
};

export type GetDomainRecords200 = {
  data?: GetDomainRecords200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetDomainRecordsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CloneDomainDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CloneDomainDefault = {
  errors?: CloneDomainDefaultErrorsItem[];
};

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type CloneDomain200Type = typeof CloneDomain200Type[keyof typeof CloneDomain200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneDomain200Type = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type CloneDomain200Status = typeof CloneDomain200Status[keyof typeof CloneDomain200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloneDomain200Status = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export type CloneDomain200 = {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: CloneDomain200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: CloneDomain200Type;
};

export type CloneDomainBody = {
  /** The new domain for the clone. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ImportDomainDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ImportDomainDefault = {
  errors?: ImportDomainDefaultErrorsItem[];
};

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type ImportDomain200Type = typeof ImportDomain200Type[keyof typeof ImportDomain200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportDomain200Type = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type ImportDomain200Status = typeof ImportDomain200Status[keyof typeof ImportDomain200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportDomain200Status = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export type ImportDomain200 = {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: ImportDomain200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: ImportDomain200Type;
};

export type ImportDomainBody = {
  /** The domain to import.
 */
  domain: string;
  /** The remote nameserver that allows zone transfers (AXFR).
 */
  remote_nameserver: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDomainZoneDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDomainZoneDefault = {
  errors?: GetDomainZoneDefaultErrorsItem[];
};

export type GetDomainZone200 = {
  /** The lines of the zone file for the last rendered zone for this domain.
 */
  zone_file?: string[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteDomainDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteDomainDefault = {
  errors?: DeleteDomainDefaultErrorsItem[];
};

export type DeleteDomain200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateDomainDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateDomainDefault = {
  errors?: UpdateDomainDefaultErrorsItem[];
};

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type UpdateDomain200Type = typeof UpdateDomain200Type[keyof typeof UpdateDomain200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDomain200Type = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type UpdateDomain200Status = typeof UpdateDomain200Status[keyof typeof UpdateDomain200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDomain200Status = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export type UpdateDomain200 = {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: UpdateDomain200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: UpdateDomain200Type;
};

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type UpdateDomainBodyType = typeof UpdateDomainBodyType[keyof typeof UpdateDomainBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDomainBodyType = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type UpdateDomainBodyStatus = typeof UpdateDomainBodyStatus[keyof typeof UpdateDomainBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDomainBodyStatus = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export type UpdateDomainBody = {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: UpdateDomainBodyStatus;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: UpdateDomainBodyType;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDomainDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDomainDefault = {
  errors?: GetDomainDefaultErrorsItem[];
};

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type GetDomain200Type = typeof GetDomain200Type[keyof typeof GetDomain200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDomain200Type = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type GetDomain200Status = typeof GetDomain200Status[keyof typeof GetDomain200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDomain200Status = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export type GetDomain200 = {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: GetDomain200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: GetDomain200Type;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateDomainDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateDomainDefault = {
  errors?: CreateDomainDefaultErrorsItem[];
};

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type CreateDomain200Type = typeof CreateDomain200Type[keyof typeof CreateDomain200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDomain200Type = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type CreateDomain200Status = typeof CreateDomain200Status[keyof typeof CreateDomain200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDomain200Status = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export type CreateDomain200 = {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: CreateDomain200Status;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: CreateDomain200Type;
};

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type CreateDomainBodyAllOfType = typeof CreateDomainBodyAllOfType[keyof typeof CreateDomainBodyAllOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDomainBodyAllOfType = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type CreateDomainBodyAllOfStatus = typeof CreateDomainBodyAllOfStatus[keyof typeof CreateDomainBodyAllOfStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDomainBodyAllOfStatus = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export type CreateDomainBodyAllOf = {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: CreateDomainBodyAllOfStatus;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: CreateDomainBodyAllOfType;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDomainsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDomainsDefault = {
  errors?: GetDomainsDefaultErrorsItem[];
};

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type GetDomains200DataItemType = typeof GetDomains200DataItemType[keyof typeof GetDomains200DataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDomains200DataItemType = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type GetDomains200DataItemStatus = typeof GetDomains200DataItemStatus[keyof typeof GetDomains200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDomains200DataItemStatus = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export type GetDomains200DataItem = {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: GetDomains200DataItemStatus;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: GetDomains200DataItemType;
};

export type GetDomains200 = {
  data?: GetDomains200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetDomainsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesTypeDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesTypeDefault = {
  errors?: GetDatabasesTypeDefaultErrorsItem[];
};

/**
 * Managed Database plan type object.
 */
export type GetDatabasesType200 = {
  /** The compute class category. */
  class?: string;
  /** Whether this Database plan type has been deprecated and is no longer available. */
  deprecated?: boolean;
  /** The amount of disk space set aside for Databases of this plan type. The value is represented in megabytes. */
  disk?: number;
  engines?: GetDatabasesType200Engines;
  /** The ID representing the Managed Database node plan type. */
  readonly id?: string;
  /** A human-readable string that describes each plan type. For display purposes only. */
  readonly label?: string;
  /** The amount of RAM allocated to Database created of this plan type. The value is represented in megabytes. */
  memory?: number;
  /** The integer of number CPUs allocated to databases of this plan type. */
  vcpus?: number;
};

/**
 * The number of nodes for the Managed Database cluster for this subscription tier.
 */
export type GetDatabasesType200EnginesPostgresqlItemQuantity = typeof GetDatabasesType200EnginesPostgresqlItemQuantity[keyof typeof GetDatabasesType200EnginesPostgresqlItemQuantity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesType200EnginesPostgresqlItemQuantity = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

/**
 * Cost in US dollars, broken down into hourly and monthly charges.
 */
export type GetDatabasesType200EnginesPostgresqlItemPrice = {
  /** Cost (in US dollars) per hour for this subscription tier. */
  hourly?: number;
  /** Maximum cost (in US dollars) per month for this subscription tier. */
  monthly?: number;
};

export type GetDatabasesType200EnginesPostgresqlItem = {
  /** Cost in US dollars, broken down into hourly and monthly charges. */
  price?: GetDatabasesType200EnginesPostgresqlItemPrice;
  /** The number of nodes for the Managed Database cluster for this subscription tier. */
  quantity?: GetDatabasesType200EnginesPostgresqlItemQuantity;
};

export type GetDatabasesType200Engines = {
  /** Pricing details for MySQL Managed Databases. */
  mysql?: GetDatabasesType200EnginesMysqlItem[];
  /** Pricing details for PostgreSQL Managed Databases. */
  postgresql?: GetDatabasesType200EnginesPostgresqlItem[];
};

/**
 * The number of nodes for the Managed Database cluster for this subscription tier.
 */
export type GetDatabasesType200EnginesMysqlItemQuantity = typeof GetDatabasesType200EnginesMysqlItemQuantity[keyof typeof GetDatabasesType200EnginesMysqlItemQuantity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesType200EnginesMysqlItemQuantity = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

/**
 * Cost in US dollars, broken down into hourly and monthly charges.
 */
export type GetDatabasesType200EnginesMysqlItemPrice = {
  /** Cost (in US dollars) per hour for this subscription tier. */
  hourly?: number;
  /** Maximum cost (in US dollars) per month for this subscription tier. */
  monthly?: number;
};

export type GetDatabasesType200EnginesMysqlItem = {
  /** Cost in US dollars, broken down into hourly and monthly charges. */
  price?: GetDatabasesType200EnginesMysqlItemPrice;
  /** The number of nodes for the Managed Database cluster for this subscription tier. */
  quantity?: GetDatabasesType200EnginesMysqlItemQuantity;
};

export type GetDatabasesTypeParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesTypesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesTypesDefault = {
  errors?: GetDatabasesTypesDefaultErrorsItem[];
};

export type GetDatabasesTypes200AllOfTwo = {
  data?: GetDatabasesTypes200AllOfTwoDataItem[];
};

export type GetDatabasesTypes200 = GetDatabasesTypes200AllOf & GetDatabasesTypes200AllOfTwo;

export type GetDatabasesTypes200AllOfTwoDataItemEngines = {
  /** Pricing details for MySQL Managed Databases. */
  mysql?: GetDatabasesTypes200AllOfTwoDataItemEnginesMysqlItem[];
  /** Pricing details for PostgreSQL Managed Databases. */
  postgresql?: GetDatabasesTypes200AllOfTwoDataItemEnginesPostgresqlItem[];
};

/**
 * Managed Database plan type object.
 */
export type GetDatabasesTypes200AllOfTwoDataItem = {
  /** The compute class category. */
  class?: string;
  /** Whether this Database plan type has been deprecated and is no longer available. */
  deprecated?: boolean;
  /** The amount of disk space set aside for Databases of this plan type. The value is represented in megabytes. */
  disk?: number;
  engines?: GetDatabasesTypes200AllOfTwoDataItemEngines;
  /** The ID representing the Managed Database node plan type. */
  readonly id?: string;
  /** A human-readable string that describes each plan type. For display purposes only. */
  readonly label?: string;
  /** The amount of RAM allocated to Database created of this plan type. The value is represented in megabytes. */
  memory?: number;
  /** The integer of number CPUs allocated to databases of this plan type. */
  vcpus?: number;
};

/**
 * The number of nodes for the Managed Database cluster for this subscription tier.
 */
export type GetDatabasesTypes200AllOfTwoDataItemEnginesPostgresqlItemQuantity = typeof GetDatabasesTypes200AllOfTwoDataItemEnginesPostgresqlItemQuantity[keyof typeof GetDatabasesTypes200AllOfTwoDataItemEnginesPostgresqlItemQuantity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesTypes200AllOfTwoDataItemEnginesPostgresqlItemQuantity = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

/**
 * Cost in US dollars, broken down into hourly and monthly charges.
 */
export type GetDatabasesTypes200AllOfTwoDataItemEnginesPostgresqlItemPrice = {
  /** Cost (in US dollars) per hour for this subscription tier. */
  hourly?: number;
  /** Maximum cost (in US dollars) per month for this subscription tier. */
  monthly?: number;
};

export type GetDatabasesTypes200AllOfTwoDataItemEnginesPostgresqlItem = {
  /** Cost in US dollars, broken down into hourly and monthly charges. */
  price?: GetDatabasesTypes200AllOfTwoDataItemEnginesPostgresqlItemPrice;
  /** The number of nodes for the Managed Database cluster for this subscription tier. */
  quantity?: GetDatabasesTypes200AllOfTwoDataItemEnginesPostgresqlItemQuantity;
};

/**
 * The number of nodes for the Managed Database cluster for this subscription tier.
 */
export type GetDatabasesTypes200AllOfTwoDataItemEnginesMysqlItemQuantity = typeof GetDatabasesTypes200AllOfTwoDataItemEnginesMysqlItemQuantity[keyof typeof GetDatabasesTypes200AllOfTwoDataItemEnginesMysqlItemQuantity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesTypes200AllOfTwoDataItemEnginesMysqlItemQuantity = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

/**
 * Cost in US dollars, broken down into hourly and monthly charges.
 */
export type GetDatabasesTypes200AllOfTwoDataItemEnginesMysqlItemPrice = {
  /** Cost (in US dollars) per hour for this subscription tier. */
  hourly?: number;
  /** Maximum cost (in US dollars) per month for this subscription tier. */
  monthly?: number;
};

export type GetDatabasesTypes200AllOfTwoDataItemEnginesMysqlItem = {
  /** Cost in US dollars, broken down into hourly and monthly charges. */
  price?: GetDatabasesTypes200AllOfTwoDataItemEnginesMysqlItemPrice;
  /** The number of nodes for the Managed Database cluster for this subscription tier. */
  quantity?: GetDatabasesTypes200AllOfTwoDataItemEnginesMysqlItemQuantity;
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetDatabasesTypes200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetDatabasesTypesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesPostgreSQLInstancePatchDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesPostgreSQLInstancePatchDefault = {
  errors?: PostDatabasesPostgreSQLInstancePatchDefaultErrorsItem[];
};

export type PostDatabasesPostgreSQLInstancePatch200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesPostgreSQLInstanceSSLDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesPostgreSQLInstanceSSLDefault = {
  errors?: GetDatabasesPostgreSQLInstanceSSLDefaultErrorsItem[];
};

/**
 * Managed Database SSL object.
 */
export type GetDatabasesPostgreSQLInstanceSSL200 = {
  /** The base64-encoded SSL CA certificate for the Managed Database instance. */
  ca_certificate?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesPostgreSQLInstanceCredentialsResetDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesPostgreSQLInstanceCredentialsResetDefault = {
  errors?: PostDatabasesPostgreSQLInstanceCredentialsResetDefaultErrorsItem[];
};

export type PostDatabasesPostgreSQLInstanceCredentialsReset200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesPostgreSQLInstanceCredentialsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesPostgreSQLInstanceCredentialsDefault = {
  errors?: GetDatabasesPostgreSQLInstanceCredentialsDefaultErrorsItem[];
};

/**
 * Managed Database object for database credentials.
 */
export type GetDatabasesPostgreSQLInstanceCredentials200 = {
  /** The randomly-generated root password for the Managed Database instance. */
  readonly password?: string;
  /** The root username for the Managed Database instance. */
  readonly username?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesPostgreSQLInstanceBackupRestoreDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesPostgreSQLInstanceBackupRestoreDefault = {
  errors?: PostDatabasesPostgreSQLInstanceBackupRestoreDefaultErrorsItem[];
};

export type PostDatabasesPostgreSQLInstanceBackupRestore200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteDatabasePostgreSQLInstanceBackupDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteDatabasePostgreSQLInstanceBackupDefault = {
  errors?: DeleteDatabasePostgreSQLInstanceBackupDefaultErrorsItem[];
};

export type DeleteDatabasePostgreSQLInstanceBackup200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesPostgreSQLInstanceBackupDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesPostgreSQLInstanceBackupDefault = {
  errors?: GetDatabasesPostgreSQLInstanceBackupDefaultErrorsItem[];
};

/**
 * The type of database backup, determined by how the backup was created.
 */
export type GetDatabasesPostgreSQLInstanceBackup200Type = typeof GetDatabasesPostgreSQLInstanceBackup200Type[keyof typeof GetDatabasesPostgreSQLInstanceBackup200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstanceBackup200Type = {
  snapshot: 'snapshot',
  auto: 'auto',
} as const;

/**
 * A database backup object.
 */
export type GetDatabasesPostgreSQLInstanceBackup200 = {
  /** A time value given in a combined date and time format that represents when the database backup was created. */
  created?: string;
  /** The ID of the database backup object. */
  id?: number;
  /** The database backup's label, for display purposes only.

Must include only ASCII letters or numbers.
 */
  label?: string;
  /** The type of database backup, determined by how the backup was created. */
  type?: GetDatabasesPostgreSQLInstanceBackup200Type;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesPostgreSQLInstanceBackupDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesPostgreSQLInstanceBackupDefault = {
  errors?: PostDatabasesPostgreSQLInstanceBackupDefaultErrorsItem[];
};

export type PostDatabasesPostgreSQLInstanceBackup200 = { [key: string]: any };

/**
 * The Database cluster target.
If the Database is a high availability cluster, choosing `secondary` creates a snapshot backup of a replica node.

 */
export type PostDatabasesPostgreSQLInstanceBackupBodyTarget = typeof PostDatabasesPostgreSQLInstanceBackupBodyTarget[keyof typeof PostDatabasesPostgreSQLInstanceBackupBodyTarget];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesPostgreSQLInstanceBackupBodyTarget = {
  primary: 'primary',
  secondary: 'secondary',
} as const;

/**
 * Managed Database request object for snapshot backup.
 */
export type PostDatabasesPostgreSQLInstanceBackupBody = {
  /** The label for the Database snapshot backup.

* Must include only ASCII letters, numbers, or underscores.
* Must be unique among other backup labels for this Database.
 */
  label: string;
  /** The Database cluster target.
If the Database is a high availability cluster, choosing `secondary` creates a snapshot backup of a replica node.
 */
  target?: PostDatabasesPostgreSQLInstanceBackupBodyTarget;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesPostgreSQLInstanceBackupsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesPostgreSQLInstanceBackupsDefault = {
  errors?: GetDatabasesPostgreSQLInstanceBackupsDefaultErrorsItem[];
};

export type GetDatabasesPostgreSQLInstanceBackups200 = GetDatabasesPostgreSQLInstanceBackups200AllOf & GetDatabasesPostgreSQLInstanceBackups200AllOfTwo;

/**
 * The type of database backup, determined by how the backup was created.
 */
export type GetDatabasesPostgreSQLInstanceBackups200AllOfTwoDataItemType = typeof GetDatabasesPostgreSQLInstanceBackups200AllOfTwoDataItemType[keyof typeof GetDatabasesPostgreSQLInstanceBackups200AllOfTwoDataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstanceBackups200AllOfTwoDataItemType = {
  snapshot: 'snapshot',
  auto: 'auto',
} as const;

/**
 * A database backup object.
 */
export type GetDatabasesPostgreSQLInstanceBackups200AllOfTwoDataItem = {
  /** A time value given in a combined date and time format that represents when the database backup was created. */
  created?: string;
  /** The ID of the database backup object. */
  id?: number;
  /** The database backup's label, for display purposes only.

Must include only ASCII letters or numbers.
 */
  label?: string;
  /** The type of database backup, determined by how the backup was created. */
  type?: GetDatabasesPostgreSQLInstanceBackups200AllOfTwoDataItemType;
};

export type GetDatabasesPostgreSQLInstanceBackups200AllOfTwo = {
  data?: GetDatabasesPostgreSQLInstanceBackups200AllOfTwoDataItem[];
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetDatabasesPostgreSQLInstanceBackups200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetDatabasesPostgreSQLInstanceBackupsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PutDatabasesPostgreSQLInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PutDatabasesPostgreSQLInstanceDefault = {
  errors?: PutDatabasesPostgreSQLInstanceDefaultErrorsItem[];
};

/**
 * The operating status of the Managed Database.
 */
export type PutDatabasesPostgreSQLInstance200Status = typeof PutDatabasesPostgreSQLInstance200Status[keyof typeof PutDatabasesPostgreSQLInstance200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesPostgreSQLInstance200Status = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.

 */
export type PutDatabasesPostgreSQLInstance200ReplicationType = typeof PutDatabasesPostgreSQLInstance200ReplicationType[keyof typeof PutDatabasesPostgreSQLInstance200ReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesPostgreSQLInstance200ReplicationType = {
  none: 'none',
  asynch: 'asynch',
} as const;

/**
 * The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.

 */
export type PutDatabasesPostgreSQLInstance200ReplicationCommitType = typeof PutDatabasesPostgreSQLInstance200ReplicationCommitType[keyof typeof PutDatabasesPostgreSQLInstance200ReplicationCommitType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesPostgreSQLInstance200ReplicationCommitType = {
  on: 'on',
  local: 'local',
  remote_write: 'remote_write',
  remote_apply: 'remote_apply',
  off: 'off',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type PutDatabasesPostgreSQLInstance200Hosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type PutDatabasesPostgreSQLInstance200ClusterSize = typeof PutDatabasesPostgreSQLInstance200ClusterSize[keyof typeof PutDatabasesPostgreSQLInstance200ClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesPostgreSQLInstance200ClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed PostgreSQL Databases object.
 */
export type PutDatabasesPostgreSQLInstance200 = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: PutDatabasesPostgreSQLInstance200ClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: PutDatabasesPostgreSQLInstance200Hosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.
 */
  replication_commit_type?: PutDatabasesPostgreSQLInstance200ReplicationCommitType;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.
 */
  replication_type?: PutDatabasesPostgreSQLInstance200ReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: PutDatabasesPostgreSQLInstance200Status;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: PutDatabasesPostgreSQLInstance200Updates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type PutDatabasesPostgreSQLInstance200UpdatesFrequency = typeof PutDatabasesPostgreSQLInstance200UpdatesFrequency[keyof typeof PutDatabasesPostgreSQLInstance200UpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesPostgreSQLInstance200UpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type PutDatabasesPostgreSQLInstance200Updates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: PutDatabasesPostgreSQLInstance200UpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * Updated information for the Managed PostgreSQL Database.
 */
export type PutDatabasesPostgreSQLInstanceBody = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: PutDatabasesPostgreSQLInstanceBodyUpdates;
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type PutDatabasesPostgreSQLInstanceBodyUpdatesFrequency = typeof PutDatabasesPostgreSQLInstanceBodyUpdatesFrequency[keyof typeof PutDatabasesPostgreSQLInstanceBodyUpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesPostgreSQLInstanceBodyUpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type PutDatabasesPostgreSQLInstanceBodyUpdates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: PutDatabasesPostgreSQLInstanceBodyUpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteDatabasesPostgreSQLInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteDatabasesPostgreSQLInstanceDefault = {
  errors?: DeleteDatabasesPostgreSQLInstanceDefaultErrorsItem[];
};

export type DeleteDatabasesPostgreSQLInstance200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesPostgreSQLInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesPostgreSQLInstanceDefault = {
  errors?: GetDatabasesPostgreSQLInstanceDefaultErrorsItem[];
};

/**
 * The operating status of the Managed Database.
 */
export type GetDatabasesPostgreSQLInstance200Status = typeof GetDatabasesPostgreSQLInstance200Status[keyof typeof GetDatabasesPostgreSQLInstance200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstance200Status = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.

 */
export type GetDatabasesPostgreSQLInstance200ReplicationType = typeof GetDatabasesPostgreSQLInstance200ReplicationType[keyof typeof GetDatabasesPostgreSQLInstance200ReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstance200ReplicationType = {
  none: 'none',
  asynch: 'asynch',
} as const;

/**
 * The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.

 */
export type GetDatabasesPostgreSQLInstance200ReplicationCommitType = typeof GetDatabasesPostgreSQLInstance200ReplicationCommitType[keyof typeof GetDatabasesPostgreSQLInstance200ReplicationCommitType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstance200ReplicationCommitType = {
  on: 'on',
  local: 'local',
  remote_write: 'remote_write',
  remote_apply: 'remote_apply',
  off: 'off',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type GetDatabasesPostgreSQLInstance200Hosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type GetDatabasesPostgreSQLInstance200ClusterSize = typeof GetDatabasesPostgreSQLInstance200ClusterSize[keyof typeof GetDatabasesPostgreSQLInstance200ClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstance200ClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed PostgreSQL Databases object.
 */
export type GetDatabasesPostgreSQLInstance200 = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: GetDatabasesPostgreSQLInstance200ClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: GetDatabasesPostgreSQLInstance200Hosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.
 */
  replication_commit_type?: GetDatabasesPostgreSQLInstance200ReplicationCommitType;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.
 */
  replication_type?: GetDatabasesPostgreSQLInstance200ReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: GetDatabasesPostgreSQLInstance200Status;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: GetDatabasesPostgreSQLInstance200Updates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type GetDatabasesPostgreSQLInstance200UpdatesFrequency = typeof GetDatabasesPostgreSQLInstance200UpdatesFrequency[keyof typeof GetDatabasesPostgreSQLInstance200UpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstance200UpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type GetDatabasesPostgreSQLInstance200Updates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: GetDatabasesPostgreSQLInstance200UpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesPostgreSQLInstancesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesPostgreSQLInstancesDefault = {
  errors?: PostDatabasesPostgreSQLInstancesDefaultErrorsItem[];
};

/**
 * The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.

 */
export type PostDatabasesPostgreSQLInstances200ReplicationCommitType = typeof PostDatabasesPostgreSQLInstances200ReplicationCommitType[keyof typeof PostDatabasesPostgreSQLInstances200ReplicationCommitType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesPostgreSQLInstances200ReplicationCommitType = {
  on: 'on',
  local: 'local',
  remote_write: 'remote_write',
  remote_apply: 'remote_apply',
  off: 'off',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type PostDatabasesPostgreSQLInstances200Hosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type PostDatabasesPostgreSQLInstances200ClusterSize = typeof PostDatabasesPostgreSQLInstances200ClusterSize[keyof typeof PostDatabasesPostgreSQLInstances200ClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesPostgreSQLInstances200ClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed PostgreSQL Databases object.
 */
export type PostDatabasesPostgreSQLInstances200 = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: PostDatabasesPostgreSQLInstances200ClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: PostDatabasesPostgreSQLInstances200Hosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.
 */
  replication_commit_type?: PostDatabasesPostgreSQLInstances200ReplicationCommitType;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.
 */
  replication_type?: PostDatabasesPostgreSQLInstances200ReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: PostDatabasesPostgreSQLInstances200Status;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: PostDatabasesPostgreSQLInstances200Updates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type PostDatabasesPostgreSQLInstances200UpdatesFrequency = typeof PostDatabasesPostgreSQLInstances200UpdatesFrequency[keyof typeof PostDatabasesPostgreSQLInstances200UpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesPostgreSQLInstances200UpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type PostDatabasesPostgreSQLInstances200Updates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: PostDatabasesPostgreSQLInstances200UpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * The operating status of the Managed Database.
 */
export type PostDatabasesPostgreSQLInstances200Status = typeof PostDatabasesPostgreSQLInstances200Status[keyof typeof PostDatabasesPostgreSQLInstances200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesPostgreSQLInstances200Status = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.

 */
export type PostDatabasesPostgreSQLInstances200ReplicationType = typeof PostDatabasesPostgreSQLInstances200ReplicationType[keyof typeof PostDatabasesPostgreSQLInstances200ReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesPostgreSQLInstances200ReplicationType = {
  none: 'none',
  asynch: 'asynch',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.

 */
export type PostDatabasesPostgreSQLInstancesBodyReplicationType = typeof PostDatabasesPostgreSQLInstancesBodyReplicationType[keyof typeof PostDatabasesPostgreSQLInstancesBodyReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesPostgreSQLInstancesBodyReplicationType = {
  none: 'none',
  asynch: 'asynch',
} as const;

/**
 * The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.

 */
export type PostDatabasesPostgreSQLInstancesBodyReplicationCommitType = typeof PostDatabasesPostgreSQLInstancesBodyReplicationCommitType[keyof typeof PostDatabasesPostgreSQLInstancesBodyReplicationCommitType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesPostgreSQLInstancesBodyReplicationCommitType = {
  on: 'on',
  local: 'local',
  remote_write: 'remote_write',
  remote_apply: 'remote_apply',
  off: 'off',
} as const;

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type PostDatabasesPostgreSQLInstancesBodyClusterSize = typeof PostDatabasesPostgreSQLInstancesBodyClusterSize[keyof typeof PostDatabasesPostgreSQLInstancesBodyClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesPostgreSQLInstancesBodyClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed PostgreSQL Database request object.
 */
export type PostDatabasesPostgreSQLInstancesBody = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: PostDatabasesPostgreSQLInstancesBodyClusterSize;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine in engine/version format. */
  engine: string;
  /** A unique, user-defined string referring to the Managed Database. */
  label: string;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region: string;
  /** The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.
 */
  replication_commit_type?: PostDatabasesPostgreSQLInstancesBodyReplicationCommitType;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.
 */
  replication_type?: PostDatabasesPostgreSQLInstancesBodyReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesPostgreSQLInstancesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesPostgreSQLInstancesDefault = {
  errors?: GetDatabasesPostgreSQLInstancesDefaultErrorsItem[];
};

export type GetDatabasesPostgreSQLInstances200 = GetDatabasesPostgreSQLInstances200AllOf & GetDatabasesPostgreSQLInstances200AllOfTwo;

/**
 * The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.

 */
export type GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationCommitType = typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationCommitType[keyof typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationCommitType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationCommitType = {
  on: 'on',
  local: 'local',
  remote_write: 'remote_write',
  remote_apply: 'remote_apply',
  off: 'off',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type GetDatabasesPostgreSQLInstances200AllOfTwoDataItemHosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type GetDatabasesPostgreSQLInstances200AllOfTwoDataItemClusterSize = typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemClusterSize[keyof typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstances200AllOfTwoDataItemClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed PostgreSQL Databases object.
 */
export type GetDatabasesPostgreSQLInstances200AllOfTwoDataItem = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: GetDatabasesPostgreSQLInstances200AllOfTwoDataItemClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: GetDatabasesPostgreSQLInstances200AllOfTwoDataItemHosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.
 */
  replication_commit_type?: GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationCommitType;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.
 */
  replication_type?: GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: GetDatabasesPostgreSQLInstances200AllOfTwoDataItemStatus;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: GetDatabasesPostgreSQLInstances200AllOfTwoDataItemUpdates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
};

export type GetDatabasesPostgreSQLInstances200AllOfTwo = {
  data?: GetDatabasesPostgreSQLInstances200AllOfTwoDataItem[];
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type GetDatabasesPostgreSQLInstances200AllOfTwoDataItemUpdatesFrequency = typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemUpdatesFrequency[keyof typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemUpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstances200AllOfTwoDataItemUpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type GetDatabasesPostgreSQLInstances200AllOfTwoDataItemUpdates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: GetDatabasesPostgreSQLInstances200AllOfTwoDataItemUpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * The operating status of the Managed Database.
 */
export type GetDatabasesPostgreSQLInstances200AllOfTwoDataItemStatus = typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemStatus[keyof typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstances200AllOfTwoDataItemStatus = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.

 */
export type GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationType = typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationType[keyof typeof GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesPostgreSQLInstances200AllOfTwoDataItemReplicationType = {
  none: 'none',
  asynch: 'asynch',
} as const;

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetDatabasesPostgreSQLInstances200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetDatabasesPostgreSQLInstancesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesMySQLInstancePatchDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesMySQLInstancePatchDefault = {
  errors?: PostDatabasesMySQLInstancePatchDefaultErrorsItem[];
};

export type PostDatabasesMySQLInstancePatch200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesMySQLInstanceSSLDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesMySQLInstanceSSLDefault = {
  errors?: GetDatabasesMySQLInstanceSSLDefaultErrorsItem[];
};

/**
 * Managed Database SSL object.
 */
export type GetDatabasesMySQLInstanceSSL200 = {
  /** The base64-encoded SSL CA certificate for the Managed Database instance. */
  ca_certificate?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesMySQLInstanceCredentialsResetDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesMySQLInstanceCredentialsResetDefault = {
  errors?: PostDatabasesMySQLInstanceCredentialsResetDefaultErrorsItem[];
};

export type PostDatabasesMySQLInstanceCredentialsReset200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesMySQLInstanceCredentialsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesMySQLInstanceCredentialsDefault = {
  errors?: GetDatabasesMySQLInstanceCredentialsDefaultErrorsItem[];
};

/**
 * Managed Database object for database credentials.
 */
export type GetDatabasesMySQLInstanceCredentials200 = {
  /** The randomly-generated root password for the Managed Database instance. */
  readonly password?: string;
  /** The root username for the Managed Database instance. */
  readonly username?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesMySQLInstanceBackupRestoreDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesMySQLInstanceBackupRestoreDefault = {
  errors?: PostDatabasesMySQLInstanceBackupRestoreDefaultErrorsItem[];
};

export type PostDatabasesMySQLInstanceBackupRestore200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteDatabaseMySQLInstanceBackupDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteDatabaseMySQLInstanceBackupDefault = {
  errors?: DeleteDatabaseMySQLInstanceBackupDefaultErrorsItem[];
};

export type DeleteDatabaseMySQLInstanceBackup200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesMySQLInstanceBackupDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesMySQLInstanceBackupDefault = {
  errors?: GetDatabasesMySQLInstanceBackupDefaultErrorsItem[];
};

/**
 * The type of database backup, determined by how the backup was created.
 */
export type GetDatabasesMySQLInstanceBackup200Type = typeof GetDatabasesMySQLInstanceBackup200Type[keyof typeof GetDatabasesMySQLInstanceBackup200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstanceBackup200Type = {
  snapshot: 'snapshot',
  auto: 'auto',
} as const;

/**
 * A database backup object.
 */
export type GetDatabasesMySQLInstanceBackup200 = {
  /** A time value given in a combined date and time format that represents when the database backup was created. */
  created?: string;
  /** The ID of the database backup object. */
  id?: number;
  /** The database backup's label, for display purposes only.

Must include only ASCII letters or numbers.
 */
  label?: string;
  /** The type of database backup, determined by how the backup was created. */
  type?: GetDatabasesMySQLInstanceBackup200Type;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesMySQLInstanceBackupDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesMySQLInstanceBackupDefault = {
  errors?: PostDatabasesMySQLInstanceBackupDefaultErrorsItem[];
};

export type PostDatabasesMySQLInstanceBackup200 = { [key: string]: any };

/**
 * The Database cluster target.
If the Database is a high availability cluster, choosing `secondary` creates a snapshot backup of a replica node.

 */
export type PostDatabasesMySQLInstanceBackupBodyTarget = typeof PostDatabasesMySQLInstanceBackupBodyTarget[keyof typeof PostDatabasesMySQLInstanceBackupBodyTarget];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesMySQLInstanceBackupBodyTarget = {
  primary: 'primary',
  secondary: 'secondary',
} as const;

/**
 * Managed Database request object for snapshot backup.
 */
export type PostDatabasesMySQLInstanceBackupBody = {
  /** The label for the Database snapshot backup.

* Must include only ASCII letters, numbers, or underscores.
* Must be unique among other backup labels for this Database.
 */
  label: string;
  /** The Database cluster target.
If the Database is a high availability cluster, choosing `secondary` creates a snapshot backup of a replica node.
 */
  target?: PostDatabasesMySQLInstanceBackupBodyTarget;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesMySQLInstanceBackupsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesMySQLInstanceBackupsDefault = {
  errors?: GetDatabasesMySQLInstanceBackupsDefaultErrorsItem[];
};

export type GetDatabasesMySQLInstanceBackups200AllOfTwo = {
  data?: GetDatabasesMySQLInstanceBackups200AllOfTwoDataItem[];
};

export type GetDatabasesMySQLInstanceBackups200 = GetDatabasesMySQLInstanceBackups200AllOf & GetDatabasesMySQLInstanceBackups200AllOfTwo;

/**
 * The type of database backup, determined by how the backup was created.
 */
export type GetDatabasesMySQLInstanceBackups200AllOfTwoDataItemType = typeof GetDatabasesMySQLInstanceBackups200AllOfTwoDataItemType[keyof typeof GetDatabasesMySQLInstanceBackups200AllOfTwoDataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstanceBackups200AllOfTwoDataItemType = {
  snapshot: 'snapshot',
  auto: 'auto',
} as const;

/**
 * A database backup object.
 */
export type GetDatabasesMySQLInstanceBackups200AllOfTwoDataItem = {
  /** A time value given in a combined date and time format that represents when the database backup was created. */
  created?: string;
  /** The ID of the database backup object. */
  id?: number;
  /** The database backup's label, for display purposes only.

Must include only ASCII letters or numbers.
 */
  label?: string;
  /** The type of database backup, determined by how the backup was created. */
  type?: GetDatabasesMySQLInstanceBackups200AllOfTwoDataItemType;
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetDatabasesMySQLInstanceBackups200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetDatabasesMySQLInstanceBackupsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PutDatabasesMySQLInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PutDatabasesMySQLInstanceDefault = {
  errors?: PutDatabasesMySQLInstanceDefaultErrorsItem[];
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type PutDatabasesMySQLInstance200UpdatesFrequency = typeof PutDatabasesMySQLInstance200UpdatesFrequency[keyof typeof PutDatabasesMySQLInstance200UpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesMySQLInstance200UpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type PutDatabasesMySQLInstance200Updates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: PutDatabasesMySQLInstance200UpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * The operating status of the Managed Database.
 */
export type PutDatabasesMySQLInstance200Status = typeof PutDatabasesMySQLInstance200Status[keyof typeof PutDatabasesMySQLInstance200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesMySQLInstance200Status = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.

 */
export type PutDatabasesMySQLInstance200ReplicationType = typeof PutDatabasesMySQLInstance200ReplicationType[keyof typeof PutDatabasesMySQLInstance200ReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesMySQLInstance200ReplicationType = {
  none: 'none',
  asynch: 'asynch',
  semi_synch: 'semi_synch',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type PutDatabasesMySQLInstance200Hosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type PutDatabasesMySQLInstance200ClusterSize = typeof PutDatabasesMySQLInstance200ClusterSize[keyof typeof PutDatabasesMySQLInstance200ClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesMySQLInstance200ClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed MySQL Databases object.
 */
export type PutDatabasesMySQLInstance200 = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: PutDatabasesMySQLInstance200ClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: PutDatabasesMySQLInstance200Hosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.
 */
  replication_type?: PutDatabasesMySQLInstance200ReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: PutDatabasesMySQLInstance200Status;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: PutDatabasesMySQLInstance200Updates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
};

/**
 * Updated information for the Managed MySQL Database.
 */
export type PutDatabasesMySQLInstanceBody = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: PutDatabasesMySQLInstanceBodyUpdates;
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type PutDatabasesMySQLInstanceBodyUpdatesFrequency = typeof PutDatabasesMySQLInstanceBodyUpdatesFrequency[keyof typeof PutDatabasesMySQLInstanceBodyUpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDatabasesMySQLInstanceBodyUpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type PutDatabasesMySQLInstanceBodyUpdates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: PutDatabasesMySQLInstanceBodyUpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteDatabasesMySQLInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteDatabasesMySQLInstanceDefault = {
  errors?: DeleteDatabasesMySQLInstanceDefaultErrorsItem[];
};

export type DeleteDatabasesMySQLInstance200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesMySQLInstanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesMySQLInstanceDefault = {
  errors?: GetDatabasesMySQLInstanceDefaultErrorsItem[];
};

/**
 * The operating status of the Managed Database.
 */
export type GetDatabasesMySQLInstance200Status = typeof GetDatabasesMySQLInstance200Status[keyof typeof GetDatabasesMySQLInstance200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstance200Status = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.

 */
export type GetDatabasesMySQLInstance200ReplicationType = typeof GetDatabasesMySQLInstance200ReplicationType[keyof typeof GetDatabasesMySQLInstance200ReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstance200ReplicationType = {
  none: 'none',
  asynch: 'asynch',
  semi_synch: 'semi_synch',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type GetDatabasesMySQLInstance200Hosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type GetDatabasesMySQLInstance200ClusterSize = typeof GetDatabasesMySQLInstance200ClusterSize[keyof typeof GetDatabasesMySQLInstance200ClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstance200ClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed MySQL Databases object.
 */
export type GetDatabasesMySQLInstance200 = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: GetDatabasesMySQLInstance200ClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: GetDatabasesMySQLInstance200Hosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.
 */
  replication_type?: GetDatabasesMySQLInstance200ReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: GetDatabasesMySQLInstance200Status;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: GetDatabasesMySQLInstance200Updates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type GetDatabasesMySQLInstance200UpdatesFrequency = typeof GetDatabasesMySQLInstance200UpdatesFrequency[keyof typeof GetDatabasesMySQLInstance200UpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstance200UpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type GetDatabasesMySQLInstance200Updates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: GetDatabasesMySQLInstance200UpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type PostDatabasesMySQLInstancesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type PostDatabasesMySQLInstancesDefault = {
  errors?: PostDatabasesMySQLInstancesDefaultErrorsItem[];
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type PostDatabasesMySQLInstances200UpdatesFrequency = typeof PostDatabasesMySQLInstances200UpdatesFrequency[keyof typeof PostDatabasesMySQLInstances200UpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesMySQLInstances200UpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type PostDatabasesMySQLInstances200Updates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: PostDatabasesMySQLInstances200UpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * The operating status of the Managed Database.
 */
export type PostDatabasesMySQLInstances200Status = typeof PostDatabasesMySQLInstances200Status[keyof typeof PostDatabasesMySQLInstances200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesMySQLInstances200Status = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.

 */
export type PostDatabasesMySQLInstances200ReplicationType = typeof PostDatabasesMySQLInstances200ReplicationType[keyof typeof PostDatabasesMySQLInstances200ReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesMySQLInstances200ReplicationType = {
  none: 'none',
  asynch: 'asynch',
  semi_synch: 'semi_synch',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type PostDatabasesMySQLInstances200Hosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type PostDatabasesMySQLInstances200ClusterSize = typeof PostDatabasesMySQLInstances200ClusterSize[keyof typeof PostDatabasesMySQLInstances200ClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesMySQLInstances200ClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed MySQL Databases object.
 */
export type PostDatabasesMySQLInstances200 = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: PostDatabasesMySQLInstances200ClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: PostDatabasesMySQLInstances200Hosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.
 */
  replication_type?: PostDatabasesMySQLInstances200ReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: PostDatabasesMySQLInstances200Status;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: PostDatabasesMySQLInstances200Updates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
};

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.

 */
export type PostDatabasesMySQLInstancesBodyReplicationType = typeof PostDatabasesMySQLInstancesBodyReplicationType[keyof typeof PostDatabasesMySQLInstancesBodyReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesMySQLInstancesBodyReplicationType = {
  none: 'none',
  asynch: 'asynch',
  semi_synch: 'semi_synch',
} as const;

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type PostDatabasesMySQLInstancesBodyClusterSize = typeof PostDatabasesMySQLInstancesBodyClusterSize[keyof typeof PostDatabasesMySQLInstancesBodyClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostDatabasesMySQLInstancesBodyClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed MySQL Database request object.
 */
export type PostDatabasesMySQLInstancesBody = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: PostDatabasesMySQLInstancesBodyClusterSize;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine in engine/version format. */
  engine: string;
  /** A unique, user-defined string referring to the Managed Database. */
  label: string;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region: string;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.
 */
  replication_type?: PostDatabasesMySQLInstancesBodyReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesMySQLInstancesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesMySQLInstancesDefault = {
  errors?: GetDatabasesMySQLInstancesDefaultErrorsItem[];
};

export type GetDatabasesMySQLInstances200AllOfTwo = {
  data?: GetDatabasesMySQLInstances200AllOfTwoDataItem[];
};

export type GetDatabasesMySQLInstances200 = GetDatabasesMySQLInstances200AllOf & GetDatabasesMySQLInstances200AllOfTwo;

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type GetDatabasesMySQLInstances200AllOfTwoDataItemUpdatesFrequency = typeof GetDatabasesMySQLInstances200AllOfTwoDataItemUpdatesFrequency[keyof typeof GetDatabasesMySQLInstances200AllOfTwoDataItemUpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstances200AllOfTwoDataItemUpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type GetDatabasesMySQLInstances200AllOfTwoDataItemUpdates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: GetDatabasesMySQLInstances200AllOfTwoDataItemUpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * The operating status of the Managed Database.
 */
export type GetDatabasesMySQLInstances200AllOfTwoDataItemStatus = typeof GetDatabasesMySQLInstances200AllOfTwoDataItemStatus[keyof typeof GetDatabasesMySQLInstances200AllOfTwoDataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstances200AllOfTwoDataItemStatus = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.

 */
export type GetDatabasesMySQLInstances200AllOfTwoDataItemReplicationType = typeof GetDatabasesMySQLInstances200AllOfTwoDataItemReplicationType[keyof typeof GetDatabasesMySQLInstances200AllOfTwoDataItemReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstances200AllOfTwoDataItemReplicationType = {
  none: 'none',
  asynch: 'asynch',
  semi_synch: 'semi_synch',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type GetDatabasesMySQLInstances200AllOfTwoDataItemHosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type GetDatabasesMySQLInstances200AllOfTwoDataItemClusterSize = typeof GetDatabasesMySQLInstances200AllOfTwoDataItemClusterSize[keyof typeof GetDatabasesMySQLInstances200AllOfTwoDataItemClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesMySQLInstances200AllOfTwoDataItemClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed MySQL Databases object.
 */
export type GetDatabasesMySQLInstances200AllOfTwoDataItem = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: GetDatabasesMySQLInstances200AllOfTwoDataItemClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: GetDatabasesMySQLInstances200AllOfTwoDataItemHosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.
 */
  replication_type?: GetDatabasesMySQLInstances200AllOfTwoDataItemReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: GetDatabasesMySQLInstances200AllOfTwoDataItemStatus;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: GetDatabasesMySQLInstances200AllOfTwoDataItemUpdates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetDatabasesMySQLInstances200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetDatabasesMySQLInstancesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesInstancesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesInstancesDefault = {
  errors?: GetDatabasesInstancesDefaultErrorsItem[];
};

export type GetDatabasesInstances200 = GetDatabasesInstances200AllOf & GetDatabasesInstances200AllOfTwo;

/**
 * The operating status of the Managed Database.
 */
export type GetDatabasesInstances200AllOfTwoDataItemStatus = typeof GetDatabasesInstances200AllOfTwoDataItemStatus[keyof typeof GetDatabasesInstances200AllOfTwoDataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesInstances200AllOfTwoDataItemStatus = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type GetDatabasesInstances200AllOfTwoDataItemHosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The Managed Database engine type.
 */
export type GetDatabasesInstances200AllOfTwoDataItemEngine = typeof GetDatabasesInstances200AllOfTwoDataItemEngine[keyof typeof GetDatabasesInstances200AllOfTwoDataItemEngine];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesInstances200AllOfTwoDataItemEngine = {
  mysql: 'mysql',
  postgresql: 'postgresql',
} as const;

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type GetDatabasesInstances200AllOfTwoDataItemClusterSize = typeof GetDatabasesInstances200AllOfTwoDataItemClusterSize[keyof typeof GetDatabasesInstances200AllOfTwoDataItemClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesInstances200AllOfTwoDataItemClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * A general Managed Database instance object containing properties that are identical for all database types.
 */
export type GetDatabasesInstances200AllOfTwoDataItem = {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: GetDatabasesInstances200AllOfTwoDataItemClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: GetDatabasesInstances200AllOfTwoDataItemEngine;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: GetDatabasesInstances200AllOfTwoDataItemHosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** Append this to `https://api.linode.com` to run commands for the Managed Database.
 */
  readonly instance_uri?: string;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The operating status of the Managed Database. */
  readonly status?: GetDatabasesInstances200AllOfTwoDataItemStatus;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: GetDatabasesInstances200AllOfTwoDataItemUpdates;
  /** The Managed Database engine version. */
  readonly version?: string;
};

export type GetDatabasesInstances200AllOfTwo = {
  data?: GetDatabasesInstances200AllOfTwoDataItem[];
};

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type GetDatabasesInstances200AllOfTwoDataItemUpdatesFrequency = typeof GetDatabasesInstances200AllOfTwoDataItemUpdatesFrequency[keyof typeof GetDatabasesInstances200AllOfTwoDataItemUpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDatabasesInstances200AllOfTwoDataItemUpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type GetDatabasesInstances200AllOfTwoDataItemUpdates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: GetDatabasesInstances200AllOfTwoDataItemUpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetDatabasesInstances200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetDatabasesInstancesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesEngineDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesEngineDefault = {
  errors?: GetDatabasesEngineDefaultErrorsItem[];
};

/**
 * Managed Database engine object.
 */
export type GetDatabasesEngine200 = {
  /** The Managed Database engine type. */
  engine?: string;
  /** The Managed Database engine ID in engine/version format. */
  id?: string;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  version?: string;
};

export type GetDatabasesEngineParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetDatabasesEnginesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetDatabasesEnginesDefault = {
  errors?: GetDatabasesEnginesDefaultErrorsItem[];
};

/**
 * Managed Database engine object.
 */
export type GetDatabasesEngines200AllOfTwoDataItem = {
  /** The Managed Database engine type. */
  engine?: string;
  /** The Managed Database engine ID in engine/version format. */
  id?: string;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  version?: string;
};

export type GetDatabasesEngines200AllOfTwo = {
  data?: GetDatabasesEngines200AllOfTwoDataItem[];
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetDatabasesEngines200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetDatabasesEngines200 = GetDatabasesEngines200AllOf & GetDatabasesEngines200AllOfTwo;

export type GetDatabasesEnginesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetBetaProgramDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetBetaProgramDefault = {
  errors?: GetBetaProgramDefaultErrorsItem[];
};

/**
 * An object representing Beta Program information.
 */
export type GetBetaProgram200 = {
  /** Additional details regarding the Beta Program. */
  readonly description?: string | null;
  /** The date-time that the Beta Program ended.

`null` indicates that the Beta Program is ongoing.
 */
  readonly ended?: string | null;
  /** Whether the Beta Program requires [Green Light](https://www.linode.com/green-light/) participation for enrollment. */
  readonly greenlight_only?: boolean;
  /** The unique identifier of the Beta Program. */
  id?: string;
  /** The name of the Beta Program. */
  readonly label?: string;
  /** Additional source of information for the Beta Program. */
  readonly more_info?: string | null;
  /** The start date-time of the Beta Program. */
  readonly started?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetBetaProgramsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetBetaProgramsDefault = {
  errors?: GetBetaProgramsDefaultErrorsItem[];
};

/**
 * An object representing Beta Program information.
 */
export type GetBetaPrograms200AllOfTwoDataItem = {
  /** Additional details regarding the Beta Program. */
  readonly description?: string | null;
  /** The date-time that the Beta Program ended.

`null` indicates that the Beta Program is ongoing.
 */
  readonly ended?: string | null;
  /** Whether the Beta Program requires [Green Light](https://www.linode.com/green-light/) participation for enrollment. */
  readonly greenlight_only?: boolean;
  /** The unique identifier of the Beta Program. */
  id?: string;
  /** The name of the Beta Program. */
  readonly label?: string;
  /** Additional source of information for the Beta Program. */
  readonly more_info?: string | null;
  /** The start date-time of the Beta Program. */
  readonly started?: string;
};

export type GetBetaPrograms200AllOfTwo = {
  data?: GetBetaPrograms200AllOfTwoDataItem[];
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetBetaPrograms200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetBetaPrograms200 = GetBetaPrograms200AllOf & GetBetaPrograms200AllOfTwo;

export type GetBetaProgramsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateUserGrantsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateUserGrantsDefault = {
  errors?: UpdateUserGrantsDefaultErrorsItem[];
};

/**
 * A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.

 */
export type UpdateUserGrants200 = {
  /** The grants this User has for each Database that is owned by this Account.
 */
  database?: UpdateUserGrants200DatabaseItem[];
  /** The grants this User has for each Domain that is owned by this Account.
 */
  domain?: UpdateUserGrants200DomainItem[];
  /** A structure containing the Account-level grants a User has.
 */
  global?: UpdateUserGrants200Global;
  /** The grants this User has for each Image that is owned by this Account.
 */
  image?: UpdateUserGrants200ImageItem[];
  /** The grants this User has for each Linode that is owned by this Account.
 */
  linode?: UpdateUserGrants200LinodeItem[];
  /** The grants this User has for each Longview Client that is owned by this Account.
 */
  longview?: UpdateUserGrants200LongviewItem[];
  /** The grants this User has for each NodeBalancer that is owned by this Account.
 */
  nodebalancer?: UpdateUserGrants200NodebalancerItem[];
  /** The grants this User has for each StackScript that is owned by this Account.
 */
  stackscript?: UpdateUserGrants200StackscriptItem[];
  /** The grants this User has for each Block Storage Volume that is owned by this Account.
 */
  volume?: UpdateUserGrants200VolumeItem[];
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrants200VolumeItemPermissions = typeof UpdateUserGrants200VolumeItemPermissions[keyof typeof UpdateUserGrants200VolumeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrants200VolumeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrants200VolumeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrants200VolumeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrants200StackscriptItemPermissions = typeof UpdateUserGrants200StackscriptItemPermissions[keyof typeof UpdateUserGrants200StackscriptItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrants200StackscriptItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrants200StackscriptItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrants200StackscriptItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrants200NodebalancerItemPermissions = typeof UpdateUserGrants200NodebalancerItemPermissions[keyof typeof UpdateUserGrants200NodebalancerItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrants200NodebalancerItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrants200NodebalancerItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrants200NodebalancerItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrants200LongviewItemPermissions = typeof UpdateUserGrants200LongviewItemPermissions[keyof typeof UpdateUserGrants200LongviewItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrants200LongviewItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrants200LongviewItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrants200LongviewItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrants200LinodeItemPermissions = typeof UpdateUserGrants200LinodeItemPermissions[keyof typeof UpdateUserGrants200LinodeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrants200LinodeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrants200LinodeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrants200LinodeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrants200ImageItemPermissions = typeof UpdateUserGrants200ImageItemPermissions[keyof typeof UpdateUserGrants200ImageItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrants200ImageItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrants200ImageItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrants200ImageItemPermissions;
};

/**
 * The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.

 */
export type UpdateUserGrants200GlobalAccountAccess = typeof UpdateUserGrants200GlobalAccountAccess[keyof typeof UpdateUserGrants200GlobalAccountAccess];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrants200GlobalAccountAccess = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * A structure containing the Account-level grants a User has.

 */
export type UpdateUserGrants200Global = {
  /** The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
 */
  account_access?: UpdateUserGrants200GlobalAccountAccess;
  /** if true, this User may add Managed Databases. */
  add_databases?: boolean;
  /** If true, this User may add Domains. */
  add_domains?: boolean;
  /** If true, this User may add Firewalls. */
  add_firewalls?: boolean;
  /** If true, this User may add Images. */
  add_images?: boolean;
  /** If true, this User may create Linodes. */
  add_linodes?: boolean;
  /** If true, this User may create Longview clients and view the current plan. */
  add_longview?: boolean;
  /** If true, this User may add NodeBalancers. */
  add_nodebalancers?: boolean;
  /** If true, this User may add StackScripts. */
  add_stackscripts?: boolean;
  /** If true, this User may add Volumes. */
  add_volumes?: boolean;
  /** If true, this User may cancel the entire Account. */
  cancel_account?: boolean;
  /** If true, this User may manage the Account's Longview subscription. */
  longview_subscription?: boolean;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrants200DomainItemPermissions = typeof UpdateUserGrants200DomainItemPermissions[keyof typeof UpdateUserGrants200DomainItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrants200DomainItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrants200DomainItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrants200DomainItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrants200DatabaseItemPermissions = typeof UpdateUserGrants200DatabaseItemPermissions[keyof typeof UpdateUserGrants200DatabaseItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrants200DatabaseItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrants200DatabaseItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrants200DatabaseItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrantsBodyVolumeItemPermissions = typeof UpdateUserGrantsBodyVolumeItemPermissions[keyof typeof UpdateUserGrantsBodyVolumeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrantsBodyVolumeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrantsBodyVolumeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrantsBodyVolumeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrantsBodyStackscriptItemPermissions = typeof UpdateUserGrantsBodyStackscriptItemPermissions[keyof typeof UpdateUserGrantsBodyStackscriptItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrantsBodyStackscriptItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrantsBodyStackscriptItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrantsBodyStackscriptItemPermissions;
};

/**
 * A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.

 */
export type UpdateUserGrantsBody = {
  /** The grants this User has for each Database that is owned by this Account.
 */
  database?: UpdateUserGrantsBodyDatabaseItem[];
  /** The grants this User has for each Domain that is owned by this Account.
 */
  domain?: UpdateUserGrantsBodyDomainItem[];
  /** A structure containing the Account-level grants a User has.
 */
  global?: UpdateUserGrantsBodyGlobal;
  /** The grants this User has for each Image that is owned by this Account.
 */
  image?: UpdateUserGrantsBodyImageItem[];
  /** The grants this User has for each Linode that is owned by this Account.
 */
  linode?: UpdateUserGrantsBodyLinodeItem[];
  /** The grants this User has for each Longview Client that is owned by this Account.
 */
  longview?: UpdateUserGrantsBodyLongviewItem[];
  /** The grants this User has for each NodeBalancer that is owned by this Account.
 */
  nodebalancer?: UpdateUserGrantsBodyNodebalancerItem[];
  /** The grants this User has for each StackScript that is owned by this Account.
 */
  stackscript?: UpdateUserGrantsBodyStackscriptItem[];
  /** The grants this User has for each Block Storage Volume that is owned by this Account.
 */
  volume?: UpdateUserGrantsBodyVolumeItem[];
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrantsBodyNodebalancerItemPermissions = typeof UpdateUserGrantsBodyNodebalancerItemPermissions[keyof typeof UpdateUserGrantsBodyNodebalancerItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrantsBodyNodebalancerItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrantsBodyNodebalancerItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrantsBodyNodebalancerItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrantsBodyLongviewItemPermissions = typeof UpdateUserGrantsBodyLongviewItemPermissions[keyof typeof UpdateUserGrantsBodyLongviewItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrantsBodyLongviewItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrantsBodyLongviewItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrantsBodyLongviewItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrantsBodyLinodeItemPermissions = typeof UpdateUserGrantsBodyLinodeItemPermissions[keyof typeof UpdateUserGrantsBodyLinodeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrantsBodyLinodeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrantsBodyLinodeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrantsBodyLinodeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrantsBodyImageItemPermissions = typeof UpdateUserGrantsBodyImageItemPermissions[keyof typeof UpdateUserGrantsBodyImageItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrantsBodyImageItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrantsBodyImageItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrantsBodyImageItemPermissions;
};

/**
 * The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.

 */
export type UpdateUserGrantsBodyGlobalAccountAccess = typeof UpdateUserGrantsBodyGlobalAccountAccess[keyof typeof UpdateUserGrantsBodyGlobalAccountAccess];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrantsBodyGlobalAccountAccess = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * A structure containing the Account-level grants a User has.

 */
export type UpdateUserGrantsBodyGlobal = {
  /** The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
 */
  account_access?: UpdateUserGrantsBodyGlobalAccountAccess;
  /** if true, this User may add Managed Databases. */
  add_databases?: boolean;
  /** If true, this User may add Domains. */
  add_domains?: boolean;
  /** If true, this User may add Firewalls. */
  add_firewalls?: boolean;
  /** If true, this User may add Images. */
  add_images?: boolean;
  /** If true, this User may create Linodes. */
  add_linodes?: boolean;
  /** If true, this User may create Longview clients and view the current plan. */
  add_longview?: boolean;
  /** If true, this User may add NodeBalancers. */
  add_nodebalancers?: boolean;
  /** If true, this User may add StackScripts. */
  add_stackscripts?: boolean;
  /** If true, this User may add Volumes. */
  add_volumes?: boolean;
  /** If true, this User may cancel the entire Account. */
  cancel_account?: boolean;
  /** If true, this User may manage the Account's Longview subscription. */
  longview_subscription?: boolean;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrantsBodyDomainItemPermissions = typeof UpdateUserGrantsBodyDomainItemPermissions[keyof typeof UpdateUserGrantsBodyDomainItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrantsBodyDomainItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrantsBodyDomainItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrantsBodyDomainItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type UpdateUserGrantsBodyDatabaseItemPermissions = typeof UpdateUserGrantsBodyDatabaseItemPermissions[keyof typeof UpdateUserGrantsBodyDatabaseItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserGrantsBodyDatabaseItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type UpdateUserGrantsBodyDatabaseItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: UpdateUserGrantsBodyDatabaseItemPermissions;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetUserGrantsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetUserGrantsDefault = {
  errors?: GetUserGrantsDefaultErrorsItem[];
};

/**
 * A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.

 */
export type GetUserGrants200 = {
  /** The grants this User has for each Database that is owned by this Account.
 */
  database?: GetUserGrants200DatabaseItem[];
  /** The grants this User has for each Domain that is owned by this Account.
 */
  domain?: GetUserGrants200DomainItem[];
  /** A structure containing the Account-level grants a User has.
 */
  global?: GetUserGrants200Global;
  /** The grants this User has for each Image that is owned by this Account.
 */
  image?: GetUserGrants200ImageItem[];
  /** The grants this User has for each Linode that is owned by this Account.
 */
  linode?: GetUserGrants200LinodeItem[];
  /** The grants this User has for each Longview Client that is owned by this Account.
 */
  longview?: GetUserGrants200LongviewItem[];
  /** The grants this User has for each NodeBalancer that is owned by this Account.
 */
  nodebalancer?: GetUserGrants200NodebalancerItem[];
  /** The grants this User has for each StackScript that is owned by this Account.
 */
  stackscript?: GetUserGrants200StackscriptItem[];
  /** The grants this User has for each Block Storage Volume that is owned by this Account.
 */
  volume?: GetUserGrants200VolumeItem[];
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetUserGrants200VolumeItemPermissions = typeof GetUserGrants200VolumeItemPermissions[keyof typeof GetUserGrants200VolumeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserGrants200VolumeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetUserGrants200VolumeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetUserGrants200VolumeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetUserGrants200StackscriptItemPermissions = typeof GetUserGrants200StackscriptItemPermissions[keyof typeof GetUserGrants200StackscriptItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserGrants200StackscriptItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetUserGrants200StackscriptItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetUserGrants200StackscriptItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetUserGrants200NodebalancerItemPermissions = typeof GetUserGrants200NodebalancerItemPermissions[keyof typeof GetUserGrants200NodebalancerItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserGrants200NodebalancerItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetUserGrants200NodebalancerItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetUserGrants200NodebalancerItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetUserGrants200LongviewItemPermissions = typeof GetUserGrants200LongviewItemPermissions[keyof typeof GetUserGrants200LongviewItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserGrants200LongviewItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetUserGrants200LongviewItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetUserGrants200LongviewItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetUserGrants200LinodeItemPermissions = typeof GetUserGrants200LinodeItemPermissions[keyof typeof GetUserGrants200LinodeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserGrants200LinodeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetUserGrants200LinodeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetUserGrants200LinodeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetUserGrants200ImageItemPermissions = typeof GetUserGrants200ImageItemPermissions[keyof typeof GetUserGrants200ImageItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserGrants200ImageItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetUserGrants200ImageItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetUserGrants200ImageItemPermissions;
};

/**
 * The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.

 */
export type GetUserGrants200GlobalAccountAccess = typeof GetUserGrants200GlobalAccountAccess[keyof typeof GetUserGrants200GlobalAccountAccess];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserGrants200GlobalAccountAccess = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * A structure containing the Account-level grants a User has.

 */
export type GetUserGrants200Global = {
  /** The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
 */
  account_access?: GetUserGrants200GlobalAccountAccess;
  /** if true, this User may add Managed Databases. */
  add_databases?: boolean;
  /** If true, this User may add Domains. */
  add_domains?: boolean;
  /** If true, this User may add Firewalls. */
  add_firewalls?: boolean;
  /** If true, this User may add Images. */
  add_images?: boolean;
  /** If true, this User may create Linodes. */
  add_linodes?: boolean;
  /** If true, this User may create Longview clients and view the current plan. */
  add_longview?: boolean;
  /** If true, this User may add NodeBalancers. */
  add_nodebalancers?: boolean;
  /** If true, this User may add StackScripts. */
  add_stackscripts?: boolean;
  /** If true, this User may add Volumes. */
  add_volumes?: boolean;
  /** If true, this User may cancel the entire Account. */
  cancel_account?: boolean;
  /** If true, this User may manage the Account's Longview subscription. */
  longview_subscription?: boolean;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetUserGrants200DomainItemPermissions = typeof GetUserGrants200DomainItemPermissions[keyof typeof GetUserGrants200DomainItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserGrants200DomainItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetUserGrants200DomainItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetUserGrants200DomainItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GetUserGrants200DatabaseItemPermissions = typeof GetUserGrants200DatabaseItemPermissions[keyof typeof GetUserGrants200DatabaseItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserGrants200DatabaseItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GetUserGrants200DatabaseItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GetUserGrants200DatabaseItemPermissions;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteUserDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteUserDefault = {
  errors?: DeleteUserDefaultErrorsItem[];
};

export type DeleteUser200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateUserDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateUserDefault = {
  errors?: UpdateUserDefaultErrorsItem[];
};

/**
 * A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.

 */
export type UpdateUser200 = {
  /** The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.
 */
  email?: string;
  /** Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.
 */
  readonly last_login?: UpdateUser200LastLogin;
  /** The date and time when this User's current password was created.

User passwords are first created during the Account sign-up process, and updated using the [Reset Password](https://login.linode.com/forgot/password) webpage.

`null` if this User has not created a password yet.
 */
  readonly password_created?: string | null;
  /** If true, the User must be granted access to perform actions or access entities on this Account. See User Grants View ([GET /account/users/{username}/grants](/docs/api/account/#users-grants-view)) for details on how to configure grants for a restricted User.
 */
  restricted?: boolean;
  /** A list of SSH Key labels added by this User.

Users can add keys with the SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) command.

These keys are deployed when this User is included in the `authorized_users`
field of the following requests:
- Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))
- Linode Rebuild ([POST /linode/instances/{linodeId}/rebuild](/docs/api/linode-instances/#linode-rebuild))
- Disk Create ([POST /linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disk-create))
 */
  readonly ssh_keys?: string[];
  /** A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. See the Create Two Factor Secret ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) endpoint to enable TFA.
 */
  readonly tfa_enabled?: boolean;
  /** The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
 */
  username?: string;
  /** The phone number verified for this User Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this User Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
};

/**
 * The result of the most recent login attempt for this User.

 */
export type UpdateUser200LastLoginStatus = typeof UpdateUser200LastLoginStatus[keyof typeof UpdateUser200LastLoginStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUser200LastLoginStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.

 */
export type UpdateUser200LastLogin = {
  /** The date and time of this User's most recent login attempt.
 */
  readonly login_datetime?: string;
  /** The result of the most recent login attempt for this User.
 */
  readonly status?: UpdateUser200LastLoginStatus;
} | null;

/**
 * The result of the most recent login attempt for this User.

 */
export type UpdateUserBodyLastLoginStatus = typeof UpdateUserBodyLastLoginStatus[keyof typeof UpdateUserBodyLastLoginStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserBodyLastLoginStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.

 */
export type UpdateUserBodyLastLogin = {
  /** The date and time of this User's most recent login attempt.
 */
  readonly login_datetime?: string;
  /** The result of the most recent login attempt for this User.
 */
  readonly status?: UpdateUserBodyLastLoginStatus;
} | null;

/**
 * A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.

 */
export type UpdateUserBody = {
  /** The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.
 */
  email?: string;
  /** Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.
 */
  readonly last_login?: UpdateUserBodyLastLogin;
  /** The date and time when this User's current password was created.

User passwords are first created during the Account sign-up process, and updated using the [Reset Password](https://login.linode.com/forgot/password) webpage.

`null` if this User has not created a password yet.
 */
  readonly password_created?: string | null;
  /** If true, the User must be granted access to perform actions or access entities on this Account. See User Grants View ([GET /account/users/{username}/grants](/docs/api/account/#users-grants-view)) for details on how to configure grants for a restricted User.
 */
  restricted?: boolean;
  /** A list of SSH Key labels added by this User.

Users can add keys with the SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) command.

These keys are deployed when this User is included in the `authorized_users`
field of the following requests:
- Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))
- Linode Rebuild ([POST /linode/instances/{linodeId}/rebuild](/docs/api/linode-instances/#linode-rebuild))
- Disk Create ([POST /linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disk-create))
 */
  readonly ssh_keys?: string[];
  /** A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. See the Create Two Factor Secret ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) endpoint to enable TFA.
 */
  readonly tfa_enabled?: boolean;
  /** The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
 */
  username?: string;
  /** The phone number verified for this User Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this User Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetUserDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetUserDefault = {
  errors?: GetUserDefaultErrorsItem[];
};

/**
 * A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.

 */
export type GetUser200 = {
  /** The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.
 */
  email?: string;
  /** Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.
 */
  readonly last_login?: GetUser200LastLogin;
  /** The date and time when this User's current password was created.

User passwords are first created during the Account sign-up process, and updated using the [Reset Password](https://login.linode.com/forgot/password) webpage.

`null` if this User has not created a password yet.
 */
  readonly password_created?: string | null;
  /** If true, the User must be granted access to perform actions or access entities on this Account. See User Grants View ([GET /account/users/{username}/grants](/docs/api/account/#users-grants-view)) for details on how to configure grants for a restricted User.
 */
  restricted?: boolean;
  /** A list of SSH Key labels added by this User.

Users can add keys with the SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) command.

These keys are deployed when this User is included in the `authorized_users`
field of the following requests:
- Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))
- Linode Rebuild ([POST /linode/instances/{linodeId}/rebuild](/docs/api/linode-instances/#linode-rebuild))
- Disk Create ([POST /linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disk-create))
 */
  readonly ssh_keys?: string[];
  /** A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. See the Create Two Factor Secret ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) endpoint to enable TFA.
 */
  readonly tfa_enabled?: boolean;
  /** The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
 */
  username?: string;
  /** The phone number verified for this User Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this User Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
};

/**
 * The result of the most recent login attempt for this User.

 */
export type GetUser200LastLoginStatus = typeof GetUser200LastLoginStatus[keyof typeof GetUser200LastLoginStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUser200LastLoginStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.

 */
export type GetUser200LastLogin = {
  /** The date and time of this User's most recent login attempt.
 */
  readonly login_datetime?: string;
  /** The result of the most recent login attempt for this User.
 */
  readonly status?: GetUser200LastLoginStatus;
} | null;

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateUserDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateUserDefault = {
  errors?: CreateUserDefaultErrorsItem[];
};

/**
 * The result of the most recent login attempt for this User.

 */
export type CreateUser200LastLoginStatus = typeof CreateUser200LastLoginStatus[keyof typeof CreateUser200LastLoginStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUser200LastLoginStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.

 */
export type CreateUser200LastLogin = {
  /** The date and time of this User's most recent login attempt.
 */
  readonly login_datetime?: string;
  /** The result of the most recent login attempt for this User.
 */
  readonly status?: CreateUser200LastLoginStatus;
} | null;

/**
 * A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.

 */
export type CreateUser200 = {
  /** The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.
 */
  email?: string;
  /** Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.
 */
  readonly last_login?: CreateUser200LastLogin;
  /** The date and time when this User's current password was created.

User passwords are first created during the Account sign-up process, and updated using the [Reset Password](https://login.linode.com/forgot/password) webpage.

`null` if this User has not created a password yet.
 */
  readonly password_created?: string | null;
  /** If true, the User must be granted access to perform actions or access entities on this Account. See User Grants View ([GET /account/users/{username}/grants](/docs/api/account/#users-grants-view)) for details on how to configure grants for a restricted User.
 */
  restricted?: boolean;
  /** A list of SSH Key labels added by this User.

Users can add keys with the SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) command.

These keys are deployed when this User is included in the `authorized_users`
field of the following requests:
- Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))
- Linode Rebuild ([POST /linode/instances/{linodeId}/rebuild](/docs/api/linode-instances/#linode-rebuild))
- Disk Create ([POST /linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disk-create))
 */
  readonly ssh_keys?: string[];
  /** A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. See the Create Two Factor Secret ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) endpoint to enable TFA.
 */
  readonly tfa_enabled?: boolean;
  /** The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
 */
  username?: string;
  /** The phone number verified for this User Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this User Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
};

/**
 * A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.

 */
export type CreateUserBodyAllOf = {
  /** The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.
 */
  email?: string;
  /** Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.
 */
  readonly last_login?: CreateUserBodyAllOfLastLogin;
  /** The date and time when this User's current password was created.

User passwords are first created during the Account sign-up process, and updated using the [Reset Password](https://login.linode.com/forgot/password) webpage.

`null` if this User has not created a password yet.
 */
  readonly password_created?: string | null;
  /** If true, the User must be granted access to perform actions or access entities on this Account. See User Grants View ([GET /account/users/{username}/grants](/docs/api/account/#users-grants-view)) for details on how to configure grants for a restricted User.
 */
  restricted?: boolean;
  /** A list of SSH Key labels added by this User.

Users can add keys with the SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) command.

These keys are deployed when this User is included in the `authorized_users`
field of the following requests:
- Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))
- Linode Rebuild ([POST /linode/instances/{linodeId}/rebuild](/docs/api/linode-instances/#linode-rebuild))
- Disk Create ([POST /linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disk-create))
 */
  readonly ssh_keys?: string[];
  /** A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. See the Create Two Factor Secret ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) endpoint to enable TFA.
 */
  readonly tfa_enabled?: boolean;
  /** The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
 */
  username?: string;
  /** The phone number verified for this User Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this User Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
};

/**
 * The result of the most recent login attempt for this User.

 */
export type CreateUserBodyAllOfLastLoginStatus = typeof CreateUserBodyAllOfLastLoginStatus[keyof typeof CreateUserBodyAllOfLastLoginStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserBodyAllOfLastLoginStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.

 */
export type CreateUserBodyAllOfLastLogin = {
  /** The date and time of this User's most recent login attempt.
 */
  readonly login_datetime?: string;
  /** The result of the most recent login attempt for this User.
 */
  readonly status?: CreateUserBodyAllOfLastLoginStatus;
} | null;

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetUsersDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetUsersDefault = {
  errors?: GetUsersDefaultErrorsItem[];
};

/**
 * A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.

 */
export type GetUsers200DataItem = {
  /** The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.
 */
  email?: string;
  /** Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.
 */
  readonly last_login?: GetUsers200DataItemLastLogin;
  /** The date and time when this User's current password was created.

User passwords are first created during the Account sign-up process, and updated using the [Reset Password](https://login.linode.com/forgot/password) webpage.

`null` if this User has not created a password yet.
 */
  readonly password_created?: string | null;
  /** If true, the User must be granted access to perform actions or access entities on this Account. See User Grants View ([GET /account/users/{username}/grants](/docs/api/account/#users-grants-view)) for details on how to configure grants for a restricted User.
 */
  restricted?: boolean;
  /** A list of SSH Key labels added by this User.

Users can add keys with the SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) command.

These keys are deployed when this User is included in the `authorized_users`
field of the following requests:
- Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))
- Linode Rebuild ([POST /linode/instances/{linodeId}/rebuild](/docs/api/linode-instances/#linode-rebuild))
- Disk Create ([POST /linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disk-create))
 */
  readonly ssh_keys?: string[];
  /** A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. See the Create Two Factor Secret ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) endpoint to enable TFA.
 */
  readonly tfa_enabled?: boolean;
  /** The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
 */
  username?: string;
  /** The phone number verified for this User Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this User Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
};

export type GetUsers200 = {
  data?: GetUsers200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The result of the most recent login attempt for this User.

 */
export type GetUsers200DataItemLastLoginStatus = typeof GetUsers200DataItemLastLoginStatus[keyof typeof GetUsers200DataItemLastLoginStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsers200DataItemLastLoginStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.

 */
export type GetUsers200DataItemLastLogin = {
  /** The date and time of this User's most recent login attempt.
 */
  readonly login_datetime?: string;
  /** The result of the most recent login attempt for this User.
 */
  readonly status?: GetUsers200DataItemLastLoginStatus;
} | null;

export type GetUsersParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetTransferDefault = {
  errors?: GetTransferDefaultErrorsItem[];
};

export type GetTransfer200RegionTransfersItem = {
  /** The amount of your transfer pool that is billable this billing cycle for this Region.
 */
  readonly billable?: number;
  /** The Region ID for this network utilization data. */
  id?: string;
  /** The amount of network usage allowed this billing cycle for this Region.
 */
  readonly quota?: number;
  /** The amount of network usage you have used this billing cycle for this Region.
 */
  readonly used?: number;
};

/**
 * An object representing your network utilization for the current month, in Gigabytes.

Certain Regions have separate utilization quotas and rates. For Region-specific network utilization data, see `region_transfers`.

 */
export type GetTransfer200 = {
  /** The amount of your transfer pool that is billable this billing cycle.
 */
  readonly billable?: number;
  /** The amount of network usage allowed this billing cycle.
 */
  readonly quota?: number;
  region_transfers?: GetTransfer200RegionTransfersItem[];
  /** The amount of network usage you have used this billing cycle.
 */
  readonly used?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type EnableAccountManagedDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type EnableAccountManagedDefault = {
  errors?: EnableAccountManagedDefaultErrorsItem[];
};

export type EnableAccountManaged200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateAccountSettingsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateAccountSettingsDefault = {
  errors?: UpdateAccountSettingsDefaultErrorsItem[];
};

/**
 * A string describing the status of this account's Object Storage service enrollment.

 */
export type UpdateAccountSettings200ObjectStorage = typeof UpdateAccountSettings200ObjectStorage[keyof typeof UpdateAccountSettings200ObjectStorage];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAccountSettings200ObjectStorage = {
  disabled: 'disabled',
  suspended: 'suspended',
  active: 'active',
} as const;

/**
 * Account Settings object
 */
export type UpdateAccountSettings200 = {
  /** Account-wide backups default.  If `true`, all Linodes created will automatically be enrolled in the Backups service.  If `false`, Linodes will not be enrolled by default, but may still be enrolled on creation or later.
 */
  backups_enabled?: boolean;
  /** The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](/docs/api/longview/#longview-subscriptions-list) ID or `null` for Longview Free.
 */
  readonly longview_subscription?: string;
  /** Our 24/7 incident response service. This robust, multi-homed monitoring system distributes monitoring checks to ensure that your servers remain online and available at all times. Linode Managed can monitor any service or software stack reachable over TCP or HTTP. Once you add a service to Linode Managed, we'll monitor it for connectivity, response, and total request time.
 */
  readonly managed?: boolean;
  /** Enables network helper across all users by default for new Linodes and Linode Configs.
 */
  network_helper?: boolean;
  /** A string describing the status of this account's Object Storage service enrollment.
 */
  readonly object_storage?: UpdateAccountSettings200ObjectStorage;
};

/**
 * A string describing the status of this account's Object Storage service enrollment.

 */
export type UpdateAccountSettingsBodyObjectStorage = typeof UpdateAccountSettingsBodyObjectStorage[keyof typeof UpdateAccountSettingsBodyObjectStorage];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAccountSettingsBodyObjectStorage = {
  disabled: 'disabled',
  suspended: 'suspended',
  active: 'active',
} as const;

/**
 * Account Settings object
 */
export type UpdateAccountSettingsBody = {
  /** Account-wide backups default.  If `true`, all Linodes created will automatically be enrolled in the Backups service.  If `false`, Linodes will not be enrolled by default, but may still be enrolled on creation or later.
 */
  backups_enabled?: boolean;
  /** The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](/docs/api/longview/#longview-subscriptions-list) ID or `null` for Longview Free.
 */
  readonly longview_subscription?: string;
  /** Our 24/7 incident response service. This robust, multi-homed monitoring system distributes monitoring checks to ensure that your servers remain online and available at all times. Linode Managed can monitor any service or software stack reachable over TCP or HTTP. Once you add a service to Linode Managed, we'll monitor it for connectivity, response, and total request time.
 */
  readonly managed?: boolean;
  /** Enables network helper across all users by default for new Linodes and Linode Configs.
 */
  network_helper?: boolean;
  /** A string describing the status of this account's Object Storage service enrollment.
 */
  readonly object_storage?: UpdateAccountSettingsBodyObjectStorage;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetAccountSettingsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetAccountSettingsDefault = {
  errors?: GetAccountSettingsDefaultErrorsItem[];
};

/**
 * A string describing the status of this account's Object Storage service enrollment.

 */
export type GetAccountSettings200ObjectStorage = typeof GetAccountSettings200ObjectStorage[keyof typeof GetAccountSettings200ObjectStorage];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAccountSettings200ObjectStorage = {
  disabled: 'disabled',
  suspended: 'suspended',
  active: 'active',
} as const;

/**
 * Account Settings object
 */
export type GetAccountSettings200 = {
  /** Account-wide backups default.  If `true`, all Linodes created will automatically be enrolled in the Backups service.  If `false`, Linodes will not be enrolled by default, but may still be enrolled on creation or later.
 */
  backups_enabled?: boolean;
  /** The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](/docs/api/longview/#longview-subscriptions-list) ID or `null` for Longview Free.
 */
  readonly longview_subscription?: string;
  /** Our 24/7 incident response service. This robust, multi-homed monitoring system distributes monitoring checks to ensure that your servers remain online and available at all times. Linode Managed can monitor any service or software stack reachable over TCP or HTTP. Once you add a service to Linode Managed, we'll monitor it for connectivity, response, and total request time.
 */
  readonly managed?: boolean;
  /** Enables network helper across all users by default for new Linodes and Linode Configs.
 */
  network_helper?: boolean;
  /** A string describing the status of this account's Object Storage service enrollment.
 */
  readonly object_storage?: GetAccountSettings200ObjectStorage;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AcceptServiceTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AcceptServiceTransferDefault = {
  errors?: AcceptServiceTransferDefaultErrorsItem[];
};

export type AcceptServiceTransfer200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteServiceTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteServiceTransferDefault = {
  errors?: DeleteServiceTransferDefaultErrorsItem[];
};

export type DeleteServiceTransfer200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetServiceTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetServiceTransferDefault = {
  errors?: GetServiceTransferDefaultErrorsItem[];
};

/**
 * The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress.
Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or
canceled.

 */
export type GetServiceTransfer200Status = typeof GetServiceTransfer200Status[keyof typeof GetServiceTransfer200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetServiceTransfer200Status = {
  accepted: 'accepted',
  canceled: 'canceled',
  completed: 'completed',
  failed: 'failed',
  pending: 'pending',
  stale: 'stale',
} as const;

/**
 * A collection of the services to include in this transfer request, separated by type.

 */
export type GetServiceTransfer200Entities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

/**
 * An object representing a Service Transfer.

 */
export type GetServiceTransfer200 = {
  /** When this transfer was created.
 */
  created?: string;
  /** A collection of the services to include in this transfer request, separated by type.
 */
  entities?: GetServiceTransfer200Entities;
  /** When this transfer expires. Transfers will automatically expire 24 hours after creation.
 */
  expiry?: string;
  /** If the requesting account created this transfer.
 */
  is_sender?: boolean;
  /** The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress.
Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or
canceled.
 */
  status?: GetServiceTransfer200Status;
  /** The token used to identify and accept or cancel this transfer.
 */
  token?: string;
  /** When this transfer was last updated.
 */
  updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateServiceTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateServiceTransferDefault = {
  errors?: CreateServiceTransferDefaultErrorsItem[];
};

/**
 * The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress.
Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or
canceled.

 */
export type CreateServiceTransfer200Status = typeof CreateServiceTransfer200Status[keyof typeof CreateServiceTransfer200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateServiceTransfer200Status = {
  accepted: 'accepted',
  canceled: 'canceled',
  completed: 'completed',
  failed: 'failed',
  pending: 'pending',
  stale: 'stale',
} as const;

/**
 * A collection of the services to include in this transfer request, separated by type.

 */
export type CreateServiceTransfer200Entities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

/**
 * An object representing a Service Transfer.

 */
export type CreateServiceTransfer200 = {
  /** When this transfer was created.
 */
  created?: string;
  /** A collection of the services to include in this transfer request, separated by type.
 */
  entities?: CreateServiceTransfer200Entities;
  /** When this transfer expires. Transfers will automatically expire 24 hours after creation.
 */
  expiry?: string;
  /** If the requesting account created this transfer.
 */
  is_sender?: boolean;
  /** The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress.
Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or
canceled.
 */
  status?: CreateServiceTransfer200Status;
  /** The token used to identify and accept or cancel this transfer.
 */
  token?: string;
  /** When this transfer was last updated.
 */
  updated?: string;
};

/**
 * A collection of the services to include in this transfer request, separated by type.

 */
export type CreateServiceTransferBodyEntities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

export type CreateServiceTransferBody = {
  /** A collection of the services to include in this transfer request, separated by type.
 */
  entities: CreateServiceTransferBodyEntities;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetServiceTransfersDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetServiceTransfersDefault = {
  errors?: GetServiceTransfersDefaultErrorsItem[];
};

/**
 * The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress.
Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or
canceled.

 */
export type GetServiceTransfers200DataItemStatus = typeof GetServiceTransfers200DataItemStatus[keyof typeof GetServiceTransfers200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetServiceTransfers200DataItemStatus = {
  accepted: 'accepted',
  canceled: 'canceled',
  completed: 'completed',
  failed: 'failed',
  pending: 'pending',
  stale: 'stale',
} as const;

/**
 * A collection of the services to include in this transfer request, separated by type.

 */
export type GetServiceTransfers200DataItemEntities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

/**
 * An object representing a Service Transfer.

 */
export type GetServiceTransfers200DataItem = {
  /** When this transfer was created.
 */
  created?: string;
  /** A collection of the services to include in this transfer request, separated by type.
 */
  entities?: GetServiceTransfers200DataItemEntities;
  /** When this transfer expires. Transfers will automatically expire 24 hours after creation.
 */
  expiry?: string;
  /** If the requesting account created this transfer.
 */
  is_sender?: boolean;
  /** The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress.
Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or
canceled.
 */
  status?: GetServiceTransfers200DataItemStatus;
  /** The token used to identify and accept or cancel this transfer.
 */
  token?: string;
  /** When this transfer was last updated.
 */
  updated?: string;
};

export type GetServiceTransfers200 = {
  data?: GetServiceTransfers200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetServiceTransfersParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreatePromoCreditDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreatePromoCreditDefault = {
  errors?: CreatePromoCreditDefaultErrorsItem[];
};

/**
 * The service to which this promotion applies.

 */
export type CreatePromoCredit200ServiceType = typeof CreatePromoCredit200ServiceType[keyof typeof CreatePromoCredit200ServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePromoCredit200ServiceType = {
  all: 'all',
  backup: 'backup',
  blockstorage: 'blockstorage',
  db_mysql: 'db_mysql',
  ip_v4: 'ip_v4',
  linode: 'linode',
  linode_disk: 'linode_disk',
  linode_memory: 'linode_memory',
  longview: 'longview',
  managed: 'managed',
  nodebalancer: 'nodebalancer',
  objectstorage: 'objectstorage',
  transfer_tx: 'transfer_tx',
} as const;

/**
 * Promotions generally
offer a set amount of credit that can be used toward your Linode
services, and the promotion expires after a specified date. As well,
a monthly cap on the promotional offer is set.

Simply put, a promotion offers a certain amount of credit every
month, until either the expiration date is passed, or until the total
promotional credit is used, whichever comes first.

 */
export type CreatePromoCredit200 = {
  /** The amount available to spend per month.
 */
  readonly credit_monthly_cap?: string;
  /** The total amount of credit left for this promotion.
 */
  readonly credit_remaining?: string;
  /** A detailed description of this promotion.
 */
  readonly description?: string;
  /** When this promotion's credits expire.
 */
  readonly expire_dt?: string;
  /** The location of an image for this promotion.
 */
  readonly image_url?: string;
  /** The service to which this promotion applies.
 */
  readonly service_type?: CreatePromoCredit200ServiceType;
  /** Short details of this promotion.
 */
  readonly summary?: string;
  /** The amount of credit left for this month for this promotion.
 */
  readonly this_month_credit_remaining?: string;
};

export type CreatePromoCreditBody = {
  /** The Promo Code.
 */
  promo_code: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ExecutePayPalPaymentDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ExecutePayPalPaymentDefault = {
  errors?: ExecutePayPalPaymentDefaultErrorsItem[];
};

/**
 * An object for describing a single warning associated with a response.

 */
export type ExecutePayPalPayment299WarningsItem = {
  /** Specific information related to the warning.
 */
  details?: string;
  /** The general warning message.
 */
  title?: string;
};

export type ExecutePayPalPayment299 = {
  warnings?: ExecutePayPalPayment299WarningsItem[];
};

/**
 * An object for describing a single warning associated with a response.

 */
export type ExecutePayPalPayment202WarningsItem = {
  /** Specific information related to the warning.
 */
  details?: string;
  /** The general warning message.
 */
  title?: string;
};

export type ExecutePayPalPayment202 = {
  warnings?: ExecutePayPalPayment202WarningsItem[];
};

export type ExecutePayPalPayment200 = { [key: string]: any };

/**
 * An object representing an execution of Payment to PayPal to capture the funds and credit your Linode Account.

 */
export type ExecutePayPalPaymentBody = {
  /** The PayerID returned by PayPal during the transaction authorization process.
 */
  payer_id: string;
  /** The PaymentID returned from [POST /account/payments/paypal](/docs/api/account/#paypal-payment-stage) that has been approved with PayPal.
 */
  payment_id: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreatePayPalPaymentDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreatePayPalPaymentDefault = {
  errors?: CreatePayPalPaymentDefaultErrorsItem[];
};

/**
 * An object for describing a single warning associated with a response.

 */
export type CreatePayPalPayment299WarningsItem = {
  /** Specific information related to the warning.
 */
  details?: string;
  /** The general warning message.
 */
  title?: string;
};

export type CreatePayPalPayment299 = {
  warnings?: CreatePayPalPayment299WarningsItem[];
};

export type CreatePayPalPayment200 = {
  /** The checkout token generated for this Payment.
 */
  readonly checkout_token?: string;
  /** The paypal-generated ID for this Payment. Used when authorizing the Payment in PayPal's interface.
 */
  payment_id?: string;
};

/**
 * An object representing the staging of a Payment via PayPal.

 */
export type CreatePayPalPaymentBody = {
  /** The URL to have PayPal redirect to when Payment is canceled. */
  cancel_url: string;
  /** The URL to have PayPal redirect to when Payment is approved. */
  redirect_url: string;
  /** The payment amount in USD. Minimum accepted value of $5 USD. Maximum accepted value of $500 USD or credit card payment limit; whichever value is highest. PayPal's maximum transaction limit is $10,000 USD. */
  usd: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetPaymentDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetPaymentDefault = {
  errors?: GetPaymentDefaultErrorsItem[];
};

/**
 * Payment object response.
 */
export type GetPayment200 = {
  /** When the Payment was made. */
  readonly date?: string;
  /** The unique ID of the Payment. */
  readonly id?: number;
  /** The amount, in US dollars, of the Payment. */
  readonly usd?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreatePaymentDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreatePaymentDefault = {
  errors?: CreatePaymentDefaultErrorsItem[];
};

/**
 * An object for describing a single warning associated with a response.

 */
export type CreatePayment202WarningsItem = {
  /** Specific information related to the warning.
 */
  details?: string;
  /** The general warning message.
 */
  title?: string;
};

export type CreatePayment202 = {
  warnings?: CreatePayment202WarningsItem[];
};

/**
 * Payment object response.
 */
export type CreatePayment200 = {
  /** When the Payment was made. */
  readonly date?: string;
  /** The unique ID of the Payment. */
  readonly id?: number;
  /** The amount, in US dollars, of the Payment. */
  readonly usd?: number;
};

/**
 * Payment object request.
 */
export type CreatePaymentBody = {
  /** CVV (Card Verification Value) of the credit card to be used for the Payment. Required if paying by credit card.
 */
  cvv?: string;
  /** The ID of the Payment Method to apply to the Payment.
 */
  payment_method_id?: number;
  /** The amount in US Dollars of the Payment.

* Can begin with or without `$`.
* Commas (`,`) are not accepted.
* Must end with a decimal expression, such as `.00` or `.99`.
* Minimum: `$5.00` or the Account balance, whichever is lower.
* Maximum: `$2000.00` or the Account balance up to `$50000.00`, whichever is greater.
 */
  usd: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetPaymentsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetPaymentsDefault = {
  errors?: GetPaymentsDefaultErrorsItem[];
};

/**
 * Payment object response.
 */
export type GetPayments200DataItem = {
  /** When the Payment was made. */
  readonly date?: string;
  /** The unique ID of the Payment. */
  readonly id?: number;
  /** The amount, in US dollars, of the Payment. */
  readonly usd?: number;
};

export type GetPayments200 = {
  data?: GetPayments200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetPaymentsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type MakePaymentMethodDefaultDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type MakePaymentMethodDefaultDefault = {
  errors?: MakePaymentMethodDefaultDefaultErrorsItem[];
};

export type MakePaymentMethodDefault200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeletePaymentMethodDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeletePaymentMethodDefault = {
  errors?: DeletePaymentMethodDefaultErrorsItem[];
};

export type DeletePaymentMethod200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetPaymentMethodDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetPaymentMethodDefault = {
  errors?: GetPaymentMethodDefaultErrorsItem[];
};

/**
 * The type of Payment Method.
 */
export type GetPaymentMethod200Type = typeof GetPaymentMethod200Type[keyof typeof GetPaymentMethod200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPaymentMethod200Type = {
  credit_card: 'credit_card',
  google_pay: 'google_pay',
  paypal: 'paypal',
} as const;

/**
 * Payment Method Response Object.
 */
export type GetPaymentMethod200 = {
  /** When the Payment Method was added to the Account. */
  readonly created?: string;
  data?: GetPaymentMethod200Data;
  /** The unique ID of this Payment Method. */
  id?: number;
  /** Whether this Payment Method is the default method for automatically processing service charges.
 */
  is_default?: boolean;
  /** The type of Payment Method. */
  type?: GetPaymentMethod200Type;
};

/**
 * PayPal information.
 */
export type GetPaymentMethod200DataOneOfThree = {
  /** The email address associated with your PayPal account. */
  readonly email?: string;
  /** PayPal Merchant ID associated with your PayPal account. */
  readonly paypal_id?: string;
};

/**
 * Google Pay information.
 */
export type GetPaymentMethod200DataOneOfTwo = {
  /** The type of credit card. */
  readonly card_type?: string;
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card number. */
  readonly last_four?: string;
};

/**
 * Credit card information.
 */
export type GetPaymentMethod200DataOneOf = {
  /** The type of credit card. */
  readonly card_type?: string;
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card number. */
  readonly last_four?: string;
};

export type GetPaymentMethod200Data = GetPaymentMethod200DataOneOf | GetPaymentMethod200DataOneOfTwo | GetPaymentMethod200DataOneOfThree;

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreatePaymentMethodDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreatePaymentMethodDefault = {
  errors?: CreatePaymentMethodDefaultErrorsItem[];
};

export type CreatePaymentMethod200 = { [key: string]: any };

/**
 * The type of Payment Method.

Alternative Payment Methods including Google Pay and PayPal can be added using the Cloud Manager. See the [Manage Payment Methods](/docs/products/platform/billing/guides/payment-methods/) guide
for details and instructions.

 */
export type CreatePaymentMethodBodyType = typeof CreatePaymentMethodBodyType[keyof typeof CreatePaymentMethodBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePaymentMethodBodyType = {
  credit_card: 'credit_card',
} as const;

/**
 * An object representing the credit card information you have on file with
Linode to make Payments against your Account.

 */
export type CreatePaymentMethodBodyData = {
  /** Your credit card number. No spaces or dashes allowed. */
  card_number: string;
  /** CVV (Card Verification Value) of the credit card, typically found on the back of the card.
 */
  cvv: string;
  /** A value from 1-12 representing the expiration month of your credit card.

  * 1 = January
  * 2 = February
  * 3 = March
  * Etc.
 */
  expiry_month: number;
  /** A four-digit integer representing the expiration year of
your credit card.

The combination of `expiry_month` and `expiry_year`
must result in a month/year combination of the current month or in
the future. An expiration date set in the past is invalid.
 */
  expiry_year: number;
};

/**
 * Payment Method Request Object.
 */
export type CreatePaymentMethodBody = {
  /** An object representing the credit card information you have on file with
Linode to make Payments against your Account.
 */
  data: CreatePaymentMethodBodyData;
  /** Whether this Payment Method is the default method for automatically processing service charges.
 */
  is_default: boolean;
  /** The type of Payment Method.

Alternative Payment Methods including Google Pay and PayPal can be added using the Cloud Manager. See the [Manage Payment Methods](/docs/products/platform/billing/guides/payment-methods/) guide
for details and instructions.
 */
  type: CreatePaymentMethodBodyType;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetPaymentMethodsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetPaymentMethodsDefault = {
  errors?: GetPaymentMethodsDefaultErrorsItem[];
};

/**
 * The type of Payment Method.
 */
export type GetPaymentMethods200DataItemType = typeof GetPaymentMethods200DataItemType[keyof typeof GetPaymentMethods200DataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPaymentMethods200DataItemType = {
  credit_card: 'credit_card',
  google_pay: 'google_pay',
  paypal: 'paypal',
} as const;

/**
 * PayPal information.
 */
export type GetPaymentMethods200DataItemDataOneOfThree = {
  /** The email address associated with your PayPal account. */
  readonly email?: string;
  /** PayPal Merchant ID associated with your PayPal account. */
  readonly paypal_id?: string;
};

/**
 * Google Pay information.
 */
export type GetPaymentMethods200DataItemDataOneOfTwo = {
  /** The type of credit card. */
  readonly card_type?: string;
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card number. */
  readonly last_four?: string;
};

/**
 * Credit card information.
 */
export type GetPaymentMethods200DataItemDataOneOf = {
  /** The type of credit card. */
  readonly card_type?: string;
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card number. */
  readonly last_four?: string;
};

export type GetPaymentMethods200DataItemData = GetPaymentMethods200DataItemDataOneOf | GetPaymentMethods200DataItemDataOneOfTwo | GetPaymentMethods200DataItemDataOneOfThree;

/**
 * Payment Method Response Object.
 */
export type GetPaymentMethods200DataItem = {
  /** When the Payment Method was added to the Account. */
  readonly created?: string;
  data?: GetPaymentMethods200DataItemData;
  /** The unique ID of this Payment Method. */
  id?: number;
  /** Whether this Payment Method is the default method for automatically processing service charges.
 */
  is_default?: boolean;
  /** The type of Payment Method. */
  type?: GetPaymentMethods200DataItemType;
};

export type GetPaymentMethods200 = {
  data?: GetPaymentMethods200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetPaymentMethodsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type SetClientThumbnailDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type SetClientThumbnailDefault = {
  errors?: SetClientThumbnailDefaultErrorsItem[];
};

export type SetClientThumbnail200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetClientThumbnailDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetClientThumbnailDefault = {
  errors?: GetClientThumbnailDefaultErrorsItem[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ResetClientSecretDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ResetClientSecretDefault = {
  errors?: ResetClientSecretDefaultErrorsItem[];
};

/**
 * The status of this application.  `active` by default.

 */
export type ResetClientSecret200Status = typeof ResetClientSecret200Status[keyof typeof ResetClientSecret200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResetClientSecret200Status = {
  active: 'active',
  disabled: 'disabled',
  suspended: 'suspended',
} as const;

/**
 * A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target="_top" href="https://login.linode.com">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.

 */
export type ResetClientSecret200 = {
  /** The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).
 */
  readonly id?: string;
  /** The name of this application.  This will be presented to users when they are asked to grant it access to their Account.
 */
  label?: string;
  /** If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the <a target="_top" href="https://oauth.net/2/">OAuth spec</a> for more details.
 */
  public?: boolean;
  /** The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.
 */
  redirect_uri?: string;
  /** The OAuth Client secret, used in the OAuth exchange.  This is returned as `<REDACTED>` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.
 */
  readonly secret?: string;
  /** The status of this application.  `active` by default.
 */
  readonly status?: ResetClientSecret200Status;
  /** The URL where this client's thumbnail may be viewed, or `null` if this client does not have a thumbnail set.
 */
  readonly thumbnail_url?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteClientDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteClientDefault = {
  errors?: DeleteClientDefaultErrorsItem[];
};

export type DeleteClient200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateClientDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateClientDefault = {
  errors?: UpdateClientDefaultErrorsItem[];
};

/**
 * The status of this application.  `active` by default.

 */
export type UpdateClient200Status = typeof UpdateClient200Status[keyof typeof UpdateClient200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateClient200Status = {
  active: 'active',
  disabled: 'disabled',
  suspended: 'suspended',
} as const;

/**
 * A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target="_top" href="https://login.linode.com">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.

 */
export type UpdateClient200 = {
  /** The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).
 */
  readonly id?: string;
  /** The name of this application.  This will be presented to users when they are asked to grant it access to their Account.
 */
  label?: string;
  /** If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the <a target="_top" href="https://oauth.net/2/">OAuth spec</a> for more details.
 */
  public?: boolean;
  /** The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.
 */
  redirect_uri?: string;
  /** The OAuth Client secret, used in the OAuth exchange.  This is returned as `<REDACTED>` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.
 */
  readonly secret?: string;
  /** The status of this application.  `active` by default.
 */
  readonly status?: UpdateClient200Status;
  /** The URL where this client's thumbnail may be viewed, or `null` if this client does not have a thumbnail set.
 */
  readonly thumbnail_url?: string | null;
};

/**
 * The status of this application.  `active` by default.

 */
export type UpdateClientBodyStatus = typeof UpdateClientBodyStatus[keyof typeof UpdateClientBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateClientBodyStatus = {
  active: 'active',
  disabled: 'disabled',
  suspended: 'suspended',
} as const;

/**
 * A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target="_top" href="https://login.linode.com">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.

 */
export type UpdateClientBody = {
  /** The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).
 */
  readonly id?: string;
  /** The name of this application.  This will be presented to users when they are asked to grant it access to their Account.
 */
  label?: string;
  /** If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the <a target="_top" href="https://oauth.net/2/">OAuth spec</a> for more details.
 */
  public?: boolean;
  /** The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.
 */
  redirect_uri?: string;
  /** The OAuth Client secret, used in the OAuth exchange.  This is returned as `<REDACTED>` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.
 */
  readonly secret?: string;
  /** The status of this application.  `active` by default.
 */
  readonly status?: UpdateClientBodyStatus;
  /** The URL where this client's thumbnail may be viewed, or `null` if this client does not have a thumbnail set.
 */
  readonly thumbnail_url?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetClientDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetClientDefault = {
  errors?: GetClientDefaultErrorsItem[];
};

/**
 * The status of this application.  `active` by default.

 */
export type GetClient200Status = typeof GetClient200Status[keyof typeof GetClient200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetClient200Status = {
  active: 'active',
  disabled: 'disabled',
  suspended: 'suspended',
} as const;

/**
 * A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target="_top" href="https://login.linode.com">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.

 */
export type GetClient200 = {
  /** The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).
 */
  readonly id?: string;
  /** The name of this application.  This will be presented to users when they are asked to grant it access to their Account.
 */
  label?: string;
  /** If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the <a target="_top" href="https://oauth.net/2/">OAuth spec</a> for more details.
 */
  public?: boolean;
  /** The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.
 */
  redirect_uri?: string;
  /** The OAuth Client secret, used in the OAuth exchange.  This is returned as `<REDACTED>` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.
 */
  readonly secret?: string;
  /** The status of this application.  `active` by default.
 */
  readonly status?: GetClient200Status;
  /** The URL where this client's thumbnail may be viewed, or `null` if this client does not have a thumbnail set.
 */
  readonly thumbnail_url?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateClientDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateClientDefault = {
  errors?: CreateClientDefaultErrorsItem[];
};

/**
 * The status of this application.  `active` by default.

 */
export type CreateClient200Status = typeof CreateClient200Status[keyof typeof CreateClient200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateClient200Status = {
  active: 'active',
  disabled: 'disabled',
  suspended: 'suspended',
} as const;

/**
 * A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target="_top" href="https://login.linode.com">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.

 */
export type CreateClient200 = {
  /** The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).
 */
  readonly id?: string;
  /** The name of this application.  This will be presented to users when they are asked to grant it access to their Account.
 */
  label?: string;
  /** If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the <a target="_top" href="https://oauth.net/2/">OAuth spec</a> for more details.
 */
  public?: boolean;
  /** The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.
 */
  redirect_uri?: string;
  /** The OAuth Client secret, used in the OAuth exchange.  This is returned as `<REDACTED>` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.
 */
  readonly secret?: string;
  /** The status of this application.  `active` by default.
 */
  readonly status?: CreateClient200Status;
  /** The URL where this client's thumbnail may be viewed, or `null` if this client does not have a thumbnail set.
 */
  readonly thumbnail_url?: string | null;
};

/**
 * The status of this application.  `active` by default.

 */
export type CreateClientBodyAllOfStatus = typeof CreateClientBodyAllOfStatus[keyof typeof CreateClientBodyAllOfStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateClientBodyAllOfStatus = {
  active: 'active',
  disabled: 'disabled',
  suspended: 'suspended',
} as const;

/**
 * A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target="_top" href="https://login.linode.com">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.

 */
export type CreateClientBodyAllOf = {
  /** The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).
 */
  readonly id?: string;
  /** The name of this application.  This will be presented to users when they are asked to grant it access to their Account.
 */
  label?: string;
  /** If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the <a target="_top" href="https://oauth.net/2/">OAuth spec</a> for more details.
 */
  public?: boolean;
  /** The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.
 */
  redirect_uri?: string;
  /** The OAuth Client secret, used in the OAuth exchange.  This is returned as `<REDACTED>` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.
 */
  readonly secret?: string;
  /** The status of this application.  `active` by default.
 */
  readonly status?: CreateClientBodyAllOfStatus;
  /** The URL where this client's thumbnail may be viewed, or `null` if this client does not have a thumbnail set.
 */
  readonly thumbnail_url?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetClientsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetClientsDefault = {
  errors?: GetClientsDefaultErrorsItem[];
};

/**
 * The status of this application.  `active` by default.

 */
export type GetClients200DataItemStatus = typeof GetClients200DataItemStatus[keyof typeof GetClients200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetClients200DataItemStatus = {
  active: 'active',
  disabled: 'disabled',
  suspended: 'suspended',
} as const;

/**
 * A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target="_top" href="https://login.linode.com">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.

 */
export type GetClients200DataItem = {
  /** The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).
 */
  readonly id?: string;
  /** The name of this application.  This will be presented to users when they are asked to grant it access to their Account.
 */
  label?: string;
  /** If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the <a target="_top" href="https://oauth.net/2/">OAuth spec</a> for more details.
 */
  public?: boolean;
  /** The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.
 */
  redirect_uri?: string;
  /** The OAuth Client secret, used in the OAuth exchange.  This is returned as `<REDACTED>` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.
 */
  readonly secret?: string;
  /** The status of this application.  `active` by default.
 */
  readonly status?: GetClients200DataItemStatus;
  /** The URL where this client's thumbnail may be viewed, or `null` if this client does not have a thumbnail set.
 */
  readonly thumbnail_url?: string | null;
};

export type GetClients200 = {
  data?: GetClients200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetClientsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetNotificationsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetNotificationsDefault = {
  errors?: GetNotificationsDefaultErrorsItem[];
};

/**
 * The type of Notification this is.
 */
export type GetNotifications200DataItemType = typeof GetNotifications200DataItemType[keyof typeof GetNotifications200DataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNotifications200DataItemType = {
  migration_scheduled: 'migration_scheduled',
  migration_imminent: 'migration_imminent',
  migration_pending: 'migration_pending',
  reboot_scheduled: 'reboot_scheduled',
  outage: 'outage',
  payment_due: 'payment_due',
  ticket_important: 'ticket_important',
  ticket_abuse: 'ticket_abuse',
  notice: 'notice',
  maintenance: 'maintenance',
  promotion: 'promotion',
} as const;

/**
 * The severity of this Notification.  This field can be used to decide how prominently to display the Notification, what color to make the display text, etc.

 */
export type GetNotifications200DataItemSeverity = typeof GetNotifications200DataItemSeverity[keyof typeof GetNotifications200DataItemSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNotifications200DataItemSeverity = {
  minor: 'minor',
  major: 'major',
  critical: 'critical',
} as const;

/**
 * An important, often time-sensitive item related to your Account.

 */
export type GetNotifications200DataItem = {
  /** A full description of this Notification, in markdown format.  Not all Notifications include bodies.
 */
  readonly body?: string | null;
  /** Detailed information about the Notification. */
  readonly entity?: GetNotifications200DataItemEntity;
  /** A short description of this Notification.
 */
  readonly label?: string;
  /** A human-readable description of the Notification. */
  readonly message?: string;
  /** The severity of this Notification.  This field can be used to decide how prominently to display the Notification, what color to make the display text, etc.
 */
  readonly severity?: GetNotifications200DataItemSeverity;
  /** The type of Notification this is. */
  readonly type?: GetNotifications200DataItemType;
  /** If this Notification has a duration, this will be the ending time for the Event/action. For example, if there is scheduled maintenance for one of our systems, `until` would be set to the end of the maintenance window.
 */
  readonly until?: string;
  /** If this Notification is of an Event that will happen at a fixed, future time, this is when the named action will be taken. For example, if a Linode is to be migrated in response to a Security Advisory, this field will contain the approximate time the Linode will be taken offline for migration.
 */
  readonly when?: string;
};

export type GetNotifications200 = {
  data?: GetNotifications200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The type of entity this is related to.
 */
export type GetNotifications200DataItemEntityType = typeof GetNotifications200DataItemEntityType[keyof typeof GetNotifications200DataItemEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNotifications200DataItemEntityType = {
  account: 'account',
  entity_transfer: 'entity_transfer',
  linode: 'linode',
  nodebalancer: 'nodebalancer',
  promotion: 'promotion',
  region: 'region',
  ticket: 'ticket',
  volume: 'volume',
} as const;

/**
 * Detailed information about the Notification.
 */
export type GetNotifications200DataItemEntity = {
  /** The unique ID of the Notification's entity, based on the entity
type.

Returns `null` for the following entity types:
* `account`
* `promotion`
 */
  readonly id?: number | null;
  /** The current label for this Notification's entity.

Returns `null` for the following entity types:
* `entity_transfer`
* `promotion`
* `region`
 */
  readonly label?: string | null;
  /** The type of entity this is related to. */
  readonly type?: GetNotifications200DataItemEntityType;
  /** The URL where you can access the object this Notification is for.
If a relative URL, it is relative to the domain you retrieved the
Notification from.

Returns `null` for the `promotion` entity type.
 */
  readonly url?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetMaintenanceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetMaintenanceDefault = {
  errors?: GetMaintenanceDefaultErrorsItem[];
};

/**
 * The type of maintenance.

 */
export type GetMaintenance200DataItemType = typeof GetMaintenance200DataItemType[keyof typeof GetMaintenance200DataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMaintenance200DataItemType = {
  reboot: 'reboot',
  cold_migration: 'cold_migration',
  live_migration: 'live_migration',
} as const;

/**
 * The maintenance status.

Maintenance progresses in the following sequence: pending, started, then completed.

 */
export type GetMaintenance200DataItemStatus = typeof GetMaintenance200DataItemStatus[keyof typeof GetMaintenance200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMaintenance200DataItemStatus = {
  completed: 'completed',
  pending: 'pending',
  started: 'started',
} as const;

/**
 * The entity being affected by maintenance.

 */
export type GetMaintenance200DataItemEntity = {
  /** The id of the entity being affected by maintenance.
 */
  id?: number;
  /** The label of the entity being affected by maintenance.
 */
  label?: string;
  /** The type of entity.
 */
  type?: string;
  /** The API endpoint prefix to use in combination with the entity id to find specific information about the entity.
 */
  url?: string;
};

/**
 * Information about maintenance affecting an entity.

 */
export type GetMaintenance200DataItem = {
  /** The entity being affected by maintenance.
 */
  entity?: GetMaintenance200DataItemEntity;
  /** The reason maintenance is being performed.
 */
  reason?: string;
  /** The maintenance status.

Maintenance progresses in the following sequence: pending, started, then completed.
 */
  status?: GetMaintenance200DataItemStatus;
  /** The type of maintenance.
 */
  type?: GetMaintenance200DataItemType;
  /** When the maintenance will begin.

[Filterable](/docs/api/#filtering-and-sorting) with the following parameters:

* A single value in date-time string format ("%Y-%m-%dT%H:%M:%S"), which returns only matches to that value.

* A dictionary containing pairs of inequality operator string keys ("+or", "+gt", "+gte", "+lt", "+lte",
or "+neq") and single date-time string format values ("%Y-%m-%dT%H:%M:%S"). "+or" accepts an array of values that
may consist of single date-time strings or dictionaries of inequality operator pairs.
 */
  when?: string;
};

export type GetMaintenance200 = {
  data?: GetMaintenance200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetAccountLoginDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetAccountLoginDefault = {
  errors?: GetAccountLoginDefaultErrorsItem[];
};

/**
 * Whether the login attempt succeeded or failed.

 */
export type GetAccountLogin200Status = typeof GetAccountLogin200Status[keyof typeof GetAccountLogin200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAccountLogin200Status = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * An object representing a previous successful login for a User.

 */
export type GetAccountLogin200 = {
  /** When the login was initiated.
 */
  readonly datetime?: string;
  /** The unique ID of this login object.
 */
  readonly id?: number;
  /** The remote IP address that requested the login.
 */
  readonly ip?: string;
  /** True if the User that attempted the login was a restricted User, false otherwise.
 */
  readonly restricted?: boolean;
  /** Whether the login attempt succeeded or failed.
 */
  readonly status?: GetAccountLogin200Status;
  /** The username of the User that attempted the login.
 */
  readonly username?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetAccountLoginsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetAccountLoginsDefault = {
  errors?: GetAccountLoginsDefaultErrorsItem[];
};

export type GetAccountLogins200 = {
  data?: GetAccountLogins200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * Whether the login attempt succeeded or failed.

 */
export type GetAccountLogins200DataItemStatus = typeof GetAccountLogins200DataItemStatus[keyof typeof GetAccountLogins200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAccountLogins200DataItemStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * An object representing a previous successful login for a User.

 */
export type GetAccountLogins200DataItem = {
  /** When the login was initiated.
 */
  readonly datetime?: string;
  /** The unique ID of this login object.
 */
  readonly id?: number;
  /** The remote IP address that requested the login.
 */
  readonly ip?: string;
  /** True if the User that attempted the login was a restricted User, false otherwise.
 */
  readonly restricted?: boolean;
  /** Whether the login attempt succeeded or failed.
 */
  readonly status?: GetAccountLogins200DataItemStatus;
  /** The username of the User that attempted the login.
 */
  readonly username?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetInvoiceItemsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetInvoiceItemsDefault = {
  errors?: GetInvoiceItemsDefaultErrorsItem[];
};

/**
 * The type of service, ether `hourly` or `misc`.
 */
export type GetInvoiceItems200DataItemType = typeof GetInvoiceItems200DataItemType[keyof typeof GetInvoiceItems200DataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvoiceItems200DataItemType = {
  hourly: 'hourly',
  misc: 'misc',
} as const;

/**
 * An InvoiceItem object.
 */
export type GetInvoiceItems200DataItem = {
  /** The price, in US dollars, of the Invoice Item. Equal to the unit price multiplied by quantity. */
  readonly amount?: number;
  /** The date the Invoice Item started, based on month. */
  readonly from?: string;
  /** The Invoice Item's display label. */
  readonly label?: string;
  /** The quantity of this Item for the specified Invoice. */
  readonly quantity?: number;
  /** The ID of the applicable Region associated with this Invoice Item.

`null` if there is no applicable Region.
 */
  readonly region?: string | null;
  /** The amount of tax levied on this Item in US Dollars. */
  readonly tax?: number;
  /** The date the Invoice Item ended, based on month. */
  readonly to?: string;
  /** The price of this Item after taxes in US Dollars. */
  readonly total?: number;
  /** The type of service, ether `hourly` or `misc`. */
  readonly type?: GetInvoiceItems200DataItemType;
  /** The monthly service fee in US Dollars for this Item. */
  readonly unit_price?: string;
};

export type GetInvoiceItems200 = {
  data?: GetInvoiceItems200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetInvoiceItemsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetInvoiceDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetInvoiceDefault = {
  errors?: GetInvoiceDefaultErrorsItem[];
};

export type GetInvoice200TaxSummaryItem = {
  /** The source of this tax subtotal. */
  name?: string;
  /** The amount of tax subtotal attributable to this source. */
  tax?: number;
};

/**
 * `akamai`: This Invoice was generated according to the terms of an agreement between the customer and Akamai.

`linode`: This Invoice was generated according to the default terms, prices, and discounts.

 */
export type GetInvoice200BillingSource = typeof GetInvoice200BillingSource[keyof typeof GetInvoice200BillingSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvoice200BillingSource = {
  akamai: 'akamai',
  linode: 'linode',
} as const;

/**
 * Account Invoice object
 */
export type GetInvoice200 = {
  /** `akamai`: This Invoice was generated according to the terms of an agreement between the customer and Akamai.

`linode`: This Invoice was generated according to the default terms, prices, and discounts.
 */
  readonly billing_source?: GetInvoice200BillingSource;
  /** When this Invoice was generated. */
  readonly date?: string;
  /** The Invoice's unique ID. */
  readonly id?: number;
  /** The Invoice's display label. */
  readonly label?: string;
  /** The amount of the Invoice before taxes in US Dollars. */
  readonly subtotal?: number;
  /** The amount of tax levied on the Invoice in US Dollars. */
  readonly tax?: number;
  /** The amount of tax broken down into subtotals by source. */
  readonly tax_summary?: GetInvoice200TaxSummaryItem[];
  /** The amount of the Invoice after taxes in US Dollars. */
  readonly total?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetInvoicesDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetInvoicesDefault = {
  errors?: GetInvoicesDefaultErrorsItem[];
};

export type GetInvoices200 = {
  data?: GetInvoices200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetInvoices200DataItemTaxSummaryItem = {
  /** The source of this tax subtotal. */
  name?: string;
  /** The amount of tax subtotal attributable to this source. */
  tax?: number;
};

/**
 * `akamai`: This Invoice was generated according to the terms of an agreement between the customer and Akamai.

`linode`: This Invoice was generated according to the default terms, prices, and discounts.

 */
export type GetInvoices200DataItemBillingSource = typeof GetInvoices200DataItemBillingSource[keyof typeof GetInvoices200DataItemBillingSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvoices200DataItemBillingSource = {
  akamai: 'akamai',
  linode: 'linode',
} as const;

/**
 * Account Invoice object
 */
export type GetInvoices200DataItem = {
  /** `akamai`: This Invoice was generated according to the terms of an agreement between the customer and Akamai.

`linode`: This Invoice was generated according to the default terms, prices, and discounts.
 */
  readonly billing_source?: GetInvoices200DataItemBillingSource;
  /** When this Invoice was generated. */
  readonly date?: string;
  /** The Invoice's unique ID. */
  readonly id?: number;
  /** The Invoice's display label. */
  readonly label?: string;
  /** The amount of the Invoice before taxes in US Dollars. */
  readonly subtotal?: number;
  /** The amount of tax levied on the Invoice in US Dollars. */
  readonly tax?: number;
  /** The amount of tax broken down into subtotals by source. */
  readonly tax_summary?: GetInvoices200DataItemTaxSummaryItem[];
  /** The amount of the Invoice after taxes in US Dollars. */
  readonly total?: number;
};

export type GetInvoicesParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type EventSeenDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type EventSeenDefault = {
  errors?: EventSeenDefaultErrorsItem[];
};

export type EventSeen200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type EventReadDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type EventReadDefault = {
  errors?: EventReadDefaultErrorsItem[];
};

export type EventRead200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetEventDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetEventDefault = {
  errors?: GetEventDefaultErrorsItem[];
};

/**
 * The current status of this Event.
 */
export type GetEvent200Status = typeof GetEvent200Status[keyof typeof GetEvent200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEvent200Status = {
  failed: 'failed',
  finished: 'finished',
  notification: 'notification',
  scheduled: 'scheduled',
  started: 'started',
} as const;

/**
 * Detailed information about the Event's secondary entity, which provides additional information
for events such as, but not limited to, `linode_boot`, `linode_reboot`, `linode_create`, and `linode_clone` Event actions.

 */
export type GetEvent200SecondaryEntity = {
  /** The ID of the object that is the secondary entity.
 */
  readonly id?: string;
  /** The label of this object.
 */
  readonly label?: string;
  /** The type of entity that is being referenced by the Event.
 */
  readonly type?: string;
  /** The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
 */
  readonly url?: string;
};

/**
 * The type of entity that is being referenced by the Event.

 */
export type GetEvent200EntityType = typeof GetEvent200EntityType[keyof typeof GetEvent200EntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEvent200EntityType = {
  account: 'account',
  backups: 'backups',
  community: 'community',
  disks: 'disks',
  domain: 'domain',
  entity_transfer: 'entity_transfer',
  firewall: 'firewall',
  image: 'image',
  ipaddress: 'ipaddress',
  linode: 'linode',
  longview: 'longview',
  managed_service: 'managed_service',
  nodebalancer: 'nodebalancer',
  oauth_client: 'oauth_client',
  profile: 'profile',
  stackscript: 'stackscript',
  tag: 'tag',
  ticket: 'ticket',
  token: 'token',
  user: 'user',
  user_ssh_key: 'user_ssh_key',
  volume: 'volume',
} as const;

/**
 * Detailed information about the Event's entity, including ID, type, label, and URL used to access it.

 */
export type GetEvent200Entity = {
  /** The unique ID for an Event's entity.


Some Event entities do not have IDs associated with them, so they
will not be returned when filtering by ID. These Events include:
  * `account`
  * `profile`

Entities for some Events are assigned the ID of the Linode they correspond to.
When filtering by ID for these Events, use the corresponding Linode's ID.
These Events include:
  * `disks`
  * `backups`


Tag Events use a tag's name for the entity ID field. When filtering by ID
for tag Events, supply the name of the tag.
 */
  readonly id?: number;
  /** The current label of this object. The label may reflect changes that occur with this Event.
 */
  readonly label?: string;
  /** The type of entity that is being referenced by the Event.
 */
  readonly type?: GetEvent200EntityType;
  /** The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
 */
  readonly url?: string;
};

/**
 * The action that caused this Event. New actions may be added in the future.

 */
export type GetEvent200Action = typeof GetEvent200Action[keyof typeof GetEvent200Action];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEvent200Action = {
  account_update: 'account_update',
  account_settings_update: 'account_settings_update',
  backups_enable: 'backups_enable',
  backups_cancel: 'backups_cancel',
  backups_restore: 'backups_restore',
  community_question_reply: 'community_question_reply',
  community_like: 'community_like',
  credit_card_updated: 'credit_card_updated',
  disk_create: 'disk_create',
  disk_delete: 'disk_delete',
  disk_update: 'disk_update',
  disk_duplicate: 'disk_duplicate',
  disk_imagize: 'disk_imagize',
  disk_resize: 'disk_resize',
  dns_record_create: 'dns_record_create',
  dns_record_delete: 'dns_record_delete',
  dns_record_update: 'dns_record_update',
  dns_zone_create: 'dns_zone_create',
  dns_zone_delete: 'dns_zone_delete',
  dns_zone_import: 'dns_zone_import',
  dns_zone_update: 'dns_zone_update',
  entity_transfer_accept: 'entity_transfer_accept',
  entity_transfer_cancel: 'entity_transfer_cancel',
  entity_transfer_create: 'entity_transfer_create',
  entity_transfer_fail: 'entity_transfer_fail',
  entity_transfer_stale: 'entity_transfer_stale',
  firewall_create: 'firewall_create',
  firewall_delete: 'firewall_delete',
  firewall_disable: 'firewall_disable',
  firewall_enable: 'firewall_enable',
  firewall_update: 'firewall_update',
  firewall_device_add: 'firewall_device_add',
  firewall_device_remove: 'firewall_device_remove',
  host_reboot: 'host_reboot',
  image_delete: 'image_delete',
  image_update: 'image_update',
  image_upload: 'image_upload',
  ipaddress_update: 'ipaddress_update',
  lassie_reboot: 'lassie_reboot',
  lish_boot: 'lish_boot',
  linode_addip: 'linode_addip',
  linode_boot: 'linode_boot',
  linode_clone: 'linode_clone',
  linode_create: 'linode_create',
  linode_delete: 'linode_delete',
  linode_update: 'linode_update',
  linode_deleteip: 'linode_deleteip',
  linode_migrate: 'linode_migrate',
  linode_migrate_datacenter: 'linode_migrate_datacenter',
  linode_migrate_datacenter_create: 'linode_migrate_datacenter_create',
  linode_mutate: 'linode_mutate',
  linode_mutate_create: 'linode_mutate_create',
  linode_reboot: 'linode_reboot',
  linode_rebuild: 'linode_rebuild',
  linode_resize: 'linode_resize',
  linode_resize_create: 'linode_resize_create',
  linode_shutdown: 'linode_shutdown',
  linode_snapshot: 'linode_snapshot',
  linode_config_create: 'linode_config_create',
  linode_config_delete: 'linode_config_delete',
  linode_config_update: 'linode_config_update',
  lke_node_create: 'lke_node_create',
  longviewclient_create: 'longviewclient_create',
  longviewclient_delete: 'longviewclient_delete',
  longviewclient_update: 'longviewclient_update',
  managed_disabled: 'managed_disabled',
  managed_enabled: 'managed_enabled',
  managed_service_create: 'managed_service_create',
  managed_service_delete: 'managed_service_delete',
  nodebalancer_create: 'nodebalancer_create',
  nodebalancer_delete: 'nodebalancer_delete',
  nodebalancer_update: 'nodebalancer_update',
  nodebalancer_config_create: 'nodebalancer_config_create',
  nodebalancer_config_delete: 'nodebalancer_config_delete',
  nodebalancer_config_update: 'nodebalancer_config_update',
  nodebalancer_node_create: 'nodebalancer_node_create',
  nodebalancer_node_delete: 'nodebalancer_node_delete',
  nodebalancer_node_update: 'nodebalancer_node_update',
  oauth_client_create: 'oauth_client_create',
  oauth_client_delete: 'oauth_client_delete',
  oauth_client_secret_reset: 'oauth_client_secret_reset',
  oauth_client_update: 'oauth_client_update',
  obj_access_key_create: 'obj_access_key_create',
  obj_access_key_delete: 'obj_access_key_delete',
  obj_access_key_update: 'obj_access_key_update',
  password_reset: 'password_reset',
  payment_method_add: 'payment_method_add',
  payment_submitted: 'payment_submitted',
  profile_update: 'profile_update',
  stackscript_create: 'stackscript_create',
  stackscript_delete: 'stackscript_delete',
  stackscript_update: 'stackscript_update',
  stackscript_publicize: 'stackscript_publicize',
  stackscript_revise: 'stackscript_revise',
  tag_create: 'tag_create',
  tag_delete: 'tag_delete',
  tfa_disabled: 'tfa_disabled',
  tfa_enabled: 'tfa_enabled',
  ticket_attachment_upload: 'ticket_attachment_upload',
  ticket_create: 'ticket_create',
  ticket_update: 'ticket_update',
  token_create: 'token_create',
  token_delete: 'token_delete',
  token_update: 'token_update',
  user_create: 'user_create',
  user_update: 'user_update',
  user_delete: 'user_delete',
  user_ssh_key_add: 'user_ssh_key_add',
  user_ssh_key_delete: 'user_ssh_key_delete',
  user_ssh_key_update: 'user_ssh_key_update',
  vlan_attach: 'vlan_attach',
  vlan_detach: 'vlan_detach',
  volume_attach: 'volume_attach',
  volume_clone: 'volume_clone',
  volume_create: 'volume_create',
  volume_delete: 'volume_delete',
  volume_update: 'volume_update',
  volume_detach: 'volume_detach',
  volume_resize: 'volume_resize',
} as const;

/**
 * A collection of Event objects. An Event is an action taken against an entity related to your Account. For example, booting a Linode would create an Event.
The Events returned depends on your grants.

 */
export type GetEvent200 = {
  /** The action that caused this Event. New actions may be added in the future.
 */
  readonly action?: GetEvent200Action;
  /** When this Event was created. */
  readonly created?: string;
  /** The total duration in seconds that it takes for the Event to complete.
 */
  readonly duration?: number;
  /** Detailed information about the Event's entity, including ID, type, label, and URL used to access it.
 */
  readonly entity?: GetEvent200Entity;
  /** The unique ID of this Event. */
  readonly id?: number;
  /** Provides additional information about the event. Additional information may include, but is not limited to, a more detailed representation of events which can help diagnose non-obvious failures.
 */
  message?: string | null;
  /** A percentage estimating the amount of time remaining for an Event.
Returns `null` for notification events.
 */
  readonly percent_complete?: number;
  /** The rate of completion of the Event. Only some Events will return rate; for example, migration and resize Events.
 */
  readonly rate?: string;
  /** If this Event has been read. */
  readonly read?: boolean;
  /** Detailed information about the Event's secondary entity, which provides additional information
for events such as, but not limited to, `linode_boot`, `linode_reboot`, `linode_create`, and `linode_clone` Event actions.
 */
  readonly secondary_entity?: GetEvent200SecondaryEntity;
  /** If this Event has been seen. */
  readonly seen?: boolean;
  /** The current status of this Event. */
  readonly status?: GetEvent200Status;
  /** The estimated time remaining until the completion of this Event. This value is only returned for some in-progress migration events. For all other in-progress events, the `percent_complete` attribute will indicate about how much more work is to be done.
 */
  readonly time_remaining?: string | null;
  /** The username of the User who caused the Event.
 */
  readonly username?: string | null;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetEventsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetEventsDefault = {
  errors?: GetEventsDefaultErrorsItem[];
};

/**
 * The current status of this Event.
 */
export type GetEvents200DataItemStatus = typeof GetEvents200DataItemStatus[keyof typeof GetEvents200DataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEvents200DataItemStatus = {
  failed: 'failed',
  finished: 'finished',
  notification: 'notification',
  scheduled: 'scheduled',
  started: 'started',
} as const;

/**
 * Detailed information about the Event's secondary entity, which provides additional information
for events such as, but not limited to, `linode_boot`, `linode_reboot`, `linode_create`, and `linode_clone` Event actions.

 */
export type GetEvents200DataItemSecondaryEntity = {
  /** The ID of the object that is the secondary entity.
 */
  readonly id?: string;
  /** The label of this object.
 */
  readonly label?: string;
  /** The type of entity that is being referenced by the Event.
 */
  readonly type?: string;
  /** The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
 */
  readonly url?: string;
};

/**
 * A collection of Event objects. An Event is an action taken against an entity related to your Account. For example, booting a Linode would create an Event.
The Events returned depends on your grants.

 */
export type GetEvents200DataItem = {
  /** The action that caused this Event. New actions may be added in the future.
 */
  readonly action?: GetEvents200DataItemAction;
  /** When this Event was created. */
  readonly created?: string;
  /** The total duration in seconds that it takes for the Event to complete.
 */
  readonly duration?: number;
  /** Detailed information about the Event's entity, including ID, type, label, and URL used to access it.
 */
  readonly entity?: GetEvents200DataItemEntity;
  /** The unique ID of this Event. */
  readonly id?: number;
  /** Provides additional information about the event. Additional information may include, but is not limited to, a more detailed representation of events which can help diagnose non-obvious failures.
 */
  message?: string | null;
  /** A percentage estimating the amount of time remaining for an Event.
Returns `null` for notification events.
 */
  readonly percent_complete?: number;
  /** The rate of completion of the Event. Only some Events will return rate; for example, migration and resize Events.
 */
  readonly rate?: string;
  /** If this Event has been read. */
  readonly read?: boolean;
  /** Detailed information about the Event's secondary entity, which provides additional information
for events such as, but not limited to, `linode_boot`, `linode_reboot`, `linode_create`, and `linode_clone` Event actions.
 */
  readonly secondary_entity?: GetEvents200DataItemSecondaryEntity;
  /** If this Event has been seen. */
  readonly seen?: boolean;
  /** The current status of this Event. */
  readonly status?: GetEvents200DataItemStatus;
  /** The estimated time remaining until the completion of this Event. This value is only returned for some in-progress migration events. For all other in-progress events, the `percent_complete` attribute will indicate about how much more work is to be done.
 */
  readonly time_remaining?: string | null;
  /** The username of the User who caused the Event.
 */
  readonly username?: string | null;
};

export type GetEvents200 = {
  data?: GetEvents200DataItem[];
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

/**
 * The type of entity that is being referenced by the Event.

 */
export type GetEvents200DataItemEntityType = typeof GetEvents200DataItemEntityType[keyof typeof GetEvents200DataItemEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEvents200DataItemEntityType = {
  account: 'account',
  backups: 'backups',
  community: 'community',
  disks: 'disks',
  domain: 'domain',
  entity_transfer: 'entity_transfer',
  firewall: 'firewall',
  image: 'image',
  ipaddress: 'ipaddress',
  linode: 'linode',
  longview: 'longview',
  managed_service: 'managed_service',
  nodebalancer: 'nodebalancer',
  oauth_client: 'oauth_client',
  profile: 'profile',
  stackscript: 'stackscript',
  tag: 'tag',
  ticket: 'ticket',
  token: 'token',
  user: 'user',
  user_ssh_key: 'user_ssh_key',
  volume: 'volume',
} as const;

/**
 * Detailed information about the Event's entity, including ID, type, label, and URL used to access it.

 */
export type GetEvents200DataItemEntity = {
  /** The unique ID for an Event's entity.


Some Event entities do not have IDs associated with them, so they
will not be returned when filtering by ID. These Events include:
  * `account`
  * `profile`

Entities for some Events are assigned the ID of the Linode they correspond to.
When filtering by ID for these Events, use the corresponding Linode's ID.
These Events include:
  * `disks`
  * `backups`


Tag Events use a tag's name for the entity ID field. When filtering by ID
for tag Events, supply the name of the tag.
 */
  readonly id?: number;
  /** The current label of this object. The label may reflect changes that occur with this Event.
 */
  readonly label?: string;
  /** The type of entity that is being referenced by the Event.
 */
  readonly type?: GetEvents200DataItemEntityType;
  /** The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
 */
  readonly url?: string;
};

/**
 * The action that caused this Event. New actions may be added in the future.

 */
export type GetEvents200DataItemAction = typeof GetEvents200DataItemAction[keyof typeof GetEvents200DataItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEvents200DataItemAction = {
  account_update: 'account_update',
  account_settings_update: 'account_settings_update',
  backups_enable: 'backups_enable',
  backups_cancel: 'backups_cancel',
  backups_restore: 'backups_restore',
  community_question_reply: 'community_question_reply',
  community_like: 'community_like',
  credit_card_updated: 'credit_card_updated',
  disk_create: 'disk_create',
  disk_delete: 'disk_delete',
  disk_update: 'disk_update',
  disk_duplicate: 'disk_duplicate',
  disk_imagize: 'disk_imagize',
  disk_resize: 'disk_resize',
  dns_record_create: 'dns_record_create',
  dns_record_delete: 'dns_record_delete',
  dns_record_update: 'dns_record_update',
  dns_zone_create: 'dns_zone_create',
  dns_zone_delete: 'dns_zone_delete',
  dns_zone_import: 'dns_zone_import',
  dns_zone_update: 'dns_zone_update',
  entity_transfer_accept: 'entity_transfer_accept',
  entity_transfer_cancel: 'entity_transfer_cancel',
  entity_transfer_create: 'entity_transfer_create',
  entity_transfer_fail: 'entity_transfer_fail',
  entity_transfer_stale: 'entity_transfer_stale',
  firewall_create: 'firewall_create',
  firewall_delete: 'firewall_delete',
  firewall_disable: 'firewall_disable',
  firewall_enable: 'firewall_enable',
  firewall_update: 'firewall_update',
  firewall_device_add: 'firewall_device_add',
  firewall_device_remove: 'firewall_device_remove',
  host_reboot: 'host_reboot',
  image_delete: 'image_delete',
  image_update: 'image_update',
  image_upload: 'image_upload',
  ipaddress_update: 'ipaddress_update',
  lassie_reboot: 'lassie_reboot',
  lish_boot: 'lish_boot',
  linode_addip: 'linode_addip',
  linode_boot: 'linode_boot',
  linode_clone: 'linode_clone',
  linode_create: 'linode_create',
  linode_delete: 'linode_delete',
  linode_update: 'linode_update',
  linode_deleteip: 'linode_deleteip',
  linode_migrate: 'linode_migrate',
  linode_migrate_datacenter: 'linode_migrate_datacenter',
  linode_migrate_datacenter_create: 'linode_migrate_datacenter_create',
  linode_mutate: 'linode_mutate',
  linode_mutate_create: 'linode_mutate_create',
  linode_reboot: 'linode_reboot',
  linode_rebuild: 'linode_rebuild',
  linode_resize: 'linode_resize',
  linode_resize_create: 'linode_resize_create',
  linode_shutdown: 'linode_shutdown',
  linode_snapshot: 'linode_snapshot',
  linode_config_create: 'linode_config_create',
  linode_config_delete: 'linode_config_delete',
  linode_config_update: 'linode_config_update',
  lke_node_create: 'lke_node_create',
  longviewclient_create: 'longviewclient_create',
  longviewclient_delete: 'longviewclient_delete',
  longviewclient_update: 'longviewclient_update',
  managed_disabled: 'managed_disabled',
  managed_enabled: 'managed_enabled',
  managed_service_create: 'managed_service_create',
  managed_service_delete: 'managed_service_delete',
  nodebalancer_create: 'nodebalancer_create',
  nodebalancer_delete: 'nodebalancer_delete',
  nodebalancer_update: 'nodebalancer_update',
  nodebalancer_config_create: 'nodebalancer_config_create',
  nodebalancer_config_delete: 'nodebalancer_config_delete',
  nodebalancer_config_update: 'nodebalancer_config_update',
  nodebalancer_node_create: 'nodebalancer_node_create',
  nodebalancer_node_delete: 'nodebalancer_node_delete',
  nodebalancer_node_update: 'nodebalancer_node_update',
  oauth_client_create: 'oauth_client_create',
  oauth_client_delete: 'oauth_client_delete',
  oauth_client_secret_reset: 'oauth_client_secret_reset',
  oauth_client_update: 'oauth_client_update',
  obj_access_key_create: 'obj_access_key_create',
  obj_access_key_delete: 'obj_access_key_delete',
  obj_access_key_update: 'obj_access_key_update',
  password_reset: 'password_reset',
  payment_method_add: 'payment_method_add',
  payment_submitted: 'payment_submitted',
  profile_update: 'profile_update',
  stackscript_create: 'stackscript_create',
  stackscript_delete: 'stackscript_delete',
  stackscript_update: 'stackscript_update',
  stackscript_publicize: 'stackscript_publicize',
  stackscript_revise: 'stackscript_revise',
  tag_create: 'tag_create',
  tag_delete: 'tag_delete',
  tfa_disabled: 'tfa_disabled',
  tfa_enabled: 'tfa_enabled',
  ticket_attachment_upload: 'ticket_attachment_upload',
  ticket_create: 'ticket_create',
  ticket_update: 'ticket_update',
  token_create: 'token_create',
  token_delete: 'token_delete',
  token_update: 'token_update',
  user_create: 'user_create',
  user_update: 'user_update',
  user_delete: 'user_delete',
  user_ssh_key_add: 'user_ssh_key_add',
  user_ssh_key_delete: 'user_ssh_key_delete',
  user_ssh_key_update: 'user_ssh_key_update',
  vlan_attach: 'vlan_attach',
  vlan_detach: 'vlan_detach',
  volume_attach: 'volume_attach',
  volume_clone: 'volume_clone',
  volume_create: 'volume_create',
  volume_delete: 'volume_delete',
  volume_update: 'volume_update',
  volume_detach: 'volume_detach',
  volume_resize: 'volume_resize',
} as const;

export type GetEventsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type AcceptEntityTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type AcceptEntityTransferDefault = {
  errors?: AcceptEntityTransferDefaultErrorsItem[];
};

export type AcceptEntityTransfer200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type DeleteEntityTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type DeleteEntityTransferDefault = {
  errors?: DeleteEntityTransferDefaultErrorsItem[];
};

export type DeleteEntityTransfer200 = { [key: string]: any };

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetEntityTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetEntityTransferDefault = {
  errors?: GetEntityTransferDefaultErrorsItem[];
};

/**
 * The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or canceled.

 */
export type GetEntityTransfer200Status = typeof GetEntityTransfer200Status[keyof typeof GetEntityTransfer200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEntityTransfer200Status = {
  accepted: 'accepted',
  canceled: 'canceled',
  completed: 'completed',
  failed: 'failed',
  pending: 'pending',
  stale: 'stale',
} as const;

/**
 * A collection of the entities to include in this transfer request, separated by type.

 */
export type GetEntityTransfer200Entities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

/**
 * An object representing an Entity Transfer.

 */
export type GetEntityTransfer200 = {
  /** When this transfer was created.
 */
  created?: string;
  /** A collection of the entities to include in this transfer request, separated by type.
 */
  entities?: GetEntityTransfer200Entities;
  /** When this transfer expires. Transfers will automatically expire 24 hours after creation.
 */
  expiry?: string;
  /** If the requesting account created this transfer.
 */
  is_sender?: boolean;
  /** The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or canceled.
 */
  status?: GetEntityTransfer200Status;
  /** The token used to identify and accept or cancel this transfer.
 */
  token?: string;
  /** When this transfer was last updated.
 */
  updated?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateEntityTransferDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateEntityTransferDefault = {
  errors?: CreateEntityTransferDefaultErrorsItem[];
};

/**
 * The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or canceled.

 */
export type CreateEntityTransfer200Status = typeof CreateEntityTransfer200Status[keyof typeof CreateEntityTransfer200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateEntityTransfer200Status = {
  accepted: 'accepted',
  canceled: 'canceled',
  completed: 'completed',
  failed: 'failed',
  pending: 'pending',
  stale: 'stale',
} as const;

/**
 * A collection of the entities to include in this transfer request, separated by type.

 */
export type CreateEntityTransfer200Entities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

/**
 * An object representing an Entity Transfer.

 */
export type CreateEntityTransfer200 = {
  /** When this transfer was created.
 */
  created?: string;
  /** A collection of the entities to include in this transfer request, separated by type.
 */
  entities?: CreateEntityTransfer200Entities;
  /** When this transfer expires. Transfers will automatically expire 24 hours after creation.
 */
  expiry?: string;
  /** If the requesting account created this transfer.
 */
  is_sender?: boolean;
  /** The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or canceled.
 */
  status?: CreateEntityTransfer200Status;
  /** The token used to identify and accept or cancel this transfer.
 */
  token?: string;
  /** When this transfer was last updated.
 */
  updated?: string;
};

/**
 * A collection of the entities to include in this transfer request, separated by type.

 */
export type CreateEntityTransferBodyEntities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

export type CreateEntityTransferBody = {
  /** A collection of the entities to include in this transfer request, separated by type.
 */
  entities: CreateEntityTransferBodyEntities;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetEntityTransfersDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetEntityTransfersDefault = {
  errors?: GetEntityTransfersDefaultErrorsItem[];
};

export type GetEntityTransfers200AllOfTwo = {
  data?: GetEntityTransfers200AllOfTwoDataItem[];
};

export type GetEntityTransfers200 = GetEntityTransfers200AllOf & GetEntityTransfers200AllOfTwo;

/**
 * The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or canceled.

 */
export type GetEntityTransfers200AllOfTwoDataItemStatus = typeof GetEntityTransfers200AllOfTwoDataItemStatus[keyof typeof GetEntityTransfers200AllOfTwoDataItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEntityTransfers200AllOfTwoDataItemStatus = {
  accepted: 'accepted',
  canceled: 'canceled',
  completed: 'completed',
  failed: 'failed',
  pending: 'pending',
  stale: 'stale',
} as const;

/**
 * A collection of the entities to include in this transfer request, separated by type.

 */
export type GetEntityTransfers200AllOfTwoDataItemEntities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

/**
 * An object representing an Entity Transfer.

 */
export type GetEntityTransfers200AllOfTwoDataItem = {
  /** When this transfer was created.
 */
  created?: string;
  /** A collection of the entities to include in this transfer request, separated by type.
 */
  entities?: GetEntityTransfers200AllOfTwoDataItemEntities;
  /** When this transfer expires. Transfers will automatically expire 24 hours after creation.
 */
  expiry?: string;
  /** If the requesting account created this transfer.
 */
  is_sender?: boolean;
  /** The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or canceled.
 */
  status?: GetEntityTransfers200AllOfTwoDataItemStatus;
  /** The token used to identify and accept or cancel this transfer.
 */
  token?: string;
  /** When this transfer was last updated.
 */
  updated?: string;
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetEntityTransfers200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetEntityTransfersParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CreateCreditCardDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CreateCreditCardDefault = {
  errors?: CreateCreditCardDefaultErrorsItem[];
};

export type CreateCreditCard200 = { [key: string]: any };

/**
 * An object representing the credit card information you have on file with
Linode to make Payments against your Account.

 */
export type CreateCreditCardBody = {
  /** Your credit card number. No spaces or dashes allowed. */
  card_number: string;
  /** CVV (Card Verification Value) of the credit card, typically found on the back of the card.
 */
  cvv: string;
  /** A value from 1-12 representing the expiration month of your credit card.

  * 1 = January
  * 2 = February
  * 3 = March
  * Etc.
 */
  expiry_month: number;
  /** A four-digit integer representing the expiration year of
your credit card.

The combination of `expiry_month` and `expiry_year`
must result in a month/year combination of the current month or in
the future. An expiration date set in the past is invalid.
 */
  expiry_year: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type CancelAccountDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type CancelAccountDefault = {
  errors?: CancelAccountDefaultErrorsItem[];
};

export type CancelAccount409ErrorsItem = {
  /** A string explaining that the account could not be canceled because there is an outstanding balance on the account that must be paid first.
 */
  reason?: string;
};

export type CancelAccount409 = {
  errors?: CancelAccount409ErrorsItem[];
};

export type CancelAccount200 = {
  /** A link to Linode's exit survey. */
  survey_link?: string;
};

export type CancelAccountBody = {
  /** Any reason for cancelling the account, and any other comments you might have about your Linode service.
 */
  comments?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetEnrolledBetaProgramDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetEnrolledBetaProgramDefault = {
  errors?: GetEnrolledBetaProgramDefaultErrorsItem[];
};

/**
 * An object representing an enrolled Beta Program for the Account.
 */
export type GetEnrolledBetaProgram200 = {
  /** Additional details regarding the Beta Program. */
  readonly description?: string | null;
  /** The date-time that the Beta Program ended.

`null` indicates that the Beta Program is ongoing.
 */
  readonly ended?: string | null;
  /** The date-time of Account enrollment to the Beta Program. */
  readonly enrolled?: string;
  /** The unique identifier of the Beta Program. */
  id?: string;
  /** The name of the Beta Program. */
  readonly label?: string;
  /** The start date-time of the Beta Program. */
  readonly started?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type EnrollBetaProgramDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type EnrollBetaProgramDefault = {
  errors?: EnrollBetaProgramDefaultErrorsItem[];
};

export type EnrollBetaProgram200 = { [key: string]: any };

/**
 * The Beta Program ID to enroll in for your Account.
 */
export type EnrollBetaProgramBody = {
  /** The unique identifier of the Beta Program. */
  id: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetEnrolledBetaProgramsDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetEnrolledBetaProgramsDefault = {
  errors?: GetEnrolledBetaProgramsDefaultErrorsItem[];
};

/**
 * An object representing an enrolled Beta Program for the Account.
 */
export type GetEnrolledBetaPrograms200AllOfTwoDataItem = {
  /** Additional details regarding the Beta Program. */
  readonly description?: string | null;
  /** The date-time that the Beta Program ended.

`null` indicates that the Beta Program is ongoing.
 */
  readonly ended?: string | null;
  /** The date-time of Account enrollment to the Beta Program. */
  readonly enrolled?: string;
  /** The unique identifier of the Beta Program. */
  id?: string;
  /** The name of the Beta Program. */
  readonly label?: string;
  /** The start date-time of the Beta Program. */
  readonly started?: string;
};

export type GetEnrolledBetaPrograms200AllOfTwo = {
  data?: GetEnrolledBetaPrograms200AllOfTwoDataItem[];
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetEnrolledBetaPrograms200AllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetEnrolledBetaPrograms200 = GetEnrolledBetaPrograms200AllOf & GetEnrolledBetaPrograms200AllOfTwo;

export type GetEnrolledBetaProgramsParams = {
/**
 * The page of a collection to return.
 */
page?: number;
/**
 * The number of items to return per page.
 */
page_size?: number;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetAccountAvailabilityDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetAccountAvailabilityDefault = {
  errors?: GetAccountAvailabilityDefaultErrorsItem[];
};

/**
 * Account Service Availability object
 */
export type GetAccountAvailability200 = {
  /** Displays the data center represented by a slug.
 */
  readonly region?: string;
  /** A list of strings of unavailable services.
 */
  readonly unavailable?: unknown;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetAvailabilityDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetAvailabilityDefault = {
  errors?: GetAvailabilityDefaultErrorsItem[];
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type GetAvailability200AllOfThree = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type GetAvailability200 = GetAvailability200AllOf & GetAvailability200AllOfThree;

/**
 * Account Service Availability object
 */
export type GetAvailability200AllOfDataItem = {
  /** Displays the data center represented by a slug.
 */
  readonly region?: string;
  /** A list of strings of unavailable services.
 */
  readonly unavailable?: unknown;
};

export type GetAvailability200AllOf = {
  data?: GetAvailability200AllOfDataItem[];
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type UpdateAccountDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type UpdateAccountDefault = {
  errors?: UpdateAccountDefaultErrorsItem[];
};

/**
 * Credit Card information associated with this Account.
 */
export type UpdateAccount200CreditCard = {
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card associated with this Account.
 */
  readonly last_four?: string;
};

/**
 * The source of service charges for this Account, as determined by its relationship with Akamai.
Accounts that are associated with Akamai-specific customers return a value of `akamai`.
All other Accounts return a value of `linode`.

 */
export type UpdateAccount200BillingSource = typeof UpdateAccount200BillingSource[keyof typeof UpdateAccount200BillingSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAccount200BillingSource = {
  akamai: 'akamai',
  linode: 'linode',
} as const;

/**
 * Account object
 */
export type UpdateAccount200 = {
  readonly active_promotions?: UpdateAccount200ActivePromotionsItem[];
  /** The datetime of when the account was activated. */
  readonly active_since?: string;
  /** First line of this Account's billing address. */
  address_1?: string;
  /** Second line of this Account's billing address. */
  address_2?: string;
  /** This Account's balance, in US dollars. */
  readonly balance?: number;
  /** This Account's current estimated invoice in US dollars. This is not your final invoice balance. Transfer charges are not included in the estimate.
 */
  readonly balance_uninvoiced?: number;
  /** The source of service charges for this Account, as determined by its relationship with Akamai.
Accounts that are associated with Akamai-specific customers return a value of `akamai`.
All other Accounts return a value of `linode`.
 */
  readonly billing_source?: UpdateAccount200BillingSource;
  /** A list of capabilities your account supports.
 */
  readonly capabilities?: string[];
  /** The city for this Account's billing address. */
  city?: string;
  /** The company name associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  company?: string;
  /** The two-letter ISO 3166 country code of this Account's billing address.
 */
  country?: string;
  /** Credit Card information associated with this Account. */
  readonly credit_card?: UpdateAccount200CreditCard;
  /** The email address of the person associated with this Account. */
  email?: string;
  /** An external unique identifier for this account.
 */
  readonly euuid?: string;
  /** The first name of the person associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  first_name?: string;
  /** The last name of the person associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  last_name?: string;
  /** The phone number associated with this Account. */
  phone?: string;
  /** If billing address is in the United States (US) or Canada (CA), only the two-letter ISO 3166 State or Province code are accepted. If entering a US military address, state abbreviations (AA, AE, AP) should be entered. If the address is outside the US or CA, this is the Province associated with the Account's billing address.
 */
  state?: string;
  /** The tax identification number associated with this Account, for tax calculations in some countries. If you do not live in a country that collects tax, this should be an empty string (`""`).
 */
  tax_id?: string;
  /** The zip code of this Account's billing address. The following restrictions apply:

- May only consist of letters, numbers, spaces, and hyphens.
- Must not contain more than 9 letter or number characters.
 */
  zip?: string;
};

/**
 * The service to which this promotion applies.

 */
export type UpdateAccount200ActivePromotionsItemServiceType = typeof UpdateAccount200ActivePromotionsItemServiceType[keyof typeof UpdateAccount200ActivePromotionsItemServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAccount200ActivePromotionsItemServiceType = {
  all: 'all',
  backup: 'backup',
  blockstorage: 'blockstorage',
  db_mysql: 'db_mysql',
  ip_v4: 'ip_v4',
  linode: 'linode',
  linode_disk: 'linode_disk',
  linode_memory: 'linode_memory',
  longview: 'longview',
  managed: 'managed',
  nodebalancer: 'nodebalancer',
  objectstorage: 'objectstorage',
  transfer_tx: 'transfer_tx',
} as const;

/**
 * Promotions generally
offer a set amount of credit that can be used toward your Linode
services, and the promotion expires after a specified date. As well,
a monthly cap on the promotional offer is set.

Simply put, a promotion offers a certain amount of credit every
month, until either the expiration date is passed, or until the total
promotional credit is used, whichever comes first.

 */
export type UpdateAccount200ActivePromotionsItem = {
  /** The amount available to spend per month.
 */
  readonly credit_monthly_cap?: string;
  /** The total amount of credit left for this promotion.
 */
  readonly credit_remaining?: string;
  /** A detailed description of this promotion.
 */
  readonly description?: string;
  /** When this promotion's credits expire.
 */
  readonly expire_dt?: string;
  /** The location of an image for this promotion.
 */
  readonly image_url?: string;
  /** The service to which this promotion applies.
 */
  readonly service_type?: UpdateAccount200ActivePromotionsItemServiceType;
  /** Short details of this promotion.
 */
  readonly summary?: string;
  /** The amount of credit left for this month for this promotion.
 */
  readonly this_month_credit_remaining?: string;
};

/**
 * Credit Card information associated with this Account.
 */
export type UpdateAccountBodyCreditCard = {
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card associated with this Account.
 */
  readonly last_four?: string;
};

/**
 * The source of service charges for this Account, as determined by its relationship with Akamai.
Accounts that are associated with Akamai-specific customers return a value of `akamai`.
All other Accounts return a value of `linode`.

 */
export type UpdateAccountBodyBillingSource = typeof UpdateAccountBodyBillingSource[keyof typeof UpdateAccountBodyBillingSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAccountBodyBillingSource = {
  akamai: 'akamai',
  linode: 'linode',
} as const;

/**
 * Account object
 */
export type UpdateAccountBody = {
  readonly active_promotions?: UpdateAccountBodyActivePromotionsItem[];
  /** The datetime of when the account was activated. */
  readonly active_since?: string;
  /** First line of this Account's billing address. */
  address_1?: string;
  /** Second line of this Account's billing address. */
  address_2?: string;
  /** This Account's balance, in US dollars. */
  readonly balance?: number;
  /** This Account's current estimated invoice in US dollars. This is not your final invoice balance. Transfer charges are not included in the estimate.
 */
  readonly balance_uninvoiced?: number;
  /** The source of service charges for this Account, as determined by its relationship with Akamai.
Accounts that are associated with Akamai-specific customers return a value of `akamai`.
All other Accounts return a value of `linode`.
 */
  readonly billing_source?: UpdateAccountBodyBillingSource;
  /** A list of capabilities your account supports.
 */
  readonly capabilities?: string[];
  /** The city for this Account's billing address. */
  city?: string;
  /** The company name associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  company?: string;
  /** The two-letter ISO 3166 country code of this Account's billing address.
 */
  country?: string;
  /** Credit Card information associated with this Account. */
  readonly credit_card?: UpdateAccountBodyCreditCard;
  /** The email address of the person associated with this Account. */
  email?: string;
  /** An external unique identifier for this account.
 */
  readonly euuid?: string;
  /** The first name of the person associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  first_name?: string;
  /** The last name of the person associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  last_name?: string;
  /** The phone number associated with this Account. */
  phone?: string;
  /** If billing address is in the United States (US) or Canada (CA), only the two-letter ISO 3166 State or Province code are accepted. If entering a US military address, state abbreviations (AA, AE, AP) should be entered. If the address is outside the US or CA, this is the Province associated with the Account's billing address.
 */
  state?: string;
  /** The tax identification number associated with this Account, for tax calculations in some countries. If you do not live in a country that collects tax, this should be an empty string (`""`).
 */
  tax_id?: string;
  /** The zip code of this Account's billing address. The following restrictions apply:

- May only consist of letters, numbers, spaces, and hyphens.
- Must not contain more than 9 letter or number characters.
 */
  zip?: string;
};

/**
 * The service to which this promotion applies.

 */
export type UpdateAccountBodyActivePromotionsItemServiceType = typeof UpdateAccountBodyActivePromotionsItemServiceType[keyof typeof UpdateAccountBodyActivePromotionsItemServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAccountBodyActivePromotionsItemServiceType = {
  all: 'all',
  backup: 'backup',
  blockstorage: 'blockstorage',
  db_mysql: 'db_mysql',
  ip_v4: 'ip_v4',
  linode: 'linode',
  linode_disk: 'linode_disk',
  linode_memory: 'linode_memory',
  longview: 'longview',
  managed: 'managed',
  nodebalancer: 'nodebalancer',
  objectstorage: 'objectstorage',
  transfer_tx: 'transfer_tx',
} as const;

/**
 * Promotions generally
offer a set amount of credit that can be used toward your Linode
services, and the promotion expires after a specified date. As well,
a monthly cap on the promotional offer is set.

Simply put, a promotion offers a certain amount of credit every
month, until either the expiration date is passed, or until the total
promotional credit is used, whichever comes first.

 */
export type UpdateAccountBodyActivePromotionsItem = {
  /** The amount available to spend per month.
 */
  readonly credit_monthly_cap?: string;
  /** The total amount of credit left for this promotion.
 */
  readonly credit_remaining?: string;
  /** A detailed description of this promotion.
 */
  readonly description?: string;
  /** When this promotion's credits expire.
 */
  readonly expire_dt?: string;
  /** The location of an image for this promotion.
 */
  readonly image_url?: string;
  /** The service to which this promotion applies.
 */
  readonly service_type?: UpdateAccountBodyActivePromotionsItemServiceType;
  /** Short details of this promotion.
 */
  readonly summary?: string;
  /** The amount of credit left for this month for this promotion.
 */
  readonly this_month_credit_remaining?: string;
};

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type GetAccountDefaultErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type GetAccountDefault = {
  errors?: GetAccountDefaultErrorsItem[];
};

/**
 * Credit Card information associated with this Account.
 */
export type GetAccount200CreditCard = {
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card associated with this Account.
 */
  readonly last_four?: string;
};

/**
 * The source of service charges for this Account, as determined by its relationship with Akamai.
Accounts that are associated with Akamai-specific customers return a value of `akamai`.
All other Accounts return a value of `linode`.

 */
export type GetAccount200BillingSource = typeof GetAccount200BillingSource[keyof typeof GetAccount200BillingSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAccount200BillingSource = {
  akamai: 'akamai',
  linode: 'linode',
} as const;

/**
 * Account object
 */
export type GetAccount200 = {
  readonly active_promotions?: GetAccount200ActivePromotionsItem[];
  /** The datetime of when the account was activated. */
  readonly active_since?: string;
  /** First line of this Account's billing address. */
  address_1?: string;
  /** Second line of this Account's billing address. */
  address_2?: string;
  /** This Account's balance, in US dollars. */
  readonly balance?: number;
  /** This Account's current estimated invoice in US dollars. This is not your final invoice balance. Transfer charges are not included in the estimate.
 */
  readonly balance_uninvoiced?: number;
  /** The source of service charges for this Account, as determined by its relationship with Akamai.
Accounts that are associated with Akamai-specific customers return a value of `akamai`.
All other Accounts return a value of `linode`.
 */
  readonly billing_source?: GetAccount200BillingSource;
  /** A list of capabilities your account supports.
 */
  readonly capabilities?: string[];
  /** The city for this Account's billing address. */
  city?: string;
  /** The company name associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  company?: string;
  /** The two-letter ISO 3166 country code of this Account's billing address.
 */
  country?: string;
  /** Credit Card information associated with this Account. */
  readonly credit_card?: GetAccount200CreditCard;
  /** The email address of the person associated with this Account. */
  email?: string;
  /** An external unique identifier for this account.
 */
  readonly euuid?: string;
  /** The first name of the person associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  first_name?: string;
  /** The last name of the person associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  last_name?: string;
  /** The phone number associated with this Account. */
  phone?: string;
  /** If billing address is in the United States (US) or Canada (CA), only the two-letter ISO 3166 State or Province code are accepted. If entering a US military address, state abbreviations (AA, AE, AP) should be entered. If the address is outside the US or CA, this is the Province associated with the Account's billing address.
 */
  state?: string;
  /** The tax identification number associated with this Account, for tax calculations in some countries. If you do not live in a country that collects tax, this should be an empty string (`""`).
 */
  tax_id?: string;
  /** The zip code of this Account's billing address. The following restrictions apply:

- May only consist of letters, numbers, spaces, and hyphens.
- Must not contain more than 9 letter or number characters.
 */
  zip?: string;
};

/**
 * The service to which this promotion applies.

 */
export type GetAccount200ActivePromotionsItemServiceType = typeof GetAccount200ActivePromotionsItemServiceType[keyof typeof GetAccount200ActivePromotionsItemServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAccount200ActivePromotionsItemServiceType = {
  all: 'all',
  backup: 'backup',
  blockstorage: 'blockstorage',
  db_mysql: 'db_mysql',
  ip_v4: 'ip_v4',
  linode: 'linode',
  linode_disk: 'linode_disk',
  linode_memory: 'linode_memory',
  longview: 'longview',
  managed: 'managed',
  nodebalancer: 'nodebalancer',
  objectstorage: 'objectstorage',
  transfer_tx: 'transfer_tx',
} as const;

/**
 * Promotions generally
offer a set amount of credit that can be used toward your Linode
services, and the promotion expires after a specified date. As well,
a monthly cap on the promotional offer is set.

Simply put, a promotion offers a certain amount of credit every
month, until either the expiration date is passed, or until the total
promotional credit is used, whichever comes first.

 */
export type GetAccount200ActivePromotionsItem = {
  /** The amount available to spend per month.
 */
  readonly credit_monthly_cap?: string;
  /** The total amount of credit left for this promotion.
 */
  readonly credit_remaining?: string;
  /** A detailed description of this promotion.
 */
  readonly description?: string;
  /** When this promotion's credits expire.
 */
  readonly expire_dt?: string;
  /** The location of an image for this promotion.
 */
  readonly image_url?: string;
  /** The service to which this promotion applies.
 */
  readonly service_type?: GetAccount200ActivePromotionsItemServiceType;
  /** Short details of this promotion.
 */
  readonly summary?: string;
  /** The amount of credit left for this month for this promotion.
 */
  readonly this_month_credit_remaining?: string;
};

/**
 * The number of items to return per page.
 */
export type PageSizeParameter = number;

/**
 * The page of a collection to return.
 */
export type PageOffsetParameter = number;

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export type ErrorResponseResponseErrorsItem = {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
};

export type ErrorResponseResponse = {
  errors?: ErrorResponseResponseErrorsItem[];
};

/**
 * An object for describing a single warning associated with a response.

 */
export type DeprecatedResponseResponseWarningsItem = {
  /** Specific information related to the warning.
 */
  details?: string;
  /** The general warning message.
 */
  title?: string;
};

export type DeprecatedResponseResponse = {
  warnings?: DeprecatedResponseResponseWarningsItem[];
};

/**
 * An object for describing a single warning associated with a response.

 */
export type AcceptedResponseResponseWarningsItem = {
  /** Specific information related to the warning.
 */
  details?: string;
  /** The general warning message.
 */
  title?: string;
};

export type AcceptedResponseResponse = {
  warnings?: AcceptedResponseResponseWarningsItem[];
};

/**
 * An object for describing a single warning associated with a response.

 */
export interface WarningObject {
  /** Specific information related to the warning.
 */
  details?: string;
  /** The general warning message.
 */
  title?: string;
}

/**
 * The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.

 */
export type VolumeStatus = typeof VolumeStatus[keyof typeof VolumeStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VolumeStatus = {
  creating: 'creating',
  active: 'active',
  resizing: 'resizing',
} as const;

/**
 * The storage type of this Volume.
 */
export type VolumeHardwareType = typeof VolumeHardwareType[keyof typeof VolumeHardwareType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VolumeHardwareType = {
  hdd: 'hdd',
  nvme: 'nvme',
} as const;

/**
 * A Block Storage Volume associated with your Account.

 */
export interface Volume {
  /** When this Volume was created. */
  readonly created?: string;
  /** The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
 */
  readonly filesystem_path?: string;
  /** The storage type of this Volume. */
  readonly hardware_type?: VolumeHardwareType;
  /** The unique ID of this Volume. */
  readonly id?: number;
  /** The Volume's label is for display purposes only.
 */
  label?: string;
  /** If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
 */
  linode_id?: number | null;
  /** If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
 */
  readonly linode_label?: string | null;
  /** The unique ID of this Region. */
  readonly region?: string;
  /** The Volume's size, in GiB.
 */
  size?: number;
  /** The current status of the volume.  Can be one of:

  * `creating` - the Volume is being created and is not yet available
    for use.
  * `active` - the Volume is online and available for use.
  * `resizing` - the Volume is in the process of upgrading
    its current capacity.
 */
  readonly status?: VolumeStatus;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Volume was last updated. */
  readonly updated?: string;
}

/**
 * A virtual local area network (VLAN) associated with your Account.

 */
export interface Vlans {
  /** The date this VLAN was created.
 */
  readonly created?: string;
  /** The name of this VLAN. */
  readonly label?: string;
  /** An array of Linode IDs attached to this VLAN.
 */
  readonly linodes?: number[];
  /** This VLAN's data center region.

**Note:** Currently, a VLAN can only be assigned to a Linode
within the same data center region.
 */
  readonly region?: string;
}

/**
 * A credential object for authenticating a User's secure shell connection to a Linode.

 */
export interface SSHKey {
  /** The date this key was added.
 */
  readonly created?: string;
  /** The unique identifier of an SSH Key object.
 */
  readonly id?: number;
  /** A label for the SSH Key.
 */
  label?: string;
  /** The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.

Accepted formats:
* ssh-dss
* ssh-rsa
* ecdsa-sha2-nistp
* ssh-ed25519
* sk-ecdsa-sha2-nistp256 (Akamai-specific)
 */
  ssh_key?: string;
}

/**
 * The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress.
Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or
canceled.

 */
export type ServiceTransferStatus = typeof ServiceTransferStatus[keyof typeof ServiceTransferStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTransferStatus = {
  accepted: 'accepted',
  canceled: 'canceled',
  completed: 'completed',
  failed: 'failed',
  pending: 'pending',
  stale: 'stale',
} as const;

/**
 * A collection of the services to include in this transfer request, separated by type.

 */
export type ServiceTransferEntities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

/**
 * An object representing a Service Transfer.

 */
export interface ServiceTransfer {
  /** When this transfer was created.
 */
  created?: string;
  /** A collection of the services to include in this transfer request, separated by type.
 */
  entities?: ServiceTransferEntities;
  /** When this transfer expires. Transfers will automatically expire 24 hours after creation.
 */
  expiry?: string;
  /** If the requesting account created this transfer.
 */
  is_sender?: boolean;
  /** The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress.
Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or
canceled.
 */
  status?: ServiceTransferStatus;
  /** The token used to identify and accept or cancel this transfer.
 */
  token?: string;
  /** When this transfer was last updated.
 */
  updated?: string;
}

/**
 * Single security question and response object for POST operation.
 */
export type SecurityQuestionsPostSecurityQuestionsItem = {
  /** The ID representing the security question. */
  question_id?: number;
  /** The security question response.
 */
  response?: string;
  /** The security question. */
  readonly security_question?: string;
};

/**
 * Security questions and responses object for POST operation.
 */
export interface SecurityQuestionsPost {
  security_questions?: SecurityQuestionsPostSecurityQuestionsItem[];
}

/**
 * Single security question and response object for GET operation.
 */
export type SecurityQuestionsGetSecurityQuestionsItem = {
  /** The ID representing the security question. */
  id?: number;
  /** The security question. */
  readonly question?: string;
  /** The security question response.
 */
  response?: string;
};

/**
 * Security questions and responses object for GET operation.
 */
export interface SecurityQuestionsGet {
  security_questions?: SecurityQuestionsGetSecurityQuestionsItem[];
}

/**
 * Single security question and response object.
 */
export interface SecurityQuestion {
  /** The ID representing the security question. */
  id?: number;
  /** The security question. */
  readonly question?: string;
  /** The security question response.
 */
  response?: string;
}

/**
 * A trusted device object represents an active Remember Me session with <a target="_top" href="https://login.linode.com">login.linode.com</a>.

 */
export interface TrustedDevice {
  /** When this Remember Me session was started.  This corresponds to the time of login with the "Remember Me" box checked.
 */
  readonly created?: string;
  /** When this TrustedDevice session expires.  Sessions typically last 30 days.
 */
  readonly expiry?: string;
  /** The unique ID for this TrustedDevice */
  readonly id?: number;
  /** The last time this TrustedDevice was successfully used to authenticate to <a target="_top" href="https://login.linode.com">login.linode.com</a>.
 */
  readonly last_authenticated?: string;
  /** The last IP Address to successfully authenticate with this TrustedDevice.
 */
  readonly last_remote_addr?: string;
  /** The User Agent of the browser that created this TrustedDevice session.
 */
  readonly user_agent?: string;
}

/**
 * A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.

 */
export interface UserDefinedField {
  /** The default value.  If not specified, this value will be used.
 */
  readonly default?: string;
  /** An example value for the field.
 */
  readonly example: string;
  /** A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
 */
  readonly label: string;
  /** A list of acceptable values for the field in any quantity, combination or order.
 */
  readonly manyOf?: string;
  /** The name of the field.
 */
  readonly name: string;
  /** A list of acceptable single values for the field.
 */
  readonly oneOf?: string;
}

/**
 * A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.

 */
export interface User {
  /** The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.
 */
  email?: string;
  /** Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.
 */
  readonly last_login?: UserLastLogin;
  /** The date and time when this User's current password was created.

User passwords are first created during the Account sign-up process, and updated using the [Reset Password](https://login.linode.com/forgot/password) webpage.

`null` if this User has not created a password yet.
 */
  readonly password_created?: string | null;
  /** If true, the User must be granted access to perform actions or access entities on this Account. See User Grants View ([GET /account/users/{username}/grants](/docs/api/account/#users-grants-view)) for details on how to configure grants for a restricted User.
 */
  restricted?: boolean;
  /** A list of SSH Key labels added by this User.

Users can add keys with the SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) command.

These keys are deployed when this User is included in the `authorized_users`
field of the following requests:
- Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))
- Linode Rebuild ([POST /linode/instances/{linodeId}/rebuild](/docs/api/linode-instances/#linode-rebuild))
- Disk Create ([POST /linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disk-create))
 */
  readonly ssh_keys?: string[];
  /** A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. See the Create Two Factor Secret ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) endpoint to enable TFA.
 */
  readonly tfa_enabled?: boolean;
  /** The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
 */
  username?: string;
  /** The phone number verified for this User Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this User Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
}

/**
 * The result of the most recent login attempt for this User.

 */
export type UserLastLoginStatus = typeof UserLastLoginStatus[keyof typeof UserLastLoginStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserLastLoginStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * Information for the most recent login attempt for this User.

`null` if no login attempts have been made since creation of this User.

Access the [User Logins List All](/docs/api/account/#user-logins-list-all) command for additional login information.

 */
export type UserLastLogin = {
  /** The date and time of this User's most recent login attempt.
 */
  readonly login_datetime?: string;
  /** The result of the most recent login attempt for this User.
 */
  readonly status?: UserLastLoginStatus;
} | null;

/**
 * A tag that has been applied to an object on your Account. Tags are currently for organizational purposes only.

 */
export interface Tag {
  /** A Label used for organization of objects on your Account.
 */
  label?: string;
}

export type TransferRegionTransfersItem = {
  /** The amount of your transfer pool that is billable this billing cycle for this Region.
 */
  readonly billable?: number;
  /** The Region ID for this network utilization data. */
  id?: string;
  /** The amount of network usage allowed this billing cycle for this Region.
 */
  readonly quota?: number;
  /** The amount of network usage you have used this billing cycle for this Region.
 */
  readonly used?: number;
};

/**
 * An object representing your network utilization for the current month, in Gigabytes.

Certain Regions have separate utilization quotas and rates. For Region-specific network utilization data, see `region_transfers`.

 */
export interface Transfer {
  /** The amount of your transfer pool that is billable this billing cycle.
 */
  readonly billable?: number;
  /** The amount of network usage allowed this billing cycle.
 */
  readonly quota?: number;
  region_transfers?: TransferRegionTransfersItem[];
  /** The amount of network usage you have used this billing cycle.
 */
  readonly used?: number;
}

/**
 * An object representing a created Support Ticket - a question or issue and request for help from the Linode support team.
Only one of the ID attributes (`linode_id`, `domain_id`, etc.) can be set on a single Support Ticket.

 */
export interface SupportTicketRequest {
  /** The ID of the Managed Database this ticket is regarding, if relevant.
 */
  database_id?: number;
  /** The full details of the issue or question.
 */
  description: string;
  /** The ID of the Domain this ticket is regarding, if relevant.
 */
  domain_id?: number;
  /** The ID of the Firewall this ticket is regarding, if relevant.
 */
  firewall_id?: number;
  /** The ID of the Linode this ticket is regarding, if relevant.
 */
  linode_id?: number;
  /** The ID of the Kubernetes cluster this ticket is regarding, if relevant.
 */
  lkecluster_id?: number;
  /** The ID of the Longview client this ticket is regarding, if relevant.
 */
  longviewclient_id?: number;
  /** Designates if this ticket is related to a [Managed service](https://www.linode.com/products/managed/). If `true`, the following constraints will apply:
* No ID attributes (i.e. `linode_id`, `domain_id`, etc.) should be provided with this request.
* Your account must have a [Managed service enabled](/docs/api/managed/#managed-service-enable).
 */
  managed_issue?: boolean;
  /** The ID of the NodeBalancer this ticket is regarding, if relevant.
 */
  nodebalancer_id?: number;
  /** The [Region](/docs/api/regions/) ID for the associated VLAN this ticket is regarding.

Only allowed when submitting a VLAN ticket.
 */
  region?: string;
  /** The summary or title for this SupportTicket.
 */
  summary: string;
  /** The label of the VLAN this ticket is regarding, if relevant. To view your VLANs, use the VLANs List ([GET /networking/vlans](/docs/api/networking/#vlans-list)) endpoint.

Requires a specified `region` to identify the VLAN.
 */
  vlan?: string;
  /** The ID of the Volume this ticket is regarding, if relevant.
 */
  volume_id?: number;
}

/**
 * An object representing a reply to a Support Ticket.

 */
export interface SupportTicketReply {
  /** The date and time this Ticket reply was created.
 */
  readonly created?: string;
  /** The User who submitted this reply.
 */
  readonly created_by?: string;
  /** The body of this Support Ticket reply.
 */
  readonly description?: string;
  /** If set to true, this reply came from a Linode employee.
 */
  readonly from_linode?: boolean;
  /** The Gravatar ID of the User who created this reply.
 */
  readonly gravatar_id?: string;
  /** The unique ID of this Support Ticket reply.
 */
  readonly id?: number;
}

/**
 * The current status of this Ticket.
 */
export type SupportTicketStatus = typeof SupportTicketStatus[keyof typeof SupportTicketStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SupportTicketStatus = {
  closed: 'closed',
  new: 'new',
  open: 'open',
} as const;

/**
 * The entity this Ticket was opened for.

 */
export type SupportTicketEntity = {
  /** The unique ID for this Ticket's entity.
 */
  readonly id?: number;
  /** The current label of this entity.
 */
  readonly label?: string;
  /** The type of entity this is related to.
 */
  readonly type?: string;
  /** The URL where you can access the object this event is for. If a relative URL, it is relative to the domain you retrieved the entity from.
 */
  readonly url?: string;
} | null;

/**
 * A Support Ticket opened on your Account.

 */
export interface SupportTicket {
  /** A list of filenames representing attached files associated with this Ticket.
 */
  readonly attachments?: string[];
  /** Whether the Support Ticket may be closed.
 */
  closable?: boolean;
  /** The date and time this Ticket was closed.
 */
  readonly closed?: string | null;
  /** The full details of the issue or question.
 */
  readonly description?: string;
  /** The entity this Ticket was opened for.
 */
  readonly entity?: SupportTicketEntity;
  /** The Gravatar ID of the User who opened this Ticket.
 */
  readonly gravatar_id?: string;
  /** The ID of the Support Ticket.
 */
  readonly id?: number;
  /** The date and time this Ticket was created.
 */
  readonly opened?: string;
  /** The User who opened this Ticket.
 */
  readonly opened_by?: string;
  /** The current status of this Ticket. */
  readonly status?: SupportTicketStatus;
  /** The summary or title for this Ticket.
 */
  readonly summary?: string;
  /** The date and time this Ticket was last updated.
 */
  readonly updated?: string;
  /** The User who last updated this Ticket.
 */
  readonly updated_by?: string | null;
}

/**
 * A stat data point.

 */
export interface StatsData {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
}

/**
 * An array of error messages if managed stats are unavaliable.

 */
export type StatsDataUnavailable = string[];

/**
 * A stat data point.

 */
export type StatsDataAvailableSwapItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A stat data point.

 */
export type StatsDataAvailableNetOutItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A stat data point.

 */
export type StatsDataAvailableNetInItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A stat data point.

 */
export type StatsDataAvailableDiskItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A stat data point.

 */
export type StatsDataAvailableCpuItem = {
  /** A stats graph data point.
 */
  readonly x?: number;
  /** A stats graph data point.
 */
  readonly y?: number;
};

/**
 * A collection of graph data returned for managed stats.

 */
export interface StatsDataAvailable {
  /** CPU usage stats from the last 24 hours. */
  cpu?: StatsDataAvailableCpuItem[];
  /** Disk usage stats from the last 24 hours. */
  disk?: StatsDataAvailableDiskItem[];
  /** Inbound network traffic stats from the last 24 hours. */
  net_in?: StatsDataAvailableNetInItem[];
  /** Outbound network traffic stats from the last 24 hours. */
  net_out?: StatsDataAvailableNetOutItem[];
  /** Swap usage stats from the last 24 hours. */
  swap?: StatsDataAvailableSwapItem[];
}

/**
 * A custom field defined by the User with a special syntax within a StackScript. Derived from the contents of the script.

 */
export type StackScriptUserDefinedFieldsItem = {
  /** The default value.  If not specified, this value will be used.
 */
  readonly default?: string;
  /** An example value for the field.
 */
  readonly example: string;
  /** A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
 */
  readonly label: string;
  /** A list of acceptable values for the field in any quantity, combination or order.
 */
  readonly manyOf?: string;
  /** The name of the field.
 */
  readonly name: string;
  /** A list of acceptable single values for the field.
 */
  readonly oneOf?: string;
};

/**
 * A StackScript enables you to quickly deploy a fully-configured application in an automated manner.

 */
export interface StackScript {
  /** The date this StackScript was created.
 */
  readonly created?: string;
  /** Count of currently active, deployed Linodes created from this StackScript.
 */
  readonly deployments_active?: number;
  /** The total number of times this StackScript has been deployed.
 */
  readonly deployments_total?: number;
  /** A description for the StackScript.
 */
  description?: string;
  /** The unique ID of this StackScript. */
  readonly id?: number;
  /** An array of Image IDs. These are the Images that can be deployed with this StackScript.

`any/all` indicates that all available Images, including private Images, are accepted.
 */
  images?: string[];
  /** This determines whether other users can use your StackScript. **Once a StackScript is made public, it cannot be made private.**
 */
  is_public?: boolean;
  /** The StackScript's label is for display purposes only.
 */
  label?: string;
  /** Returns `true` if this StackScript is owned by the account of the user making the request, and the user
making the request is unrestricted or has access to this StackScript.
 */
  readonly mine?: boolean;
  /** This field allows you to add notes for the set of revisions made to this StackScript.
 */
  rev_note?: string;
  /** The script to execute when provisioning a new Linode with this StackScript.
 */
  script?: string;
  /** The date this StackScript was last updated.
 */
  readonly updated?: string;
  /** This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment. See [Declare User-Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more information.
 */
  readonly user_defined_fields?: StackScriptUserDefinedFieldsItem[];
  /** The Gravatar ID for the User who created the StackScript.
 */
  readonly user_gravatar_id?: string;
  /** The User who created the StackScript.
 */
  readonly username?: string;
}

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueDevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueDevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueDevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueDevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueDevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueDevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type RescueDevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

export interface RescueDevices {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: RescueDevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: RescueDevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: RescueDevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: RescueDevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: RescueDevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: RescueDevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: RescueDevicesSdg;
}

/**
 * Compute instance availability information by [Type](/docs/api/linode-types/) and [Region](/docs/api/regions/).
 */
export interface RegionAvailability {
  /** Whether the compute instance type is available in the region. */
  available?: boolean;
  /** The compute instance [Type](/docs/api/linode-types/) ID. */
  plan?: string;
  /** The [Region](/docs/api/regions/) ID. */
  region?: string;
}

/**
 * This region's current operational status.

 */
export type RegionStatus = typeof RegionStatus[keyof typeof RegionStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegionStatus = {
  ok: 'ok',
  outage: 'outage',
} as const;

export type RegionResolvers = {
  /** The IPv4 addresses for this region's DNS resolvers, separated by commas.
 */
  readonly ipv4?: string;
  /** The IPv6 addresses for this region's DNS resolvers, separated by commas.
 */
  readonly ipv6?: string;
};

/**
 * An area where Linode services are available.
 */
export interface Region {
  /** A list of capabilities of this region.
 */
  readonly capabilities?: string[];
  /** The country where this Region resides. */
  readonly country?: string;
  /** The unique ID of this Region. */
  readonly id?: string;
  /** Detailed location information for this Region, including city, state or region, and country. */
  readonly label?: string;
  readonly resolvers?: RegionResolvers;
  /** This region's current operational status.
 */
  readonly status?: RegionStatus;
}

/**
 * The service to which this promotion applies.

 */
export type PromotionServiceType = typeof PromotionServiceType[keyof typeof PromotionServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PromotionServiceType = {
  all: 'all',
  backup: 'backup',
  blockstorage: 'blockstorage',
  db_mysql: 'db_mysql',
  ip_v4: 'ip_v4',
  linode: 'linode',
  linode_disk: 'linode_disk',
  linode_memory: 'linode_memory',
  longview: 'longview',
  managed: 'managed',
  nodebalancer: 'nodebalancer',
  objectstorage: 'objectstorage',
  transfer_tx: 'transfer_tx',
} as const;

/**
 * Promotions generally
offer a set amount of credit that can be used toward your Linode
services, and the promotion expires after a specified date. As well,
a monthly cap on the promotional offer is set.

Simply put, a promotion offers a certain amount of credit every
month, until either the expiration date is passed, or until the total
promotional credit is used, whichever comes first.

 */
export interface Promotion {
  /** The amount available to spend per month.
 */
  readonly credit_monthly_cap?: string;
  /** The total amount of credit left for this promotion.
 */
  readonly credit_remaining?: string;
  /** A detailed description of this promotion.
 */
  readonly description?: string;
  /** When this promotion's credits expire.
 */
  readonly expire_dt?: string;
  /** The location of an image for this promotion.
 */
  readonly image_url?: string;
  /** The service to which this promotion applies.
 */
  readonly service_type?: PromotionServiceType;
  /** Short details of this promotion.
 */
  readonly summary?: string;
  /** The amount of credit left for this month for this promotion.
 */
  readonly this_month_credit_remaining?: string;
}

/**
 * Information about your status in our referral program.

This information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.

 */
export type ProfileReferrals = {
  /** Your referral code.  If others use this when signing up for Linode, you will receive account credit.
 */
  readonly code?: string;
  /** The number of completed signups with your referral code.
 */
  readonly completed?: number;
  /** The amount of account credit in US Dollars issued to you through the referral program.
 */
  readonly credit?: number;
  /** The number of pending signups with your referral code.  You will not receive credit for these signups until they are completed.
 */
  readonly pending?: number;
  /** The number of users who have signed up with your referral code.
 */
  readonly total?: number;
  /** Your referral url, used to direct others to sign up for Linode with your referral code.
 */
  readonly url?: string;
};

/**
 * The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).
* `keys_only` is the most secure if you intend to use Lish.
* `disabled` is recommended if you do not intend to use Lish at all.
* If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.

 */
export type ProfileLishAuthMethod = typeof ProfileLishAuthMethod[keyof typeof ProfileLishAuthMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProfileLishAuthMethod = {
  password_keys: 'password_keys',
  keys_only: 'keys_only',
  disabled: 'disabled',
} as const;

/**
 * This account's Cloud Manager authentication type. Authentication types are chosen through
Cloud Manager and authorized when logging into your account. These authentication types are either
the user's password (in conjunction with their username), or the name of their
indentity provider such as GitHub. For example, if a user:

- Has never used Third-Party Authentication, their authentication type will be `password`.
- Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).
- Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.


**Note:** This functionality may not yet be available in Cloud Manager.
See the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.

 */
export type ProfileAuthenticationType = typeof ProfileAuthenticationType[keyof typeof ProfileAuthenticationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProfileAuthenticationType = {
  password: 'password',
  github: 'github',
} as const;

/**
 * A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.

 */
export interface Profile {
  /** This account's Cloud Manager authentication type. Authentication types are chosen through
Cloud Manager and authorized when logging into your account. These authentication types are either
the user's password (in conjunction with their username), or the name of their
indentity provider such as GitHub. For example, if a user:

- Has never used Third-Party Authentication, their authentication type will be `password`.
- Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).
- Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.


**Note:** This functionality may not yet be available in Cloud Manager.
See the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.
 */
  readonly authentication_type?: ProfileAuthenticationType;
  /** The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is "disabled."
 */
  authorized_keys?: string[] | null;
  /** Your email address.  This address will be used for communication with Linode as necessary.
 */
  email?: string;
  /** If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.
 */
  email_notifications?: boolean;
  /**
   * If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.

If you disable this setting, you will not be able to re-enable it.

   * @deprecated
   */
  ip_whitelist_enabled?: boolean;
  /** The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).
* `keys_only` is the most secure if you intend to use Lish.
* `disabled` is recommended if you do not intend to use Lish at all.
* If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.
 */
  lish_auth_method?: ProfileLishAuthMethod;
  /** Information about your status in our referral program.

This information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.
 */
  readonly referrals?: ProfileReferrals;
  /** If true, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, see [/profile/grants](/docs/api/profile/#grants-list).
 */
  restricted?: boolean;
  /** The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.
 */
  timezone?: string;
  /** If true, logins from untrusted computers will require Two Factor Authentication.  See [/profile/tfa-enable](/docs/api/profile/#two-factor-secret-create) to enable Two Factor Authentication.
 */
  two_factor_auth?: boolean;
  /** Your unique ID in our system. This value will never change, and can safely be used to identify your User.
 */
  readonly uid?: number;
  /** Your username, used for logging in to our system.
 */
  readonly username?: string;
  /** The phone number verified for this Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

`null` if this Profile has no verified phone number.
 */
  readonly verified_phone_number?: string | null;
}

/**
 * A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.

 */
export interface PersonalAccessToken {
  /** The date and time this token was created.
 */
  readonly created?: string;
  /** When this token will expire.  Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated.  Tokens may be created with "null" as their expiry and will never expire unless revoked.
 */
  readonly expiry?: string;
  /** This token's unique ID, which can be used to revoke it.
 */
  readonly id?: number;
  /** This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.
 */
  label?: string;
  /** The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the <a target="_top" href="https://github.com/linode/linode-cli">Linode CLI</a>, require tokens with access to `*`. Tokens with more restrictive scopes are generally more secure.
 */
  readonly scopes?: string;
  /** The token used to access the API.  When the token is created, the full token is returned here.  Otherwise, only the first 16 characters are returned.
 */
  readonly token?: string;
}

/**
 * An object representing an execution of Payment to PayPal to capture the funds and credit your Linode Account.

 */
export interface PayPalExecute {
  /** The PayerID returned by PayPal during the transaction authorization process.
 */
  payer_id: string;
  /** The PaymentID returned from [POST /account/payments/paypal](/docs/api/account/#paypal-payment-stage) that has been approved with PayPal.
 */
  payment_id: string;
}

/**
 * An object representing the staging of a Payment via PayPal.

 */
export interface PayPal {
  /** The URL to have PayPal redirect to when Payment is canceled. */
  cancel_url: string;
  /** The URL to have PayPal redirect to when Payment is approved. */
  redirect_url: string;
  /** The payment amount in USD. Minimum accepted value of $5 USD. Maximum accepted value of $500 USD or credit card payment limit; whichever value is highest. PayPal's maximum transaction limit is $10,000 USD. */
  usd: string;
}

/**
 * Payment object request.
 */
export interface PaymentRequest {
  /** CVV (Card Verification Value) of the credit card to be used for the Payment. Required if paying by credit card.
 */
  cvv?: string;
  /** The ID of the Payment Method to apply to the Payment.
 */
  payment_method_id?: number;
  /** The amount in US Dollars of the Payment.

* Can begin with or without `$`.
* Commas (`,`) are not accepted.
* Must end with a decimal expression, such as `.00` or `.99`.
* Minimum: `$5.00` or the Account balance, whichever is lower.
* Maximum: `$2000.00` or the Account balance up to `$50000.00`, whichever is greater.
 */
  usd: string;
}

/**
 * PayPal information.
 */
export interface PayPalData {
  /** The email address associated with your PayPal account. */
  readonly email?: string;
  /** PayPal Merchant ID associated with your PayPal account. */
  readonly paypal_id?: string;
}

/**
 * Google Pay information.
 */
export interface GooglePayData {
  /** The type of credit card. */
  readonly card_type?: string;
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card number. */
  readonly last_four?: string;
}

/**
 * Credit card information.
 */
export interface CreditCardData {
  /** The type of credit card. */
  readonly card_type?: string;
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card number. */
  readonly last_four?: string;
}

/**
 * The type of Payment Method.
 */
export type PaymentMethodType = typeof PaymentMethodType[keyof typeof PaymentMethodType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentMethodType = {
  credit_card: 'credit_card',
  google_pay: 'google_pay',
  paypal: 'paypal',
} as const;

/**
 * PayPal information.
 */
export type PaymentMethodDataOneOfThree = {
  /** The email address associated with your PayPal account. */
  readonly email?: string;
  /** PayPal Merchant ID associated with your PayPal account. */
  readonly paypal_id?: string;
};

/**
 * Google Pay information.
 */
export type PaymentMethodDataOneOfTwo = {
  /** The type of credit card. */
  readonly card_type?: string;
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card number. */
  readonly last_four?: string;
};

/**
 * Credit card information.
 */
export type PaymentMethodDataOneOf = {
  /** The type of credit card. */
  readonly card_type?: string;
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card number. */
  readonly last_four?: string;
};

export type PaymentMethodData = PaymentMethodDataOneOf | PaymentMethodDataOneOfTwo | PaymentMethodDataOneOfThree;

/**
 * Payment Method Response Object.
 */
export interface PaymentMethod {
  /** When the Payment Method was added to the Account. */
  readonly created?: string;
  data?: PaymentMethodData;
  /** The unique ID of this Payment Method. */
  id?: number;
  /** Whether this Payment Method is the default method for automatically processing service charges.
 */
  is_default?: boolean;
  /** The type of Payment Method. */
  type?: PaymentMethodType;
}

/**
 * Payment object response.
 */
export interface Payment {
  /** When the Payment was made. */
  readonly date?: string;
  /** The unique ID of the Payment. */
  readonly id?: number;
  /** The amount, in US dollars, of the Payment. */
  readonly usd?: number;
}

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export interface PaginationEnvelope {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
}

/**
 * If this Object Storage bucket has a corresponding TLS/SSL Certificate.

 */
export interface ObjectStorageSSLResponse {
  /** A boolean indicating if this Bucket has a corresponding TLS/SSL certificate that was uploaded by an Account user.
 */
  readonly ssl?: boolean;
}

/**
 * Upload a TLS/SSL certificate and private key to be served when you visit your Object Storage bucket via HTTPS.

 */
export interface ObjectStorageSSL {
  /** Your Base64 encoded and PEM formatted SSL certificate.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI)
 */
  certificate: string;
  /** The private key associated with this TLS/SSL certificate.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI)
 */
  private_key: string;
}

/**
 * A keypair used to communicate with the Object Storage S3 API.
 */
export interface ObjectStorageKey {
  /** This keypair's access key. This is not secret. */
  readonly access_key?: string;
  /** Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key's access to only the bucket(s) declared in this array and define their bucket-level permissions.


  Limited Access Keys can:

  * [list all buckets](/docs/api/object-storage/#object-storage-buckets-list) available on this Account, but cannot perform any actions on a bucket unless it has access to the bucket.


  * [create new buckets](/docs/api/object-storage/#object-storage-bucket-create), but do not have any access to the buckets it creates, unless explicitly given access to them.


  **Note:** You can create an Object Storage Limited Access Key without access to any buckets.
  This is achieved by sending a request with an empty `bucket_access` array.


  **Note:** If this field is omitted, a regular unlimited access key is issued.
 */
  bucket_access?: ObjectStorageKeyBucketAccessItem[];
  /** This keypair's unique ID */
  readonly id?: number;
  /** The label given to this key. For display purposes only. */
  label?: string;
  /** Whether or not this key is a limited access key. Will return `false` if this key grants full access to all buckets on the user's account. */
  readonly limited?: boolean;
  /** This keypair's secret key. Only returned on key creation. */
  readonly secret_key?: string;
}

/**
 * This Limited Access Key's permissions for the selected bucket.
 */
export type ObjectStorageKeyBucketAccessItemPermissions = typeof ObjectStorageKeyBucketAccessItemPermissions[keyof typeof ObjectStorageKeyBucketAccessItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ObjectStorageKeyBucketAccessItemPermissions = {
  read_write: 'read_write',
  read_only: 'read_only',
} as const;

export type ObjectStorageKeyBucketAccessItem = {
  /** The unique label of the bucket to which the key will grant limited access. */
  bucket_name?: string;
  /** The Object Storage cluster where a bucket to which the key is granting access is hosted. */
  cluster?: string;
  /** This Limited Access Key's permissions for the selected bucket. */
  permissions?: ObjectStorageKeyBucketAccessItemPermissions;
};

/**
 * This cluster's status.
 */
export type ObjectStorageClusterStatus = typeof ObjectStorageClusterStatus[keyof typeof ObjectStorageClusterStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ObjectStorageClusterStatus = {
  available: 'available',
  unavailable: 'unavailable',
} as const;

/**
 * An Object Storage Cluster
 */
export interface ObjectStorageCluster {
  /** The base URL for this cluster, used for connecting with third-party clients. */
  domain?: string;
  /** The unique ID for this cluster. */
  id?: string;
  /** The region where this cluster is located. */
  region?: string;
  /** The base URL for this cluster used when hosting static sites. */
  static_site_domain?: string;
  /** This cluster's status. */
  status?: ObjectStorageClusterStatus;
}

/**
 * An Object in Object Storage, or a "prefix" that contains one or more objects when a `delimiter` is used.

 */
export interface ObjectStorageObject {
  /** An MD-5 hash of the object. `null` if this object represents a prefix.
 */
  etag?: string;
  /** Designates if there is another page of bucket objects. */
  is_truncated?: boolean;
  /** The date and time this object was last modified. `null` if this object represents a prefix.
 */
  last_modified?: string;
  /** The name of this object or prefix.
 */
  name?: string;
  /** Returns the value you should pass to the `marker` query parameter to get the next page of objects. If there is no next page, `null` will be returned.
 */
  next_marker?: string | null;
  /** The owner of this object, as a UUID. `null` if this object represents a prefix.
 */
  owner?: string;
  /** The size of this object, in bytes. `null` if this object represents a prefix.
 */
  size?: number;
}

/**
 * An Object Storage Bucket. This should be accessed primarily through the S3 API; [click here for more information](https://docs.ceph.com/en/latest/radosgw/s3/#api).

 */
export interface ObjectStorageBucket {
  /** The ID of the Object Storage Cluster this bucket is in. */
  cluster?: string;
  /** When this bucket was created. */
  created?: string;
  /** The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made public.
 */
  hostname?: string;
  /** The name of this bucket. */
  label?: string;
  /** The number of objects stored in this bucket.
 */
  objects?: number;
  /** The size of the bucket in bytes. */
  size?: number;
}

/**
 * The status of this application.  `active` by default.

 */
export type OAuthClientStatus = typeof OAuthClientStatus[keyof typeof OAuthClientStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OAuthClientStatus = {
  active: 'active',
  disabled: 'disabled',
  suspended: 'suspended',
} as const;

/**
 * A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target="_top" href="https://login.linode.com">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.

 */
export interface OAuthClient {
  /** The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).
 */
  readonly id?: string;
  /** The name of this application.  This will be presented to users when they are asked to grant it access to their Account.
 */
  label?: string;
  /** If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the <a target="_top" href="https://oauth.net/2/">OAuth spec</a> for more details.
 */
  public?: boolean;
  /** The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.
 */
  redirect_uri?: string;
  /** The OAuth Client secret, used in the OAuth exchange.  This is returned as `<REDACTED>` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.
 */
  readonly secret?: string;
  /** The status of this application.  `active` by default.
 */
  readonly status?: OAuthClientStatus;
  /** The URL where this client's thumbnail may be viewed, or `null` if this client does not have a thumbnail set.
 */
  readonly thumbnail_url?: string | null;
}

/**
 * The type of Notification this is.
 */
export type NotificationType = typeof NotificationType[keyof typeof NotificationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationType = {
  migration_scheduled: 'migration_scheduled',
  migration_imminent: 'migration_imminent',
  migration_pending: 'migration_pending',
  reboot_scheduled: 'reboot_scheduled',
  outage: 'outage',
  payment_due: 'payment_due',
  ticket_important: 'ticket_important',
  ticket_abuse: 'ticket_abuse',
  notice: 'notice',
  maintenance: 'maintenance',
  promotion: 'promotion',
} as const;

/**
 * The severity of this Notification.  This field can be used to decide how prominently to display the Notification, what color to make the display text, etc.

 */
export type NotificationSeverity = typeof NotificationSeverity[keyof typeof NotificationSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationSeverity = {
  minor: 'minor',
  major: 'major',
  critical: 'critical',
} as const;

/**
 * The type of entity this is related to.
 */
export type NotificationEntityType = typeof NotificationEntityType[keyof typeof NotificationEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationEntityType = {
  account: 'account',
  entity_transfer: 'entity_transfer',
  linode: 'linode',
  nodebalancer: 'nodebalancer',
  promotion: 'promotion',
  region: 'region',
  ticket: 'ticket',
  volume: 'volume',
} as const;

/**
 * Detailed information about the Notification.
 */
export type NotificationEntity = {
  /** The unique ID of the Notification's entity, based on the entity
type.

Returns `null` for the following entity types:
* `account`
* `promotion`
 */
  readonly id?: number | null;
  /** The current label for this Notification's entity.

Returns `null` for the following entity types:
* `entity_transfer`
* `promotion`
* `region`
 */
  readonly label?: string | null;
  /** The type of entity this is related to. */
  readonly type?: NotificationEntityType;
  /** The URL where you can access the object this Notification is for.
If a relative URL, it is relative to the domain you retrieved the
Notification from.

Returns `null` for the `promotion` entity type.
 */
  readonly url?: string | null;
};

/**
 * An important, often time-sensitive item related to your Account.

 */
export interface Notification {
  /** A full description of this Notification, in markdown format.  Not all Notifications include bodies.
 */
  readonly body?: string | null;
  /** Detailed information about the Notification. */
  readonly entity?: NotificationEntity;
  /** A short description of this Notification.
 */
  readonly label?: string;
  /** A human-readable description of the Notification. */
  readonly message?: string;
  /** The severity of this Notification.  This field can be used to decide how prominently to display the Notification, what color to make the display text, etc.
 */
  readonly severity?: NotificationSeverity;
  /** The type of Notification this is. */
  readonly type?: NotificationType;
  /** If this Notification has a duration, this will be the ending time for the Event/action. For example, if there is scheduled maintenance for one of our systems, `until` would be set to the end of the maintenance window.
 */
  readonly until?: string;
  /** If this Notification is of an Event that will happen at a fixed, future time, this is when the named action will be taken. For example, if a Linode is to be migrated in response to a Security Advisory, this field will contain the approximate time the Linode will be taken offline for migration.
 */
  readonly when?: string;
}

/**
 * Stats for this NodeBalancer.

 */
export interface NodeBalancerStats {
  /** The data returned about this NodeBalancers.
 */
  data?: NodeBalancerStatsData;
  /** The title for the statistics generated in this response.
 */
  title?: string;
}

/**
 * Traffic statistics for this NodeBalancer.

 */
export type NodeBalancerStatsDataTraffic = {
  /** An array of key/value pairs representing unix timestamp and reading for inbound traffic.
 */
  in?: number[];
  /** An array of key/value pairs representing unix timestamp and reading for outbound traffic.
 */
  out?: number[];
};

/**
 * The data returned about this NodeBalancers.

 */
export type NodeBalancerStatsData = {
  /** An array of key/value pairs representing unix timestamp and reading for connections to this NodeBalancer.
 */
  connections?: number[];
  /** Traffic statistics for this NodeBalancer.
 */
  traffic?: NodeBalancerStatsDataTraffic;
};

/**
 * The current status of this node, based on the configured checks of its NodeBalancer Config.

 */
export type NodeBalancerNodeStatus = typeof NodeBalancerNodeStatus[keyof typeof NodeBalancerNodeStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeBalancerNodeStatus = {
  unknown: 'unknown',
  UP: 'UP',
  DOWN: 'DOWN',
} as const;

/**
 * The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.

 */
export type NodeBalancerNodeMode = typeof NodeBalancerNodeMode[keyof typeof NodeBalancerNodeMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeBalancerNodeMode = {
  accept: 'accept',
  reject: 'reject',
  drain: 'drain',
  backup: 'backup',
} as const;

/**
 * A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.

 */
export interface NodeBalancerNode {
  /** The private IP Address where this backend can be reached. This _must_ be a private IP address.
 */
  address?: string;
  /** The NodeBalancer Config ID that this Node belongs to.
 */
  readonly config_id?: number;
  /** This node's unique ID. */
  readonly id?: number;
  /** The label for this node.  This is for display purposes only.
 */
  label?: string;
  /** The mode this NodeBalancer should use when sending traffic to this backend.
* If set to `accept` this backend is accepting traffic.
* If set to `reject` this backend will not receive traffic.
* If set to `drain` this backend will not receive _new_ traffic, but connections already
  pinned to it will continue to be routed to it.

* If set to `backup`, this backend will only receive traffic if all `accept` nodes
  are down.
 */
  mode?: NodeBalancerNodeMode;
  /** The NodeBalancer ID that this Node belongs to.
 */
  readonly nodebalancer_id?: number;
  /** The current status of this node, based on the configured checks of its NodeBalancer Config.
 */
  readonly status?: NodeBalancerNodeStatus;
  /** Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
 */
  weight?: number;
}

/**
 * Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.

 */
export type NodeBalancerConfigStickiness = typeof NodeBalancerConfigStickiness[keyof typeof NodeBalancerConfigStickiness];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeBalancerConfigStickiness = {
  none: 'none',
  table: 'table',
  http_cookie: 'http_cookie',
} as const;

/**
 * ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.

 */
export type NodeBalancerConfigProxyProtocol = typeof NodeBalancerConfigProxyProtocol[keyof typeof NodeBalancerConfigProxyProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeBalancerConfigProxyProtocol = {
  none: 'none',
  v1: 'v1',
  v2: 'v2',
} as const;

/**
 * The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.

 */
export type NodeBalancerConfigProtocol = typeof NodeBalancerConfigProtocol[keyof typeof NodeBalancerConfigProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeBalancerConfigProtocol = {
  http: 'http',
  https: 'https',
  tcp: 'tcp',
} as const;

/**
 * A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.

 */
export type NodeBalancerConfigNodesStatus = {
  /** The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
 */
  readonly down?: number;
  /** The number of backends considered to be "UP" and healthy, and that are serving requests.
 */
  readonly up?: number;
};

/**
 * What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.

 */
export type NodeBalancerConfigCipherSuite = typeof NodeBalancerConfigCipherSuite[keyof typeof NodeBalancerConfigCipherSuite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeBalancerConfigCipherSuite = {
  recommended: 'recommended',
  legacy: 'legacy',
} as const;

/**
 * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.

 */
export type NodeBalancerConfigCheck = typeof NodeBalancerConfigCheck[keyof typeof NodeBalancerConfigCheck];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeBalancerConfigCheck = {
  none: 'none',
  connection: 'connection',
  http: 'http',
  http_body: 'http_body',
} as const;

/**
 * What algorithm this NodeBalancer should use for routing traffic to backends.

 */
export type NodeBalancerConfigAlgorithm = typeof NodeBalancerConfigAlgorithm[keyof typeof NodeBalancerConfigAlgorithm];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeBalancerConfigAlgorithm = {
  roundrobin: 'roundrobin',
  leastconn: 'leastconn',
  source: 'source',
} as const;

/**
 * A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.

 */
export interface NodeBalancerConfig {
  /** What algorithm this NodeBalancer should use for routing traffic to backends.
 */
  algorithm?: NodeBalancerConfigAlgorithm;
  /** The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
* If `none` no check is performed.
* `connection` requires only a connection to the backend to succeed.
* `http` and `http_body` rely on the backend serving HTTP, and that
  the response returned matches what is expected.
 */
  check?: NodeBalancerConfigCheck;
  /** How many times to attempt a check before considering a backend to be down.
 */
  check_attempts?: number;
  /** This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
 */
  check_body?: string;
  /** How often, in seconds, to check that backends are up and serving requests.

Must be greater than `check_timeout`.
 */
  check_interval?: number;
  /** If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
 */
  check_passive?: boolean;
  /** The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
 */
  check_path?: string;
  /** How long, in seconds, to wait for a check attempt before considering it failed.

Must be less than `check_interval`.
 */
  check_timeout?: number;
  /** What ciphers to use for SSL connections served by this NodeBalancer.

* `legacy` is considered insecure and should only be used if necessary.
 */
  cipher_suite?: NodeBalancerConfigCipherSuite;
  /** This config's unique ID */
  readonly id?: number;
  /** The ID for the NodeBalancer this config belongs to.
 */
  readonly nodebalancer_id?: number;
  /** A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
 */
  readonly nodes_status?: NodeBalancerConfigNodesStatus;
  /** The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
 */
  port?: number;
  /** The protocol this port is configured to serve.

* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
 */
  protocol?: NodeBalancerConfigProtocol;
  /** ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
 */
  proxy_protocol?: NodeBalancerConfigProxyProtocol;
  /** The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
certificate and Certificate Authority chain) that should be served on this
NodeBalancerConfig's port.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_cert?: string | null;
  /** The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_commonname?: string;
  /** The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
 */
  readonly ssl_fingerprint?: string;
  /** The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

The contents of this field will not be shown in any responses that display
the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
appears.

The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
response are automatically derived from your certificate. Please refer to these fields to
verify that the appropriate certificate was assigned to your NodeBalancerConfig.
 */
  ssl_key?: string | null;
  /** Controls how session stickiness is handled on this port.
* If set to `none` connections will always be assigned a backend based on the algorithm configured.
* If set to `table` sessions from the same remote address will be routed to the same
  backend.

* For HTTP or HTTPS clients, `http_cookie` allows sessions to be
  routed to the same backend based on a cookie set by the NodeBalancer.
 */
  stickiness?: NodeBalancerConfigStickiness;
}

/**
 * Information about the amount of transfer this NodeBalancer has had so far this month.

 */
export type NodeBalancerTransfer = {
  /** The total outbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly in?: number | null;
  /** The total inbound transfer, in MB, used for this NodeBalancer this month.
 */
  readonly out?: number | null;
  /** The total transfer, in MB, used by this NodeBalancer this month.
 */
  readonly total?: number | null;
};

/**
 * Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.

 */
export interface NodeBalancer {
  /** Throttle connections per second.  Set to 0 (zero) to disable throttling.
 */
  client_conn_throttle?: number;
  /** When this NodeBalancer was created.
 */
  readonly created?: string;
  /** This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
 */
  readonly hostname?: string;
  /** This NodeBalancer's unique ID.
 */
  readonly id?: number;
  /** This NodeBalancer's public IPv4 address.
 */
  readonly ipv4?: string;
  /** This NodeBalancer's public IPv6 address.
 */
  readonly ipv6?: string | null;
  /** This NodeBalancer's label. These must be unique on your Account.
 */
  label?: string;
  /** The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
 */
  readonly region?: string;
  /** An array of Tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** Information about the amount of transfer this NodeBalancer has had so far this month.
 */
  readonly transfer?: NodeBalancerTransfer;
  /** When this NodeBalancer was last updated.
 */
  readonly updated?: string;
}

/**
 * The current status of this Service.

 */
export type ManagedServiceStatus = typeof ManagedServiceStatus[keyof typeof ManagedServiceStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ManagedServiceStatus = {
  disabled: 'disabled',
  pending: 'pending',
  ok: 'ok',
  problem: 'problem',
} as const;

/**
 * How this Service is monitored.

 */
export type ManagedServiceServiceType = typeof ManagedServiceServiceType[keyof typeof ManagedServiceServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ManagedServiceServiceType = {
  url: 'url',
  tcp: 'tcp',
} as const;

/**
 * A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.

 */
export interface ManagedService {
  /** The URL at which this Service is monitored.

URL parameters such as `?no-cache=1` are preserved.

URL fragments/anchors such as `#monitor` are **not** preserved.
 */
  address?: string;
  /** What to expect to find in the response body for the Service to be considered up.
 */
  body?: string | null;
  /** The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
 */
  consultation_group?: string;
  /** When this Managed Service was created. */
  readonly created?: string;
  /** An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
 */
  credentials?: number[];
  /** This Service's unique ID.
 */
  readonly id?: number;
  /** The label for this Service. This is for display purposes only.
 */
  label?: string;
  /** Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
 */
  notes?: string | null;
  /** The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
 */
  region?: string;
  /** How this Service is monitored.
 */
  service_type?: ManagedServiceServiceType;
  /** The current status of this Service.
 */
  readonly status?: ManagedServiceStatus;
  /** How long to wait, in seconds, for a response before considering the Service to be down.
 */
  timeout?: number;
  /** When this Managed Service was last updated. */
  readonly updated?: string;
}

/**
 * The SSH settings for this Linode.

 */
export type ManagedLinodeSettingsSsh = {
  /** If true, Linode special forces may access this Linode over ssh to respond to Issues.
 */
  access?: boolean;
  /** The IP Linode special forces should use to access this Linode
when responding to an Issue.

By default, any of a Linode's IP addresses can be used for incident response access.
 */
  ip?: string;
  /** The port Linode special forces should use to access this Linode
over ssh to respond to an Issue.

The default `null` value corresponds to port 22.
 */
  port?: number | null;
  /** The specific user, if any, Linode's special forces should use when accessing this
Linode to respond to an issue.

The default `null` value corresponds to the root user.
 */
  user?: string | null;
};

/**
 * Settings for a specific Linode related to Managed Services. There is one ManagedLinodeSettings object for each Linode on your Account.

 */
export interface ManagedLinodeSettings {
  /**
   * The group of the Linode these Settings are for. This is for display purposes only.

   * @deprecated
   */
  readonly group?: string;
  /** The ID of the Linode these Settings are for.
 */
  readonly id?: number;
  /** The label of the Linode these Settings are for.
 */
  readonly label?: string;
  /** The SSH settings for this Linode.
 */
  ssh?: ManagedLinodeSettingsSsh;
}

/**
 * The type of entity this is. In this case, it is always a Ticket.

 */
export type ManagedIssueEntityType = typeof ManagedIssueEntityType[keyof typeof ManagedIssueEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ManagedIssueEntityType = {
  ticket: 'ticket',
} as const;

/**
 * The ticket this Managed Issue opened.

 */
export type ManagedIssueEntity = {
  /** This ticket's ID
 */
  readonly id?: number;
  /** The summary for this Ticket.
 */
  readonly label?: string;
  /** The type of entity this is. In this case, it is always a Ticket.
 */
  readonly type?: ManagedIssueEntityType;
  /** The relative URL where you can access this Ticket.
 */
  readonly url?: string;
};

/**
 * An Issue that was detected with a service Linode is managing.

 */
export interface ManagedIssue {
  /** When this Issue was created. Issues are created in response to issues detected with Managed Services, so this is also when the Issue was detected.
 */
  readonly created?: string;
  /** The ticket this Managed Issue opened.
 */
  readonly entity?: ManagedIssueEntity;
  /** This Issue's unique ID.
 */
  readonly id?: number;
  /** An array of Managed Service IDs that were affected by this Issue.
 */
  readonly services?: number[];
}

/**
 * A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.

 */
export interface ManagedCredential {
  /** This Credential's unique ID.
 */
  readonly id?: number;
  /** The unique label for this Credential. This is for display purposes only.
 */
  label?: string;
  /** The date this Credential was last decrypted by a member of Linode special forces.
 */
  readonly last_decrypted?: string;
}

/**
 * Information about how to reach this Contact by phone.

 */
export type ManagedContactPhone = {
  /** This Contact's primary phone number.
 */
  primary?: string | null;
  /** This Contact's secondary phone number.
 */
  secondary?: string | null;
};

/**
 * Information about someone Linode's special forces may contact in case an issue is detected with a manager service.

 */
export interface ManagedContact {
  /** The address to email this Contact to alert them of issues.
 */
  email?: string;
  /** A grouping for this Contact. This is for display purposes only.
 */
  group?: string | null;
  /** This Contact's unique ID.
 */
  readonly id?: number;
  /** The name of this Contact.
 */
  name?: string;
  /** Information about how to reach this Contact by phone.
 */
  phone?: ManagedContactPhone;
  /** When this Contact was last updated.
 */
  readonly updated?: string;
}

/**
 * The type of maintenance.

 */
export type MaintenanceType = typeof MaintenanceType[keyof typeof MaintenanceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MaintenanceType = {
  reboot: 'reboot',
  cold_migration: 'cold_migration',
  live_migration: 'live_migration',
} as const;

/**
 * The maintenance status.

Maintenance progresses in the following sequence: pending, started, then completed.

 */
export type MaintenanceStatus = typeof MaintenanceStatus[keyof typeof MaintenanceStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MaintenanceStatus = {
  completed: 'completed',
  pending: 'pending',
  started: 'started',
} as const;

/**
 * The entity being affected by maintenance.

 */
export type MaintenanceEntity = {
  /** The id of the entity being affected by maintenance.
 */
  id?: number;
  /** The label of the entity being affected by maintenance.
 */
  label?: string;
  /** The type of entity.
 */
  type?: string;
  /** The API endpoint prefix to use in combination with the entity id to find specific information about the entity.
 */
  url?: string;
};

/**
 * Information about maintenance affecting an entity.

 */
export interface Maintenance {
  /** The entity being affected by maintenance.
 */
  entity?: MaintenanceEntity;
  /** The reason maintenance is being performed.
 */
  reason?: string;
  /** The maintenance status.

Maintenance progresses in the following sequence: pending, started, then completed.
 */
  status?: MaintenanceStatus;
  /** The type of maintenance.
 */
  type?: MaintenanceType;
  /** When the maintenance will begin.

[Filterable](/docs/api/#filtering-and-sorting) with the following parameters:

* A single value in date-time string format ("%Y-%m-%dT%H:%M:%S"), which returns only matches to that value.

* A dictionary containing pairs of inequality operator string keys ("+or", "+gt", "+gte", "+lt", "+lte",
or "+neq") and single date-time string format values ("%Y-%m-%dT%H:%M:%S"). "+or" accepts an array of values that
may consist of single date-time strings or dictionaries of inequality operator pairs.
 */
  when?: string;
}

/**
 * The subscription ID for a particular Longview plan. A value of `null` corresponds to Longview Free.

You can send a request to the [List Longview Subscriptions](/docs/api/longview/#longview-subscriptions-list) endpoint to receive the details of each plan.

 */
export type LongviewPlanLongviewSubscription = typeof LongviewPlanLongviewSubscription[keyof typeof LongviewPlanLongviewSubscription];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LongviewPlanLongviewSubscription = {
  'longview-3': 'longview-3',
  'longview-10': 'longview-10',
  'longview-40': 'longview-40',
  'longview-100': 'longview-100',
  null: null,
} as const;

/**
 * Longview Plan object.

 */
export interface LongviewPlan {
  /** The subscription ID for a particular Longview plan. A value of `null` corresponds to Longview Free.

You can send a request to the [List Longview Subscriptions](/docs/api/longview/#longview-subscriptions-list) endpoint to receive the details of each plan.
 */
  longview_subscription?: LongviewPlanLongviewSubscription;
}

/**
 * Pricing information about this Subscription tier.

 */
export type LongviewSubscriptionPrice = {
  /** The hourly price, in US dollars, for this Subscription tier.
 */
  readonly hourly?: number;
  /** The maximum monthly price in US Dollars for this Subscription tier. You will never be charged more than this amount per month for this subscription.
 */
  readonly monthly?: number;
};

/**
 * The unique ID of this Subscription tier.

 */
export type LongviewSubscriptionId = typeof LongviewSubscriptionId[keyof typeof LongviewSubscriptionId];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LongviewSubscriptionId = {
  'longview-3': 'longview-3',
  'longview-10': 'longview-10',
  'longview-40': 'longview-40',
  'longview-100': 'longview-100',
} as const;

/**
 * A Longview Subscription represents a tier of Longview service you can subscribe to.

 */
export interface LongviewSubscription {
  /** The number of Longview Clients that may be created with this Subscription tier.
 */
  readonly clients_included?: number;
  /** The unique ID of this Subscription tier.
 */
  readonly id?: LongviewSubscriptionId;
  /** A display name for this Subscription tier.
 */
  readonly label?: string;
  /** Pricing information about this Subscription tier.
 */
  readonly price?: LongviewSubscriptionPrice;
}

/**
 * Whether the login attempt succeeded or failed.

 */
export type LoginStatus = typeof LoginStatus[keyof typeof LoginStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LoginStatus = {
  successful: 'successful',
  failed: 'failed',
} as const;

/**
 * An object representing a previous successful login for a User.

 */
export interface Login {
  /** When the login was initiated.
 */
  readonly datetime?: string;
  /** The unique ID of this login object.
 */
  readonly id?: number;
  /** The remote IP address that requested the login.
 */
  readonly ip?: string;
  /** True if the User that attempted the login was a restricted User, false otherwise.
 */
  readonly restricted?: boolean;
  /** Whether the login attempt succeeded or failed.
 */
  readonly status?: LoginStatus;
  /** The username of the User that attempted the login.
 */
  readonly username?: string;
}

/**
 * The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.

 */
export type LongviewClientApps = {
  /** If True, the Apache Longview Client module is monitoring Apache on your server.
 */
  readonly apache?: boolean;
  /** If True, the MySQL Longview Client modules is monitoring MySQL on your server.
 */
  readonly mysql?: boolean;
  /** If True, the Nginx Longview Client module is monitoring Nginx on your server.
 */
  readonly nginx?: boolean;
};

/**
 * A LongviewClient is a single monitor set up to track statistics about one of your servers.

 */
export interface LongviewClient {
  /** The API key for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly api_key?: string;
  /** The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.
 */
  readonly apps?: LongviewClientApps;
  /** When this Longview Client was created.
 */
  readonly created?: string;
  /** This Client's unique ID.
 */
  readonly id?: number;
  /** The install code for this Client, used when configuring the Longview
Client application on your Linode.

Returns as `[REDACTED]` if you do not have read-write access to this client.
 */
  readonly install_code?: string;
  /** This Client's unique label. This is for display purposes only.
 */
  label?: string;
  /** When this Longview Client was last updated.
 */
  readonly updated?: string;
}

/**
 * LKE versions

 */
export interface LKEVersion {
  /** A Kubernetes version number available for deployment to a Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version.
 */
  readonly id?: string;
}

/**
 * The Node's status as it pertains to being a Kubernetes node.

 */
export type LKENodeStatusStatus = typeof LKENodeStatusStatus[keyof typeof LKENodeStatusStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LKENodeStatusStatus = {
  ready: 'ready',
  not_ready: 'not_ready',
} as const;

/**
 * Status information for a Node which is a member of a Kubernetes cluster.

 */
export interface LKENodeStatus {
  /** The Node's ID.
 */
  readonly id?: string;
  /** The Linode's ID. When no Linode is currently provisioned for this Node, this will be null.
 */
  readonly instance_id?: string;
  /** The Node's status as it pertains to being a Kubernetes node.
 */
  readonly status?: LKENodeStatusStatus;
}

/**
 * The Node's status as it pertains to being a Kubernetes node.

 */
export type LKENodePoolNodesItemStatus = typeof LKENodePoolNodesItemStatus[keyof typeof LKENodePoolNodesItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LKENodePoolNodesItemStatus = {
  ready: 'ready',
  not_ready: 'not_ready',
} as const;

/**
 * Status information for a Node which is a member of a Kubernetes cluster.

 */
export type LKENodePoolNodesItem = {
  /** The Node's ID.
 */
  readonly id?: string;
  /** The Linode's ID. When no Linode is currently provisioned for this Node, this will be null.
 */
  readonly instance_id?: string;
  /** The Node's status as it pertains to being a Kubernetes node.
 */
  readonly status?: LKENodePoolNodesItemStatus;
};

/**
 * This custom disk partition's filesystem type.

 */
export type LKENodePoolDisksItemType = typeof LKENodePoolDisksItemType[keyof typeof LKENodePoolDisksItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LKENodePoolDisksItemType = {
  raw: 'raw',
  ext4: 'ext4',
} as const;

/**
 * The values to assign to each partition in this Node Pool's custom disk layout.

 */
export type LKENodePoolDisksItem = {
  /** The size of this custom disk partition in MB.

  * The size of this disk partition must not exceed the capacity of the node's plan type.
 */
  size?: number;
  /** This custom disk partition's filesystem type.
 */
  type?: LKENodePoolDisksItemType;
};

/**
 * When enabled, the number of nodes autoscales within the defined minimum and maximum values.

 */
export type LKENodePoolAutoscaler = {
  /** Whether autoscaling is enabled for this Node Pool. Defaults to `false`. */
  enabled?: boolean;
  /** The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  max?: number;
  /** The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  min?: number;
};

/**
 * The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.

 */
export interface LKENodePool {
  /** When enabled, the number of nodes autoscales within the defined minimum and maximum values.
 */
  autoscaler?: LKENodePoolAutoscaler;
  /** The number of nodes in the Node Pool. */
  count?: number;
  /** This Node Pool's custom disk layout.
 */
  disks?: LKENodePoolDisksItem[];
  /** This Node Pool's unique ID.
 */
  id?: number;
  /** Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the instance_id will be returned as null.
 */
  nodes?: LKENodePoolNodesItem[];
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** The Linode Type for all of the nodes in the Node Pool. */
  type?: string;
}

/**
 * This custom disk partition's filesystem type.

 */
export type LKENodePoolRequestBodyDisksItemType = typeof LKENodePoolRequestBodyDisksItemType[keyof typeof LKENodePoolRequestBodyDisksItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LKENodePoolRequestBodyDisksItemType = {
  raw: 'raw',
  ext4: 'ext4',
} as const;

/**
 * The values to assign to each partition in this Node Pool's custom disk layout.

 */
export type LKENodePoolRequestBodyDisksItem = {
  /** The size of this custom disk partition in MB.

  * The size of this disk partition must not exceed the capacity of the node's plan type.
 */
  size?: number;
  /** This custom disk partition's filesystem type.
 */
  type?: LKENodePoolRequestBodyDisksItemType;
};

/**
 * When enabled, the number of nodes autoscales within the defined minimum and maximum values.

When making a request, `max` and `min` require each other.

 */
export type LKENodePoolRequestBodyAutoscaler = {
  /** Whether autoscaling is enabled for this Node Pool. Defaults to `false`. */
  enabled?: boolean;
  /** The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. Defaults to the value provided by the `count` field.
 */
  max?: number;
  /** The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`. */
  min?: number;
};

/**
 * Specifies a collection of Linodes which will be members of a Kubernetes cluster.

 */
export interface LKENodePoolRequestBody {
  /** When enabled, the number of nodes autoscales within the defined minimum and maximum values.

When making a request, `max` and `min` require each other.
 */
  autoscaler?: LKENodePoolRequestBodyAutoscaler;
  /** The number of nodes in the Node Pool. */
  count?: number;
  /** **Note**: This field should be omitted except for special use cases. The disks specified here are
partitions in *addition* to the primary partition and reduce the size of the primary partition,
which can lead to stability problems for the Node.

This Node Pool's custom disk layout. Each item in this array will create a new disk
partition for each node in this Node Pool.

  * The custom disk layout is applied to each node in this Node Pool.
  * The maximum number of custom disk partitions that can be configured is 7.
  * Once the requested disk paritions are allocated, the remaining disk space is allocated to the node's boot disk.
  * A Node Pool's custom disk layout is immutable over the lifetime of the Node Pool.
 */
  disks?: LKENodePoolRequestBodyDisksItem[];
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** The Linode Type for all of the nodes in the Node Pool. */
  type?: string;
}

/**
 * Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.

 */
export type LKEClusterControlPlane = {
  /** Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.
 */
  high_availability?: boolean;
};

/**
 * A Kubernetes cluster.
 */
export interface LKECluster {
  /** Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.
 */
  control_plane?: LKEClusterControlPlane;
  /** When this Kubernetes cluster was created. */
  readonly created?: string;
  /** This Kubernetes cluster's unique ID. */
  readonly id?: number;
  /** The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.
 */
  k8s_version?: string;
  /** This Kubernetes cluster's unique label for display purposes only.
Labels have the following constraints:

  * UTF-8 characters will be returned by the API using escape
    sequences of their Unicode code points. For example, the
    Japanese character *„Åã* is 3 bytes in UTF-8 (`0xE382AB`). Its
    Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this
    character and the API will return it as the escape sequence
    using six 1 byte characters which represent 2 bytes of Unicode
    code point (`"\u30ab"`).
  * 4 byte UTF-8 characters are not supported.
  * If the label is entirely composed of UTF-8 characters, the API
    response will return the code points using up to 193 1 byte
    characters.
 */
  label?: string;
  /** This Kubernetes cluster's location. */
  region?: string;
  /** An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Kubernetes cluster was updated. */
  readonly updated?: string;
}

export type LinodeTypeRegionPricesItem = {
  /** Cost (in US dollars) per hour for this Region. */
  hourly?: number;
  /** The Region ID for these prices. */
  id?: string;
  /** Cost (in US dollars) per month for this Region. */
  monthly?: number;
};

/**
 * The default cost of provisioning this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.

 */
export type LinodeTypePrice = {
  /** Cost (in US dollars) per hour. */
  readonly hourly?: number;
  /** Cost (in US dollars) per month. */
  readonly monthly?: number;
};

/**
 * The class of the Linode Type.

We currently offer six classes of compute instances:

  * `nanode` - Nanode instances are good for low-duty workloads, where performance isn't critical. **Note:** As of June 16th, 2020, Nanodes became 1 GB Linodes in the Cloud Manager, however, the API, the CLI, and billing will continue to refer to these instances as Nanodes.
  * `standard` - Standard Shared instances are good for medium-duty workloads and are a good mix of performance, resources, and price. **Note:** As of June 16th, 2020, Standard Linodes in the Cloud Manager became Shared Linodes, however, the API, the CLI, and billing will continue to refer to these instances as Standard Linodes.
  * `dedicated` - Dedicated CPU instances are good for full-duty workloads where consistent performance is important.
  * `premium` (limited Regions) - In addition to the features of Dedicated instances, Premium instances come equipped with the latest AMD EPYC&trade; CPUs, ensuring your applications are running on the latest hardware with consistently high performance. Only available in [Regions](/docs/api/regions/#regions-list) with "Premium Plans" in their `capabilities`
  * `gpu` (limited Regions) - Linodes with dedicated NVIDIA Quadro&reg; RTX 6000 GPUs accelerate highly specialized applications such as machine learning, AI, and video transcoding. Only available in [Regions](/docs/api/regions/#regions-list) with "GPU Linodes" in their `capabilities`
  * `highmem` - High Memory instances favor RAM over other resources, and can be good for memory hungry use cases like caching and in-memory databases. All High Memory plans contain dedicated CPU cores.

 */
export type LinodeTypeClass = typeof LinodeTypeClass[keyof typeof LinodeTypeClass];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeTypeClass = {
  nanode: 'nanode',
  standard: 'standard',
  dedicated: 'dedicated',
  premium: 'premium',
  gpu: 'gpu',
  highmem: 'highmem',
} as const;

/**
 * Returns collection of Linode types, including pricing and specifications for each type. These are used when [creating](/docs/api/linode-instances/#linode-create) or [resizing](/docs/api/linode-instances/#linode-resize) Linodes.

 */
export interface LinodeType {
  /** A list of optional add-on services for Linodes and their associated costs.
 */
  readonly addons?: LinodeTypeAddons;
  /** The class of the Linode Type.

We currently offer six classes of compute instances:

  * `nanode` - Nanode instances are good for low-duty workloads, where performance isn't critical. **Note:** As of June 16th, 2020, Nanodes became 1 GB Linodes in the Cloud Manager, however, the API, the CLI, and billing will continue to refer to these instances as Nanodes.
  * `standard` - Standard Shared instances are good for medium-duty workloads and are a good mix of performance, resources, and price. **Note:** As of June 16th, 2020, Standard Linodes in the Cloud Manager became Shared Linodes, however, the API, the CLI, and billing will continue to refer to these instances as Standard Linodes.
  * `dedicated` - Dedicated CPU instances are good for full-duty workloads where consistent performance is important.
  * `premium` (limited Regions) - In addition to the features of Dedicated instances, Premium instances come equipped with the latest AMD EPYC&trade; CPUs, ensuring your applications are running on the latest hardware with consistently high performance. Only available in [Regions](/docs/api/regions/#regions-list) with "Premium Plans" in their `capabilities`
  * `gpu` (limited Regions) - Linodes with dedicated NVIDIA Quadro&reg; RTX 6000 GPUs accelerate highly specialized applications such as machine learning, AI, and video transcoding. Only available in [Regions](/docs/api/regions/#regions-list) with "GPU Linodes" in their `capabilities`
  * `highmem` - High Memory instances favor RAM over other resources, and can be good for memory hungry use cases like caching and in-memory databases. All High Memory plans contain dedicated CPU cores.
 */
  readonly class?: LinodeTypeClass;
  /** The Disk size, in MB, of the Linode Type.
 */
  readonly disk?: number;
  /** The number of GPUs this Linode Type offers.
 */
  readonly gpus?: number;
  /** The ID representing the Linode Type. */
  readonly id?: string;
  /** The Linode Type's label is for display purposes only.
 */
  readonly label?: string;
  /** Amount of RAM included in this Linode Type.
 */
  readonly memory?: number;
  /** The Mbits outbound bandwidth allocation.
 */
  readonly network_out?: number;
  /** The default cost of provisioning this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.
 */
  readonly price?: LinodeTypePrice;
  region_prices?: LinodeTypeRegionPricesItem[];
  /** The Linode Type that a [mutate](/docs/api/linode-instances/#linode-upgrade) will upgrade to for a Linode of this type.  If "null", a Linode of this type may not mutate.
 */
  readonly successor?: string | null;
  /** The monthly outbound transfer amount, in MB.
 */
  readonly transfer?: number;
  /** The number of VCPU cores this Linode Type offers.
 */
  readonly vcpus?: number;
}

export type LinodeTypeAddonsBackupsRegionPricesItem = {
  /** Cost (in US dollars) per hour to add Backups service in this Region. */
  hourly?: number;
  /** The Region ID for these prices. */
  id?: string;
  /** Cost (in US dollars) per month to add Backups service in this Region. */
  monthly?: number;
};

/**
 * The default cost of enabling Backups for this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.

 */
export type LinodeTypeAddonsBackupsPrice = {
  /** The cost (in US dollars) per hour to add Backups service.
 */
  hourly?: number;
  /** The cost (in US dollars) per month to add Backups service.
 */
  monthly?: number;
};

/**
 * Information about the optional Backup service offered for Linodes.

 */
export type LinodeTypeAddonsBackups = {
  /** The default cost of enabling Backups for this Linode Type. Prices are in US dollars, broken down into hourly and monthly charges.

Certain Regions have different prices from the default. For Region-specific prices, see `region_prices`.
 */
  readonly price?: LinodeTypeAddonsBackupsPrice;
  readonly region_prices?: LinodeTypeAddonsBackupsRegionPricesItem[];
};

/**
 * A list of optional add-on services for Linodes and their associated costs.

 */
export type LinodeTypeAddons = {
  /** Information about the optional Backup service offered for Linodes.
 */
  readonly backups?: LinodeTypeAddonsBackups;
};

/**
 * IPv6 statistics.
 */
export type LinodeStatsNetv6 = {
  /** Input stats for IPv6, measured in bits/s (bits/second). */
  in?: number[][];
  /** Output stats for IPv6, measured in bits/s (bits/second). */
  out?: number[][];
  /** Private IPv6 input statistics, measured in bits/s (bits/second). */
  private_in?: number[][];
  /** Private IPv6 output statistics, measured in bits/s (bits/second). */
  private_out?: number[][];
};

/**
 * IPv4 statistics.
 */
export type LinodeStatsNetv4 = {
  /** Input stats for IPv4, measured in bits/s (bits/second). */
  in?: number[][];
  /** Output stats for IPv4, measured in bits/s (bits/second). */
  out?: number[][];
  /** Private IPv4 input statistics, measured in bits/s (bits/second). */
  private_in?: number[][];
  /** Private IPv4 output statistics, measured in bits/s (bits/second). */
  private_out?: number[][];
};

/**
 * Input/Output statistics.
 */
export type LinodeStatsIo = {
  /** Block/s written. */
  io?: number[][];
  /** Block/s written. */
  swap?: number[][];
};

/**
 * CPU, IO, IPv4, and IPv6 statistics. Graph data, if available, is in "[timestamp, reading]" array format. Timestamp is a UNIX timestamp in EST.

 */
export interface LinodeStats {
  /** Percentage of CPU used.
 */
  readonly cpu?: number[][];
  /** Input/Output statistics. */
  readonly io?: LinodeStatsIo;
  /** IPv4 statistics. */
  readonly netv4?: LinodeStatsNetv4;
  /** IPv6 statistics. */
  readonly netv6?: LinodeStatsNetv6;
  /** The title for this data set. */
  readonly title?: string;
}

/**
 * This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.

 */
export type LinodeRequestStackscriptData = { [key: string]: any };

/**
 * An object containing user-defined data relevant to the creation of Linodes.

 */
export type LinodeRequestMetadata = {
  /** Base64-encoded [cloud-config](/docs/products/compute/compute-instances/guides/metadata-cloud-config/) data.

Cannot be modified after provisioning. To update, use either the [Linode Clone](/docs/api/linode-instances/#linode-clone) or [Linode Rebuild](/docs/api/linode-instances/#linode-rebuild) commands.

Must not be included when cloning to an existing Linode.

Unencoded data must not exceed 65535 bytes, or about 16kb encoded.
 */
  user_data?: string;
};

/**
 * Common properties for creating and rebuilding Linodes.
 */
export interface LinodeRequest {
  /** A list of public SSH keys that will be automatically appended
to the root user's `~/.ssh/authorized_keys` file when deploying from an Image.
 */
  authorized_keys?: string[];
  /** A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.
 */
  authorized_users?: string[];
  /** This field defaults to `true` if the Linode is created with an Image or from a Backup.
If it is deployed from an Image or a Backup and you wish it to remain `offline` after deployment, set this to `false`.
 */
  booted?: boolean;
  /** An Image ID to deploy the Linode Disk from.

Access the Images List ([GET /images](/docs/api/images/#images-list)) endpoint with authentication to view
all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating
a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Access the User's
Grant Update ([PUT /account/users/{username}/grants](/docs/api/account/#users-grants-update)) endpoint to
adjust permissions for an Account Image.
 */
  image?: string;
  /** An object containing user-defined data relevant to the creation of Linodes.
 */
  metadata?: LinodeRequestMetadata;
  /** This sets the root user's password on a newly-created Linode Disk when deploying from an Image.

* **Required** when creating a Linode Disk from an Image, including when using a StackScript.

* Must meet a password strength score requirement that is calculated internally by the API.
If the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.
 */
  root_pass?: string;
  /** This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.
 */
  stackscript_data?: LinodeRequestStackscriptData;
  /** A StackScript ID that will cause the referenced StackScript to be run during
deployment of this Linode. A compatible `image` is required to use a
StackScript. To get a list of available StackScript and their permitted Images
see [/stackscripts](/docs/api/stackscripts/#stackscripts-list).
This field cannot be used when deploying from a Backup or a Private Image.
 */
  stackscript_id?: number;
}

/**
 * An array of Network Interfaces to add to this Linode's Configuration Profile.

At least one and up to three interface objects can be entered in this array. The position in the array determines which of the Linode's network interfaces is configured:

- First [0]:  eth0
- Second [1]: eth1
- Third [2]:  eth2

When updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.

If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.

**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.

 */
export type LinodeConfigInterfaces = LinodeConfigInterfacesItem[];

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type LinodeConfigInterfacesItemPurpose = typeof LinodeConfigInterfacesItemPurpose[keyof typeof LinodeConfigInterfacesItemPurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeConfigInterfacesItemPurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export type LinodeConfigInterfacesItem = {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: LinodeConfigInterfacesItemPurpose;
};

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type LinodeConfigInterfacePurpose = typeof LinodeConfigInterfacePurpose[keyof typeof LinodeConfigInterfacePurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeConfigInterfacePurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export interface LinodeConfigInterface {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: LinodeConfigInterfacePurpose;
}

/**
 * Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.

 */
export type LinodeConfigVirtMode = typeof LinodeConfigVirtMode[keyof typeof LinodeConfigVirtMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeConfigVirtMode = {
  paravirt: 'paravirt',
  fullvirt: 'fullvirt',
} as const;

/**
 * Defines the state of your Linode after booting. Defaults to `default`.

 */
export type LinodeConfigRunLevel = typeof LinodeConfigRunLevel[keyof typeof LinodeConfigRunLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeConfigRunLevel = {
  default: 'default',
  single: 'single',
  binbash: 'binbash',
} as const;

/**
 * The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.

 */
export type LinodeConfigInterfacesPropertyItemPurpose = typeof LinodeConfigInterfacesPropertyItemPurpose[keyof typeof LinodeConfigInterfacesPropertyItemPurpose];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeConfigInterfacesPropertyItemPurpose = {
  public: 'public',
  vlan: 'vlan',
} as const;

/**
 * The Network Interface to apply to this Linode's configuration profile.

 */
export type LinodeConfigInterfacesPropertyItem = {
  /** The unique ID representing this interface. */
  readonly id?: number;
  /** This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.

For `vlan` purpose interfaces:
* Must be unique among the Linode's interfaces to avoid conflicting addresses.
* Should be unique among devices attached to the VLAN to avoid conflict.

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

The Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).
 */
  ipam_address?: string | null;
  /** The name of this interface.

For `vlan` purpose interfaces:
* Required.
* Must be unique among the Linode's interfaces (a Linode cannot be attached to the same VLAN multiple times).
* May only consist of ASCII letters, numbers, and dashes (`-`).

For `public` purpose interfaces:
* In requests, must be an empty string (`""`) or `null` if included.
* In responses, always returns `null`.

If the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.
 */
  label?: string | null;
  /** The type of interface.

* `public`
  * Only one `public` interface per Linode can be defined.
  * The Linode's default public IPv4 address is assigned to the `public` interface.
  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via [LISH](/docs/products/compute/compute-instances/guides/lish/) or other Linodes connected to the same VLAN.

* `vlan`
  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.
  * The Linode is configured to use the specified `ipam_address`, if any.
 */
  purpose?: LinodeConfigInterfacesPropertyItemPurpose;
};

/**
 * Helpers enabled when booting to this Linode Config.
 */
export type LinodeConfigHelpers = {
  /** Populates the /dev directory early during boot without udev.  Defaults to false.
 */
  devtmpfs_automount?: boolean;
  /** Helps maintain correct inittab/upstart console device. */
  distro?: boolean;
  /** Creates a modules dependency file for the Kernel you run. */
  modules_dep?: boolean;
  /** Automatically configures static networking. */
  network?: boolean;
  /** Disables updatedb cron job to avoid disk thrashing. */
  updatedb_disabled?: boolean;
};

export interface LinodeConfig {
  /** Optional field for arbitrary User comments on this Config. */
  comments?: string | null;
  /** A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.
 */
  devices?: LinodeConfigDevices;
  /** Helpers enabled when booting to this Linode Config. */
  helpers?: LinodeConfigHelpers;
  /** The ID of this Config. */
  readonly id?: number;
  /** An array of Network Interfaces to add to this Linode's Configuration Profile.

At least one and up to three interface objects can be entered in this array. The position in the array determines which of the Linode's network interfaces is configured:

- First [0]:  eth0
- Second [1]: eth1
- Third [2]:  eth2

When updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.

If no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.

**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
 */
  interfaces?: LinodeConfigInterfacesPropertyItem[];
  /** A Kernel ID to boot a Linode with. Here are examples of commonly-used kernels:

* `linode/latest-64bit` (default): Our latest kernel at the time of instance boot/reboot.
* `linode/grub2`: The upstream distribution-supplied kernel that is installed on the primary disk, or a custom kernel if installed.
* `linode/direct-disk`: The MBR (Master Boot Record) of the primary disk/root device, used instead of a Linux kernel.

For a complete list of options, use the [Kernels List](/docs/api/linode-instances/#kernels-list) command.
 */
  kernel?: string;
  /** The Config's label is for display purposes only.
 */
  label?: string;
  /** Defaults to the total RAM of the Linode.
 */
  memory_limit?: number;
  /** The root device to boot.
* If no value or an invalid value is provided, root device will default to `/dev/sda`.
* If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
 */
  root_device?: string;
  /** Defines the state of your Linode after booting. Defaults to `default`.
 */
  run_level?: LinodeConfigRunLevel;
  /** Controls the virtualization mode. Defaults to `paravirt`.
* `paravirt` is suitable for most cases. Linodes running in paravirt mode
  share some qualities with the host, ultimately making it run faster since
  there is less transition between it and the host.
* `fullvirt` affords more customization, but is slower because 100% of the VM
  is virtualized.
 */
  virt_mode?: LinodeConfigVirtMode;
}

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type LinodeConfigDevicesSdh = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type LinodeConfigDevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type LinodeConfigDevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type LinodeConfigDevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type LinodeConfigDevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type LinodeConfigDevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type LinodeConfigDevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type LinodeConfigDevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.

 */
export type LinodeConfigDevices = {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: LinodeConfigDevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: LinodeConfigDevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: LinodeConfigDevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: LinodeConfigDevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: LinodeConfigDevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: LinodeConfigDevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: LinodeConfigDevicesSdg;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdh?: LinodeConfigDevicesSdh;
};

/**
 * A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".

 */
export type LinodeStatus = typeof LinodeStatus[keyof typeof LinodeStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeStatus = {
  running: 'running',
  offline: 'offline',
  booting: 'booting',
  rebooting: 'rebooting',
  shutting_down: 'shutting_down',
  provisioning: 'provisioning',
  deleting: 'deleting',
  migrating: 'migrating',
  rebuilding: 'rebuilding',
  cloning: 'cloning',
  restoring: 'restoring',
  stopped: 'stopped',
  billing_suspension: 'billing_suspension',
} as const;

/**
 * Information about the resources available to this Linode.
 */
export type LinodeSpecs = {
  /** The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.
 */
  readonly disk?: number;
  /** The number of gpus this Linode has access to.
 */
  readonly gpus?: number;
  /** The amount of RAM, in MB, this Linode has access to.

Typically, a Linode boots with all of its available RAM, but this can be configured in a Config profile. See the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.
 */
  readonly memory?: number;
  /** The amount of network transfer this Linode is allotted each month. */
  readonly transfer?: number;
  /** The number of vcpus this Linode has access to.
 */
  readonly vcpus?: number;
};

export type LinodeImage = string | null;

/**
 * The virtualization software powering this Linode.

 */
export type LinodeHypervisor = typeof LinodeHypervisor[keyof typeof LinodeHypervisor];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeHypervisor = {
  kvm: 'kvm',
} as const;

export interface Linode {
  alerts?: LinodeAlerts;
  /** Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).
 */
  backups?: LinodeBackups;
  /** When this Linode was created. */
  readonly created?: string;
  /**
   * A deprecated property denoting a group label for this Linode.

   * @deprecated
   */
  group?: string;
  /** Whether this compute instance was provisioned utilizing `user_data` provided via the Metadata service. See the [Linode Create](/docs/api/linode-instances/#linode-create) description for more information on Metadata. */
  readonly has_user_data?: boolean;
  /** The Linode's host machine, as a UUID. */
  readonly host_uuid?: string;
  /** The virtualization software powering this Linode.
 */
  readonly hypervisor?: LinodeHypervisor;
  /** This Linode's ID which must be provided for all operations impacting this Linode.
 */
  readonly id?: number;
  readonly image?: LinodeImage;
  /** This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address
upon creation, and may get a single private IPv4 address if needed. You may need to
[open a support ticket](/docs/api/support/#support-ticket-open)
to get additional IPv4 addresses.

IPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.
See the [/networking](/docs/api/networking/) endpoints for details.
 */
  readonly ipv4?: string[];
  /** This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.
 */
  readonly ipv6?: string | null;
  /** The Linode's label is for display purposes only. If no label is provided for a Linode,
a default will be assigned.

Linode labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
 */
  label?: string;
  /** This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).
 */
  readonly region?: string;
  /** Information about the resources available to this Linode. */
  readonly specs?: LinodeSpecs;
  /** A brief description of this Linode's current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".
 */
  readonly status?: LinodeStatus;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.
To change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).
 */
  readonly type?: string;
  /** When this Linode was last updated. */
  readonly updated?: string;
  /** The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.
To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
 */
  watchdog_enabled?: boolean;
}

/**
 * The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.

 */
export type LinodeBackupsScheduleWindow = typeof LinodeBackupsScheduleWindow[keyof typeof LinodeBackupsScheduleWindow];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeBackupsScheduleWindow = {
  Scheduling: 'Scheduling',
  W0: 'W0',
  W2: 'W2',
  W4: 'W4',
  W6: 'W6',
  W8: 'W8',
  W10: 'W10',
  W12: 'W12',
  W14: 'W14',
  W16: 'W16',
  W18: 'W18',
  W20: 'W20',
  W22: 'W22',
  null: null,
} as const;

/**
 * The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.

 */
export type LinodeBackupsScheduleDay = typeof LinodeBackupsScheduleDay[keyof typeof LinodeBackupsScheduleDay];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinodeBackupsScheduleDay = {
  Scheduling: 'Scheduling',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  null: null,
} as const;

export type LinodeBackupsSchedule = {
  /** The day of the week that your Linode's weekly Backup is taken.
If not set manually, a day will be chosen for you. Backups
are taken every day, but backups taken on this day are
preferred when selecting backups to retain for a longer period.


If not set manually, then when backups are initially enabled, this
may come back as `Scheduling` until the `day` is automatically selected.
 */
  day?: LinodeBackupsScheduleDay;
  /** The window in which your backups will be taken, in UTC. A
backups window is a two-hour span of time in which the backup
may occur.


For example, `W10` indicates that your backups should be
taken between 10:00 and 12:00. If you do not choose a backup
window, one will be selected for you automatically.


If not set manually, when backups are initially enabled this
may come back as `Scheduling` until the `window` is automatically selected.
 */
  window?: LinodeBackupsScheduleWindow;
};

/**
 * Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).

 */
export type LinodeBackups = {
  /** Whether Backups for this Linode are available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).
 */
  readonly enabled?: boolean;
  /** The last successful backup date. 'null' if there was no previous backup. */
  readonly last_successful?: string;
  schedule?: LinodeBackupsSchedule;
};

export type LinodeAlerts = {
  /** The percentage of CPU usage required to trigger an alert.
If the average CPU usage over two hours exceeds this value, we'll send you an alert.
Your Linode's total CPU capacity is represented as 100%, multiplied by its number of
cores.

For example, a two core Linode's CPU capacity is represented as 200%. If you want
to be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.

The default value is 90% multiplied by the number of cores.

If the value is set to `0` (zero), the alert is disabled.
 */
  cpu?: number;
  /** The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.
 */
  io?: number;
  /** The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_in?: number;
  /** The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.
 */
  network_out?: number;
  /** The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.
 */
  transfer_quota?: number;
};

/**
 * The architecture of this Kernel.
 */
export type KernelArchitecture = typeof KernelArchitecture[keyof typeof KernelArchitecture];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const KernelArchitecture = {
  x86_64: 'x86_64',
  i386: 'i386',
} as const;

/**
 * Linux kernel object
 */
export interface Kernel {
  /** The architecture of this Kernel. */
  readonly architecture?: KernelArchitecture;
  /** The date on which this Kernel was built. */
  readonly built?: string;
  /** If this Kernel is marked as deprecated, this field has a value of true; otherwise, this field is false. */
  readonly deprecated?: boolean;
  /** The unique ID of this Kernel. */
  readonly id?: string;
  /** If this Kernel is suitable for KVM Linodes. */
  readonly kvm?: boolean;
  /** The friendly name of this Kernel. */
  readonly label?: string;
  /** If this Kernel is suitable for paravirtualized operations. */
  readonly pvops?: boolean;
  /** Linux Kernel version. */
  readonly version?: string;
}

/**
 * An object representing an IPv6 range.

 */
export interface IPv6RangeBGP {
  /** Whether this IPv6 range is shared.
 */
  readonly is_bgp?: boolean;
  /** A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
 */
  readonly linodes?: number[];
  /** The prefix length of the address. The total number of addresses that can be assigned from this range is calculated as 2<sup>(128 - prefix length)</sup>.
 */
  prefix?: number;
  /** The IPv6 address of this range.
 */
  readonly range?: string;
  /** The region for this range of IPv6 addresses.
 */
  readonly region?: string;
}

/**
 * An object representing an IPv6 range.

 */
export interface IPv6Range {
  /** The prefix length of the address. The total number of addresses that can be assigned from this range is calculated as 2<sup>(128 - prefix length)</sup>.
 */
  prefix?: number;
  /** The IPv6 address of this range.
 */
  readonly range?: string;
  /** The region for this range of IPv6 addresses.
 */
  readonly region?: string;
  /** The IPv6 SLAAC address.
 */
  route_target?: string;
}

/**
 * An object representing an IPv6 pool.

 */
export interface IPv6Pool {
  /** The prefix length of the address. The total number of addresses that can be assigned from this range is calculated as 2<sup>(128 - prefix length)</sup>.
 */
  prefix?: number;
  /** The IPv6 range of addresses in this pool.
 */
  readonly range?: string;
  /** The region for this pool of IPv6 addresses.
 */
  readonly region?: string;
  /** The last address in this block of IPv6 addresses.
 */
  route_target?: string | null;
}

/**
 * A SLAAC IPv6 address that exists in Linode's system.

 */
export interface IPAddressV6Slaac {
  /** The address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string;
  /** The ID of the Linode this address currently belongs to.
 */
  readonly linode_id?: number;
  /** The network prefix.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address.
 */
  rdns?: string;
  /** The Region this address resides in.
 */
  readonly region?: string;
  /** The subnet mask.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: string;
}

/**
 * A link-local IPv6 address that exists in Linode's system,.

 */
export interface IPAddressV6LinkLocal {
  /** The IPv6 link-local address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string;
  /** The ID of the Linode this address currently belongs to.
 */
  readonly linode_id?: number;
  /** The network prefix.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address.
 */
  rdns?: string;
  /** The Region this address resides in.
 */
  readonly region?: string;
  /** The subnet mask.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: string;
}

/**
 * A private IPv4 address that exists in Linode's system.

 */
export interface IPAddressPrivate {
  /** The private IPv4 address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string;
  /** The ID of the Linode this address currently belongs to.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address.
 */
  rdns?: string;
  /** The Region this address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: string;
}

/**
 * A request object IP Addresses Share (POST /networking/ips/share)
 */
export interface IPAddressesShareRequest {
  /** A list of secondary Linode IPs to share with the primary Linode.
* Can include both IPv4 addresses and IPv6 ranges (omit /56 and /64 prefix lengths)
* Can include both private and public IPv4 addresses.
* You must have access to all of these addresses and they must be in the same Region as the primary Linode.
* Enter an empty array to remove all shared IP addresses.
 */
  ips: string[];
  /** The ID of the primary Linode that the addresses will be shared with.
 */
  linode_id: number;
}

export type IPAddressesListResponseAllOfTwo = {
  data?: IPAddressesListResponseAllOfTwoDataItem[];
};

/**
 * The response data for the IP Addresses List (GET /networking/ips) command.
 */
export type IPAddressesListResponse = IPAddressesListResponseAllOf & IPAddressesListResponseAllOfTwo;

/**
 * The type of address this is.

 */
export type IPAddressesListResponseAllOfTwoDataItemType = typeof IPAddressesListResponseAllOfTwoDataItemType[keyof typeof IPAddressesListResponseAllOfTwoDataItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IPAddressesListResponseAllOfTwoDataItemType = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6, specific to the response for the IP Addresses List command.

 */
export type IPAddressesListResponseAllOfTwoDataItem = {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this defaults to the Linode that this address was assigned to on creation. IPv4 addresses may be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: IPAddressesListResponseAllOfTwoDataItemType;
};

/**
 * An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.

 */
export type IPAddressesListResponseAllOf = {
  /** The current [page](/docs/api/#pagination). */
  readonly page?: number;
  /** The total number of [pages](/docs/api/#pagination). */
  readonly pages?: number;
  /** The total number of results. */
  readonly results?: number;
};

export type IPAddressesAssignRequestAssignmentsItem = {
  /** The IPv4 address or IPv6 range for this assignment.
* Must be an IPv4 address or an IPv6 range you can access in the Region specified.
* IPv6 ranges must include a prefix length of `/56` or `/64`, for example: `2001:db8:3c4d:15::/64`.
* Assignment of an IPv6 range to a Linode updates the route target of the range to the assigned Linode's SLAAC address.
* May be a public or private address.
 */
  address?: string;
  /** The ID of the Linode to assign this address to. The IP's previous Linode will lose this address, and must end up with at least one public address and no more than one private address once all assignments have been made.
 */
  linode_id?: number;
};

/**
 * Request object for IP Addresses Assign (POST /networking/ips/assign).
 */
export interface IPAddressesAssignRequest {
  /** The list of assignments to make. You must have read_write access to all IPs being assigned and all Linodes being assigned to in order for the assignments to succeed.
 */
  assignments: IPAddressesAssignRequestAssignmentsItem[];
  /** The ID of the Region in which these assignments are to take place. All IPs and Linodes must exist in this Region.
 */
  region: string;
}

/**
 * The type of address this is.

 */
export type IPAddressType = typeof IPAddressType[keyof typeof IPAddressType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IPAddressType = {
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  'ipv6/pool': 'ipv6/pool',
  'ipv6/range': 'ipv6/range',
} as const;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.

 */
export interface IPAddress {
  /** The IP address.
 */
  readonly address?: string;
  /** The default gateway for this address.
 */
  readonly gateway?: string | null;
  /** The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
 */
  readonly linode_id?: number;
  /** The number of bits set in the subnet mask.
 */
  readonly prefix?: number;
  /** Whether this is a public or private IP address.
 */
  readonly public?: boolean;
  /** The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
 */
  rdns?: string | null;
  /** The Region this IP address resides in.
 */
  readonly region?: string;
  /** The mask that separates host bits from network bits for this address.
 */
  readonly subnet_mask?: string;
  /** The type of address this is.
 */
  readonly type?: IPAddressType;
}

/**
 * The type of service, ether `hourly` or `misc`.
 */
export type InvoiceItemType = typeof InvoiceItemType[keyof typeof InvoiceItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceItemType = {
  hourly: 'hourly',
  misc: 'misc',
} as const;

/**
 * An InvoiceItem object.
 */
export interface InvoiceItem {
  /** The price, in US dollars, of the Invoice Item. Equal to the unit price multiplied by quantity. */
  readonly amount?: number;
  /** The date the Invoice Item started, based on month. */
  readonly from?: string;
  /** The Invoice Item's display label. */
  readonly label?: string;
  /** The quantity of this Item for the specified Invoice. */
  readonly quantity?: number;
  /** The ID of the applicable Region associated with this Invoice Item.

`null` if there is no applicable Region.
 */
  readonly region?: string | null;
  /** The amount of tax levied on this Item in US Dollars. */
  readonly tax?: number;
  /** The date the Invoice Item ended, based on month. */
  readonly to?: string;
  /** The price of this Item after taxes in US Dollars. */
  readonly total?: number;
  /** The type of service, ether `hourly` or `misc`. */
  readonly type?: InvoiceItemType;
  /** The monthly service fee in US Dollars for this Item. */
  readonly unit_price?: string;
}

export type InvoiceTaxSummaryItem = {
  /** The source of this tax subtotal. */
  name?: string;
  /** The amount of tax subtotal attributable to this source. */
  tax?: number;
};

/**
 * `akamai`: This Invoice was generated according to the terms of an agreement between the customer and Akamai.

`linode`: This Invoice was generated according to the default terms, prices, and discounts.

 */
export type InvoiceBillingSource = typeof InvoiceBillingSource[keyof typeof InvoiceBillingSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceBillingSource = {
  akamai: 'akamai',
  linode: 'linode',
} as const;

/**
 * Account Invoice object
 */
export interface Invoice {
  /** `akamai`: This Invoice was generated according to the terms of an agreement between the customer and Akamai.

`linode`: This Invoice was generated according to the default terms, prices, and discounts.
 */
  readonly billing_source?: InvoiceBillingSource;
  /** When this Invoice was generated. */
  readonly date?: string;
  /** The Invoice's unique ID. */
  readonly id?: number;
  /** The Invoice's display label. */
  readonly label?: string;
  /** The amount of the Invoice before taxes in US Dollars. */
  readonly subtotal?: number;
  /** The amount of tax levied on the Invoice in US Dollars. */
  readonly tax?: number;
  /** The amount of tax broken down into subtotals by source. */
  readonly tax_summary?: InvoiceTaxSummaryItem[];
  /** The amount of the Invoice after taxes in US Dollars. */
  readonly total?: number;
}

/**
 * How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.

 */
export type ImageType = typeof ImageType[keyof typeof ImageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageType = {
  manual: 'manual',
  automatic: 'automatic',
} as const;

/**
 * The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.

 */
export type ImageStatus = typeof ImageStatus[keyof typeof ImageStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageStatus = {
  creating: 'creating',
  pending_upload: 'pending_upload',
  available: 'available',
} as const;

/**
 * Image object
 */
export interface Image {
  /** A list containing the following possible capabilities of this Image:

`cloud-init`: This Image supports cloud-init with [Metadata](/docs/products/compute/compute-instances/guides/metadata/). Only applies to public Images.
 */
  readonly capabilities?: string[];
  /** When this Image was created. */
  readonly created?: string;
  /** The name of the User who created this Image, or "linode" for public Images.
 */
  readonly created_by?: string;
  /** Whether or not this Image is deprecated. Will only be true for deprecated public Images.
 */
  readonly deprecated?: boolean;
  /** A detailed description of this Image. */
  description?: string | null;
  /** The date of the public Image's planned end of life. `None` for private Images.
 */
  readonly eol?: string;
  /** Only Images created automatically from a deleted Linode (type=automatic) will expire.
 */
  readonly expiry?: string | null;
  /** The unique ID of this Image. */
  readonly id?: string;
  /** True if the Image is a public distribution image. False if Image is private Account-specific Image. */
  readonly is_public?: boolean;
  /** A short description of the Image.
 */
  label?: string;
  /** The minimum size this Image needs to deploy. Size is in MB.
 */
  readonly size?: number;
  /** The current status of this Image.

Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.
 */
  readonly status?: ImageStatus;
  /** How the Image was created.

"Manual" Images can be created at any time.

"Automatic" Images are created automatically from a deleted Linode.
 */
  readonly type?: ImageType;
  /** When this Image was last updated. */
  readonly updated?: string;
  /** The upstream distribution vendor. `None` for private Images.
 */
  readonly vendor?: string;
}

/**
 * A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.

 */
export interface GrantsResponse {
  /** The grants this User has for each Database that is owned by this Account.
 */
  database?: GrantsResponseDatabaseItem[];
  /** The grants this User has for each Domain that is owned by this Account.
 */
  domain?: GrantsResponseDomainItem[];
  /** A structure containing the Account-level grants a User has.
 */
  global?: GrantsResponseGlobal;
  /** The grants this User has for each Image that is owned by this Account.
 */
  image?: GrantsResponseImageItem[];
  /** The grants this User has for each Linode that is owned by this Account.
 */
  linode?: GrantsResponseLinodeItem[];
  /** The grants this User has for each Longview Client that is owned by this Account.
 */
  longview?: GrantsResponseLongviewItem[];
  /** The grants this User has for each NodeBalancer that is owned by this Account.
 */
  nodebalancer?: GrantsResponseNodebalancerItem[];
  /** The grants this User has for each StackScript that is owned by this Account.
 */
  stackscript?: GrantsResponseStackscriptItem[];
  /** The grants this User has for each Block Storage Volume that is owned by this Account.
 */
  volume?: GrantsResponseVolumeItem[];
}

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GrantsResponseVolumeItemPermissions = typeof GrantsResponseVolumeItemPermissions[keyof typeof GrantsResponseVolumeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantsResponseVolumeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GrantsResponseVolumeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GrantsResponseVolumeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GrantsResponseStackscriptItemPermissions = typeof GrantsResponseStackscriptItemPermissions[keyof typeof GrantsResponseStackscriptItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantsResponseStackscriptItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GrantsResponseStackscriptItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GrantsResponseStackscriptItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GrantsResponseNodebalancerItemPermissions = typeof GrantsResponseNodebalancerItemPermissions[keyof typeof GrantsResponseNodebalancerItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantsResponseNodebalancerItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GrantsResponseNodebalancerItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GrantsResponseNodebalancerItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GrantsResponseLongviewItemPermissions = typeof GrantsResponseLongviewItemPermissions[keyof typeof GrantsResponseLongviewItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantsResponseLongviewItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GrantsResponseLongviewItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GrantsResponseLongviewItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GrantsResponseLinodeItemPermissions = typeof GrantsResponseLinodeItemPermissions[keyof typeof GrantsResponseLinodeItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantsResponseLinodeItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GrantsResponseLinodeItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GrantsResponseLinodeItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GrantsResponseImageItemPermissions = typeof GrantsResponseImageItemPermissions[keyof typeof GrantsResponseImageItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantsResponseImageItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GrantsResponseImageItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GrantsResponseImageItemPermissions;
};

/**
 * The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.

 */
export type GrantsResponseGlobalAccountAccess = typeof GrantsResponseGlobalAccountAccess[keyof typeof GrantsResponseGlobalAccountAccess];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantsResponseGlobalAccountAccess = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * A structure containing the Account-level grants a User has.

 */
export type GrantsResponseGlobal = {
  /** The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
 */
  account_access?: GrantsResponseGlobalAccountAccess;
  /** if true, this User may add Managed Databases. */
  add_databases?: boolean;
  /** If true, this User may add Domains. */
  add_domains?: boolean;
  /** If true, this User may add Firewalls. */
  add_firewalls?: boolean;
  /** If true, this User may add Images. */
  add_images?: boolean;
  /** If true, this User may create Linodes. */
  add_linodes?: boolean;
  /** If true, this User may create Longview clients and view the current plan. */
  add_longview?: boolean;
  /** If true, this User may add NodeBalancers. */
  add_nodebalancers?: boolean;
  /** If true, this User may add StackScripts. */
  add_stackscripts?: boolean;
  /** If true, this User may add Volumes. */
  add_volumes?: boolean;
  /** If true, this User may cancel the entire Account. */
  cancel_account?: boolean;
  /** If true, this User may manage the Account's Longview subscription. */
  longview_subscription?: boolean;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GrantsResponseDomainItemPermissions = typeof GrantsResponseDomainItemPermissions[keyof typeof GrantsResponseDomainItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantsResponseDomainItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GrantsResponseDomainItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GrantsResponseDomainItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GrantsResponseDatabaseItemPermissions = typeof GrantsResponseDatabaseItemPermissions[keyof typeof GrantsResponseDatabaseItemPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantsResponseDatabaseItemPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export type GrantsResponseDatabaseItem = {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GrantsResponseDatabaseItemPermissions;
};

/**
 * The level of access this User has to this entity.  If null, this User has no access.

 */
export type GrantPermissions = typeof GrantPermissions[keyof typeof GrantPermissions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrantPermissions = {
  read_only: 'read_only',
  read_write: 'read_write',
  null: null,
} as const;

/**
 * Represents the level of access a restricted User has to a specific resource on the Account.

 */
export interface Grant {
  /** The ID of the entity this grant applies to.
 */
  id?: number;
  /** The current label of the entity this grant applies to, for display purposes.
 */
  readonly label?: string;
  /** The level of access this User has to this entity.  If null, this User has no access.
 */
  permissions?: GrantPermissions;
}

/**
 * The entity's type.
 */
export type FirewallDevicesEntityType = typeof FirewallDevicesEntityType[keyof typeof FirewallDevicesEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallDevicesEntityType = {
  linode: 'linode',
  nodebalancer: 'nodebalancer',
} as const;

/**
 * The compute service that this Firewall has been applied to.

 */
export type FirewallDevicesEntity = {
  /** The entity's ID */
  readonly id?: number;
  /** The entity's label. */
  readonly label?: string;
  /** The entity's type. */
  readonly type?: FirewallDevicesEntityType;
  /** The API URL path you can use to access this entity.
 */
  readonly url?: string;
};

/**
 * Associates a Firewall with a Linode or NodeBalancer service. A Firewall can be assigned to a single entity at a time. Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.

 */
export interface FirewallDevices {
  /** When this Device was created.
 */
  readonly created?: string;
  /** The compute service that this Firewall has been applied to.
 */
  readonly entity?: FirewallDevicesEntity;
  /** The Device's unique ID
 */
  id?: number;
  /** When this Device was last updated.
 */
  readonly updated?: string;
}

/**
 * The type of network traffic affected by this rule.

 */
export type FirewallRuleConfigProtocol = typeof FirewallRuleConfigProtocol[keyof typeof FirewallRuleConfigProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallRuleConfigProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type FirewallRuleConfigAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type FirewallRuleConfigAction = typeof FirewallRuleConfigAction[keyof typeof FirewallRuleConfigAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallRuleConfigAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export interface FirewallRuleConfig {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: FirewallRuleConfigAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: FirewallRuleConfigAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: FirewallRuleConfigProtocol;
}

/**
 * The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.

 */
export type FirewallStatus = typeof FirewallStatus[keyof typeof FirewallStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallStatus = {
  enabled: 'enabled',
  disabled: 'disabled',
  deleted: 'deleted',
} as const;

/**
 * A resource that controls incoming and outgoing network traffic to a compute service. Only one enabled Firewall can be attached to a particular service at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a service. Currently, Firewalls can assigned to Linode compute instances and NodeBalancers.

 */
export interface Firewall {
  /** When this Firewall was created.
 */
  readonly created?: string;
  /** The Firewall's unique ID.
 */
  readonly id?: number;
  /** The Firewall's label, for display purposes only.

Firewall labels have the following constraints:

  * Must begin and end with an alphanumeric character.
  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
  * Must be between 3 and 32 characters.
  * Must be unique.
 */
  label?: string;
  /** The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
 */
  rules?: FirewallRules;
  /** The status of this Firewall.

  * When a Firewall is first created its status is `enabled`.
  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
 */
  readonly status?: FirewallStatus;
  /** An array of tags applied to this object. Tags are for organizational purposes only.
 */
  tags?: string[];
  /** When this Firewall was last updated.
 */
  readonly updated?: string;
}

/**
 * The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.

 */
export type FirewallRulesOutboundPolicy = typeof FirewallRulesOutboundPolicy[keyof typeof FirewallRulesOutboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallRulesOutboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The type of network traffic affected by this rule.

 */
export type FirewallRulesOutboundItemProtocol = typeof FirewallRulesOutboundItemProtocol[keyof typeof FirewallRulesOutboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallRulesOutboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type FirewallRulesOutboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type FirewallRulesOutboundItemAction = typeof FirewallRulesOutboundItemAction[keyof typeof FirewallRulesOutboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallRulesOutboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type FirewallRulesOutboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: FirewallRulesOutboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: FirewallRulesOutboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: FirewallRulesOutboundItemProtocol;
};

/**
 * The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.

 */
export type FirewallRulesInboundPolicy = typeof FirewallRulesInboundPolicy[keyof typeof FirewallRulesInboundPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallRulesInboundPolicy = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * The inbound and outbound access rules to apply to the Firewall.

A Firewall may have up to 25 rules across its inbound and outbound rulesets.

Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.

 */
export type FirewallRules = {
  /** The inbound rules for the firewall, as a JSON array.
 */
  inbound?: FirewallRulesInboundItem[];
  /** The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
 */
  inbound_policy?: FirewallRulesInboundPolicy;
  /** The outbound rules for the firewall, as a JSON array.
 */
  outbound?: FirewallRulesOutboundItem[];
  /** The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
 */
  outbound_policy?: FirewallRulesOutboundPolicy;
};

/**
 * The type of network traffic affected by this rule.

 */
export type FirewallRulesInboundItemProtocol = typeof FirewallRulesInboundItemProtocol[keyof typeof FirewallRulesInboundItemProtocol];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallRulesInboundItemProtocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  ICMP: 'ICMP',
  IPENCAP: 'IPENCAP',
} as const;

/**
 * The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.

 */
export type FirewallRulesInboundItemAddresses = {
  /** A list of IPv4 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "0.0.0.0/0" is included in this list, all IPv4 addresses are affected by this rule.
 */
  ipv4?: string[];
  /** A list of IPv6 addresses or networks. Addresses must be in IP/mask format. Must not be an empty list.

If "::/0" is included in this list, all IPv6 addresses are affected by this rule.
 */
  ipv6?: string[];
};

/**
 * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.

 */
export type FirewallRulesInboundItemAction = typeof FirewallRulesInboundItemAction[keyof typeof FirewallRulesInboundItemAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FirewallRulesInboundItemAction = {
  ACCEPT: 'ACCEPT',
  DROP: 'DROP',
} as const;

/**
 * One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.

 */
export type FirewallRulesInboundItem = {
  /** Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
 */
  action?: FirewallRulesInboundItemAction;
  /** The IPv4 and/or IPv6 addresses affected by this rule. A Rule can have up to 255 total addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.

Must contain `ipv4`, `ipv6`, or both.
 */
  addresses?: FirewallRulesInboundItemAddresses;
  /** Used to describe this rule. For display purposes only.
 */
  description?: string;
  /** Used to identify this rule. For display purposes only.
 */
  label?: string;
  /** A string representing the port or ports affected by this rule:

- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
- If no ports are configured, all ports are affected.
- Only allowed for the TCP and UDP protocols. Ports are not allowed for the ICMP and IPENCAP protocols.
 */
  ports?: string | null;
  /** The type of network traffic affected by this rule.
 */
  protocol?: FirewallRulesInboundItemProtocol;
};

/**
 * The current status of this Event.
 */
export type EventStatus = typeof EventStatus[keyof typeof EventStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventStatus = {
  failed: 'failed',
  finished: 'finished',
  notification: 'notification',
  scheduled: 'scheduled',
  started: 'started',
} as const;

/**
 * Detailed information about the Event's secondary entity, which provides additional information
for events such as, but not limited to, `linode_boot`, `linode_reboot`, `linode_create`, and `linode_clone` Event actions.

 */
export type EventSecondaryEntity = {
  /** The ID of the object that is the secondary entity.
 */
  readonly id?: string;
  /** The label of this object.
 */
  readonly label?: string;
  /** The type of entity that is being referenced by the Event.
 */
  readonly type?: string;
  /** The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
 */
  readonly url?: string;
};

/**
 * The type of entity that is being referenced by the Event.

 */
export type EventEntityType = typeof EventEntityType[keyof typeof EventEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventEntityType = {
  account: 'account',
  backups: 'backups',
  community: 'community',
  disks: 'disks',
  domain: 'domain',
  entity_transfer: 'entity_transfer',
  firewall: 'firewall',
  image: 'image',
  ipaddress: 'ipaddress',
  linode: 'linode',
  longview: 'longview',
  managed_service: 'managed_service',
  nodebalancer: 'nodebalancer',
  oauth_client: 'oauth_client',
  profile: 'profile',
  stackscript: 'stackscript',
  tag: 'tag',
  ticket: 'ticket',
  token: 'token',
  user: 'user',
  user_ssh_key: 'user_ssh_key',
  volume: 'volume',
} as const;

/**
 * Detailed information about the Event's entity, including ID, type, label, and URL used to access it.

 */
export type EventEntity = {
  /** The unique ID for an Event's entity.


Some Event entities do not have IDs associated with them, so they
will not be returned when filtering by ID. These Events include:
  * `account`
  * `profile`

Entities for some Events are assigned the ID of the Linode they correspond to.
When filtering by ID for these Events, use the corresponding Linode's ID.
These Events include:
  * `disks`
  * `backups`


Tag Events use a tag's name for the entity ID field. When filtering by ID
for tag Events, supply the name of the tag.
 */
  readonly id?: number;
  /** The current label of this object. The label may reflect changes that occur with this Event.
 */
  readonly label?: string;
  /** The type of entity that is being referenced by the Event.
 */
  readonly type?: EventEntityType;
  /** The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
 */
  readonly url?: string;
};

/**
 * The action that caused this Event. New actions may be added in the future.

 */
export type EventAction = typeof EventAction[keyof typeof EventAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventAction = {
  account_update: 'account_update',
  account_settings_update: 'account_settings_update',
  backups_enable: 'backups_enable',
  backups_cancel: 'backups_cancel',
  backups_restore: 'backups_restore',
  community_question_reply: 'community_question_reply',
  community_like: 'community_like',
  credit_card_updated: 'credit_card_updated',
  disk_create: 'disk_create',
  disk_delete: 'disk_delete',
  disk_update: 'disk_update',
  disk_duplicate: 'disk_duplicate',
  disk_imagize: 'disk_imagize',
  disk_resize: 'disk_resize',
  dns_record_create: 'dns_record_create',
  dns_record_delete: 'dns_record_delete',
  dns_record_update: 'dns_record_update',
  dns_zone_create: 'dns_zone_create',
  dns_zone_delete: 'dns_zone_delete',
  dns_zone_import: 'dns_zone_import',
  dns_zone_update: 'dns_zone_update',
  entity_transfer_accept: 'entity_transfer_accept',
  entity_transfer_cancel: 'entity_transfer_cancel',
  entity_transfer_create: 'entity_transfer_create',
  entity_transfer_fail: 'entity_transfer_fail',
  entity_transfer_stale: 'entity_transfer_stale',
  firewall_create: 'firewall_create',
  firewall_delete: 'firewall_delete',
  firewall_disable: 'firewall_disable',
  firewall_enable: 'firewall_enable',
  firewall_update: 'firewall_update',
  firewall_device_add: 'firewall_device_add',
  firewall_device_remove: 'firewall_device_remove',
  host_reboot: 'host_reboot',
  image_delete: 'image_delete',
  image_update: 'image_update',
  image_upload: 'image_upload',
  ipaddress_update: 'ipaddress_update',
  lassie_reboot: 'lassie_reboot',
  lish_boot: 'lish_boot',
  linode_addip: 'linode_addip',
  linode_boot: 'linode_boot',
  linode_clone: 'linode_clone',
  linode_create: 'linode_create',
  linode_delete: 'linode_delete',
  linode_update: 'linode_update',
  linode_deleteip: 'linode_deleteip',
  linode_migrate: 'linode_migrate',
  linode_migrate_datacenter: 'linode_migrate_datacenter',
  linode_migrate_datacenter_create: 'linode_migrate_datacenter_create',
  linode_mutate: 'linode_mutate',
  linode_mutate_create: 'linode_mutate_create',
  linode_reboot: 'linode_reboot',
  linode_rebuild: 'linode_rebuild',
  linode_resize: 'linode_resize',
  linode_resize_create: 'linode_resize_create',
  linode_shutdown: 'linode_shutdown',
  linode_snapshot: 'linode_snapshot',
  linode_config_create: 'linode_config_create',
  linode_config_delete: 'linode_config_delete',
  linode_config_update: 'linode_config_update',
  lke_node_create: 'lke_node_create',
  longviewclient_create: 'longviewclient_create',
  longviewclient_delete: 'longviewclient_delete',
  longviewclient_update: 'longviewclient_update',
  managed_disabled: 'managed_disabled',
  managed_enabled: 'managed_enabled',
  managed_service_create: 'managed_service_create',
  managed_service_delete: 'managed_service_delete',
  nodebalancer_create: 'nodebalancer_create',
  nodebalancer_delete: 'nodebalancer_delete',
  nodebalancer_update: 'nodebalancer_update',
  nodebalancer_config_create: 'nodebalancer_config_create',
  nodebalancer_config_delete: 'nodebalancer_config_delete',
  nodebalancer_config_update: 'nodebalancer_config_update',
  nodebalancer_node_create: 'nodebalancer_node_create',
  nodebalancer_node_delete: 'nodebalancer_node_delete',
  nodebalancer_node_update: 'nodebalancer_node_update',
  oauth_client_create: 'oauth_client_create',
  oauth_client_delete: 'oauth_client_delete',
  oauth_client_secret_reset: 'oauth_client_secret_reset',
  oauth_client_update: 'oauth_client_update',
  obj_access_key_create: 'obj_access_key_create',
  obj_access_key_delete: 'obj_access_key_delete',
  obj_access_key_update: 'obj_access_key_update',
  password_reset: 'password_reset',
  payment_method_add: 'payment_method_add',
  payment_submitted: 'payment_submitted',
  profile_update: 'profile_update',
  stackscript_create: 'stackscript_create',
  stackscript_delete: 'stackscript_delete',
  stackscript_update: 'stackscript_update',
  stackscript_publicize: 'stackscript_publicize',
  stackscript_revise: 'stackscript_revise',
  tag_create: 'tag_create',
  tag_delete: 'tag_delete',
  tfa_disabled: 'tfa_disabled',
  tfa_enabled: 'tfa_enabled',
  ticket_attachment_upload: 'ticket_attachment_upload',
  ticket_create: 'ticket_create',
  ticket_update: 'ticket_update',
  token_create: 'token_create',
  token_delete: 'token_delete',
  token_update: 'token_update',
  user_create: 'user_create',
  user_update: 'user_update',
  user_delete: 'user_delete',
  user_ssh_key_add: 'user_ssh_key_add',
  user_ssh_key_delete: 'user_ssh_key_delete',
  user_ssh_key_update: 'user_ssh_key_update',
  vlan_attach: 'vlan_attach',
  vlan_detach: 'vlan_detach',
  volume_attach: 'volume_attach',
  volume_clone: 'volume_clone',
  volume_create: 'volume_create',
  volume_delete: 'volume_delete',
  volume_update: 'volume_update',
  volume_detach: 'volume_detach',
  volume_resize: 'volume_resize',
} as const;

/**
 * A collection of Event objects. An Event is an action taken against an entity related to your Account. For example, booting a Linode would create an Event.
The Events returned depends on your grants.

 */
export interface Event {
  /** The action that caused this Event. New actions may be added in the future.
 */
  readonly action?: EventAction;
  /** When this Event was created. */
  readonly created?: string;
  /** The total duration in seconds that it takes for the Event to complete.
 */
  readonly duration?: number;
  /** Detailed information about the Event's entity, including ID, type, label, and URL used to access it.
 */
  readonly entity?: EventEntity;
  /** The unique ID of this Event. */
  readonly id?: number;
  /** Provides additional information about the event. Additional information may include, but is not limited to, a more detailed representation of events which can help diagnose non-obvious failures.
 */
  message?: string | null;
  /** A percentage estimating the amount of time remaining for an Event.
Returns `null` for notification events.
 */
  readonly percent_complete?: number;
  /** The rate of completion of the Event. Only some Events will return rate; for example, migration and resize Events.
 */
  readonly rate?: string;
  /** If this Event has been read. */
  readonly read?: boolean;
  /** Detailed information about the Event's secondary entity, which provides additional information
for events such as, but not limited to, `linode_boot`, `linode_reboot`, `linode_create`, and `linode_clone` Event actions.
 */
  readonly secondary_entity?: EventSecondaryEntity;
  /** If this Event has been seen. */
  readonly seen?: boolean;
  /** The current status of this Event. */
  readonly status?: EventStatus;
  /** The estimated time remaining until the completion of this Event. This value is only returned for some in-progress migration events. For all other in-progress events, the `percent_complete` attribute will indicate about how much more work is to be done.
 */
  readonly time_remaining?: string | null;
  /** The username of the User who caused the Event.
 */
  readonly username?: string | null;
}

/**
 * An object for describing a single error that occurred during the processing of a request.

 */
export interface ErrorObject {
  /** The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
 */
  field?: string;
  /** What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
 */
  reason?: string;
}

/**
 * The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or canceled.

 */
export type EntityTransferStatus = typeof EntityTransferStatus[keyof typeof EntityTransferStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EntityTransferStatus = {
  accepted: 'accepted',
  canceled: 'canceled',
  completed: 'completed',
  failed: 'failed',
  pending: 'pending',
  stale: 'stale',
} as const;

/**
 * A collection of the entities to include in this transfer request, separated by type.

 */
export type EntityTransferEntities = {
  /** An array containing the IDs of each of the Linodes included in this transfer.
 */
  linodes?: number[];
};

/**
 * An object representing an Entity Transfer.

 */
export interface EntityTransfer {
  /** When this transfer was created.
 */
  created?: string;
  /** A collection of the entities to include in this transfer request, separated by type.
 */
  entities?: EntityTransferEntities;
  /** When this transfer expires. Transfers will automatically expire 24 hours after creation.
 */
  expiry?: string;
  /** If the requesting account created this transfer.
 */
  is_sender?: boolean;
  /** The status of the transfer request.

`accepted`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.

`canceled`: The transfer has been canceled by the sender.

`completed`: The transfer has completed successfully.

`failed`: The transfer has failed after initiation.

`pending`: The transfer is ready to be accepted.

`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or canceled.
 */
  status?: EntityTransferStatus;
  /** The token used to identify and accept or cancel this transfer.
 */
  token?: string;
  /** When this transfer was last updated.
 */
  updated?: string;
}

/**
 * The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).

 */
export type DomainRecordType = typeof DomainRecordType[keyof typeof DomainRecordType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DomainRecordType = {
  A: 'A',
  AAAA: 'AAAA',
  NS: 'NS',
  MX: 'MX',
  CNAME: 'CNAME',
  TXT: 'TXT',
  SRV: 'SRV',
  PTR: 'PTR',
  CAA: 'CAA',
} as const;

/**
 * The tag portion of a CAA record. Only valid and required for CAA record requests.

 */
export type DomainRecordTag = typeof DomainRecordTag[keyof typeof DomainRecordTag];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DomainRecordTag = {
  issue: 'issue',
  issuewild: 'issuewild',
  iodef: 'iodef',
  null: null,
} as const;

/**
 * A single record on a Domain.

 */
export interface DomainRecord {
  /** When this Domain Record was created. */
  readonly created?: string;
  /** This Record's unique ID. */
  readonly id?: number;
  /** The name of this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The hostname or FQDN of the Record.

`NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.

`MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`
Domain.
* The left-most subdomain component may be an asterix (`*`) to designate a wildcard subdomain.
* Other subdomain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* Must be an empty string (`""`) for a Null MX Record.

`CNAME`: The hostname. Must be unique. Required.

`TXT`: The hostname.

`SRV`: Unused. Use the `service` property to set the service name for this record.

`CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.

`PTR`: See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).
 */
  name?: string;
  /** The port this Record points to. Only valid and required for SRV record requests.
 */
  port?: number;
  /** The priority of the target host for this Record. Lower values are preferred. Only valid for
MX and SRV record requests. Required for SRV record requests.

Defaults to `0` for MX record requests. Must be `0` for Null MX records.
 */
  priority?: number;
  /** The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.
 */
  protocol?: string | null;
  /** The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.
 */
  service?: string | null;
  /** The tag portion of a CAA record. Only valid and required for CAA record requests.
 */
  tag?: DomainRecordTag;
  /** The target for this Record. For requests, this property's actual usage and whether it is required depends
on the type of record this represents:

`A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.

`NS`: The name server. Must be a valid domain. Required.

`MX`: The mail server. Must be a valid domain unless creating a Null MX Record. Required.
* Must have less than 254 total characters.
* The left-most domain component may be an asterix (`*`) to designate a wildcard domain.
* Other domain components must only contain letters, digits, and hyphens, start with a letter, end with a letter or digit, and contain less than 64 characters.
* To create a [Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first [remove](/docs/api/domains/#domain-record-delete) any additional MX records, then create an MX record with empty strings (`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created.

`CNAME`: The alias. Must be a valid domain. Required.

`TXT`: The value. Required.

`SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.
To configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for
`example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a
target set to `sample.com`. Required.

`CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`
tag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:
  * `issue`: The domain of your certificate issuer. Must include a valid domain. May include additional parameters separated with semicolons (`;`), for example: `www.example.com; foo=bar`
  * `issuewild`: The domain of your wildcard certificate issuer. Must be a valid domain and must not start with an asterisk (`*`).
  * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.

`PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS
(rDNS)](/docs/guides/configure-rdns/).

With the exception of A, AAAA, and CAA records, this field accepts a trailing period.
 */
  target?: string;
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
 */
  ttl_sec?: number;
  /** The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).
 */
  type?: DomainRecordType;
  /** When this Domain Record was last updated. */
  readonly updated?: string;
  /** The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.
 */
  weight?: number;
}

/**
 * Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").

 */
export type DomainType = typeof DomainType[keyof typeof DomainType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DomainType = {
  master: 'master',
  slave: 'slave',
} as const;

/**
 * Used to control whether this Domain is currently being rendered.

 */
export type DomainStatus = typeof DomainStatus[keyof typeof DomainStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DomainStatus = {
  disabled: 'disabled',
  active: 'active',
} as const;

/**
 * A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.

 */
export interface Domain {
  /** The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
 */
  axfr_ips?: string[];
  /** A description for this Domain. This is for display purposes only.
 */
  description?: string;
  /** The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
 */
  domain?: string;
  /** The amount of time in seconds that may pass before this Domain is no longer
authoritative.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 1209600.
 */
  expire_sec?: number;
  /**
   * The group this Domain belongs to.  This is for display purposes only.

   * @deprecated
   */
  group?: string;
  /** This Domain's unique ID */
  readonly id?: number;
  /** The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
 */
  master_ips?: string[];
  /** The amount of time in seconds before this Domain should be refreshed.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  refresh_sec?: number;
  /** The interval, in seconds, at which a failed refresh should be retried.

* Valid values are
0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

* Any other value is rounded up to the nearest valid value.

* A value of 0 is equivalent to the default value of 14400.
 */
  retry_sec?: number;
  /** Start of Authority email address. This is required for `type` master Domains.
 */
  soa_email?: string;
  /** Used to control whether this Domain is currently being rendered.
 */
  status?: DomainStatus;
  /** An array of tags applied to this object.  Tags are for organizational purposes only.
 */
  tags?: string[];
  /** "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
* Any other value is rounded up to the nearest valid value.
* A value of 0 is equivalent to the default value of 86400.
 */
  ttl_sec?: number;
  /** Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
 */
  type?: DomainType;
}

/**
 * This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.

 */
export type DiskRequestStackscriptData = { [key: string]: any };

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type DiskRequestFilesystem = typeof DiskRequestFilesystem[keyof typeof DiskRequestFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiskRequestFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

/**
 * Disk object request.
 */
export interface DiskRequest {
  /** A list of public SSH keys that will be automatically appended
to the root user's `~/.ssh/authorized_keys` file when deploying from an Image.
 */
  authorized_keys?: string[];
  /** A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.
 */
  authorized_users?: string[];
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: DiskRequestFilesystem;
  /** An Image ID to deploy the Linode Disk from.

Access the Images List ([GET /images](/docs/api/images/#images-list)) endpoint with authentication to view
all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating
a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Access the User's
Grant Update ([PUT /account/users/{username}/grants](/docs/api/account/#users-grants-update)) endpoint to
adjust permissions for an Account Image.
 */
  image?: string;
  /** The Disk's label is for display purposes only.
 */
  label?: string;
  /** This sets the root user's password on a newly-created Linode Disk when deploying from an Image.

* **Required** when creating a Linode Disk from an Image, including when using a StackScript.

* Must meet a password strength score requirement that is calculated internally by the API.
If the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.
 */
  root_pass?: string;
  /** The size of the Disk in MB.

Images require a minimum size. Access the Image View ([GET /images/{imageID}](/docs/api/images/#image-view)) endpoint to view its size.
 */
  size?: number;
  /** This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.

This field is required to be valid JSON.

Total length cannot exceed 65,535 characters.
 */
  stackscript_data?: DiskRequestStackscriptData;
  /** A StackScript ID that will cause the referenced StackScript to be run during
deployment of this Linode. A compatible `image` is required to use a
StackScript. To get a list of available StackScript and their permitted Images
see [/stackscripts](/docs/api/stackscripts/#stackscripts-list).
This field cannot be used when deploying from a Backup or a Private Image.
 */
  stackscript_id?: number;
}

/**
 * A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.

 */
export type DiskStatus = typeof DiskStatus[keyof typeof DiskStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiskStatus = {
  ready: 'ready',
  not_ready: 'not ready',
  deleting: 'deleting',
} as const;

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type DiskFilesystem = typeof DiskFilesystem[keyof typeof DiskFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiskFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export interface Disk {
  /** When this Disk was created. */
  readonly created?: string;
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: DiskFilesystem;
  /** This Disk's ID which must be provided for all operations impacting this Disk.
 */
  readonly id?: number;
  /** The Disk's label is for display purposes only.
 */
  label?: string;
  /** The size of the Disk in MB. */
  size?: number;
  /** A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.
 */
  readonly status?: DiskStatus;
  /** When this Disk was last updated. */
  readonly updated?: string;
}

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type DevicesSdh = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type DevicesSdg = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type DevicesSdf = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type DevicesSde = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type DevicesSdd = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type DevicesSdc = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type DevicesSdb = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export type DevicesSda = {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
};

/**
 * A dictionary of device disks to use as a device map in a Linode's configuration profile.
* An empty device disk dictionary or a dictionary with empty values for device slots is allowed.
* If no devices are specified, booting from this configuration will hold until a device exists that allows the boot process to start.

 */
export interface Devices {
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sda?: DevicesSda;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdb?: DevicesSdb;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdc?: DevicesSdc;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdd?: DevicesSdd;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sde?: DevicesSde;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdf?: DevicesSdf;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdg?: DevicesSdg;
  /** Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.
 */
  sdh?: DevicesSdh;
}

/**
 * Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be null.
Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.

 */
export interface Device {
  /** The Disk ID, or `null` if a Volume is assigned to this slot. */
  disk_id?: number;
  /** The Volume ID, or `null` if a Disk is assigned to this slot. */
  volume_id?: number;
}

/**
 * The number of nodes for the Managed Database cluster for this subscription tier.
 */
export type DatabaseTypeEngineQuantity = typeof DatabaseTypeEngineQuantity[keyof typeof DatabaseTypeEngineQuantity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseTypeEngineQuantity = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

/**
 * Cost in US dollars, broken down into hourly and monthly charges.
 */
export type DatabaseTypeEnginePrice = {
  /** Cost (in US dollars) per hour for this subscription tier. */
  hourly?: number;
  /** Maximum cost (in US dollars) per month for this subscription tier. */
  monthly?: number;
};

export interface DatabaseTypeEngine {
  /** Cost in US dollars, broken down into hourly and monthly charges. */
  price?: DatabaseTypeEnginePrice;
  /** The number of nodes for the Managed Database cluster for this subscription tier. */
  quantity?: DatabaseTypeEngineQuantity;
}

/**
 * Managed Database plan type object.
 */
export interface DatabaseType {
  /** The compute class category. */
  class?: string;
  /** Whether this Database plan type has been deprecated and is no longer available. */
  deprecated?: boolean;
  /** The amount of disk space set aside for Databases of this plan type. The value is represented in megabytes. */
  disk?: number;
  engines?: DatabaseTypeEngines;
  /** The ID representing the Managed Database node plan type. */
  readonly id?: string;
  /** A human-readable string that describes each plan type. For display purposes only. */
  readonly label?: string;
  /** The amount of RAM allocated to Database created of this plan type. The value is represented in megabytes. */
  memory?: number;
  /** The integer of number CPUs allocated to databases of this plan type. */
  vcpus?: number;
}

/**
 * The number of nodes for the Managed Database cluster for this subscription tier.
 */
export type DatabaseTypeEnginesPostgresqlItemQuantity = typeof DatabaseTypeEnginesPostgresqlItemQuantity[keyof typeof DatabaseTypeEnginesPostgresqlItemQuantity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseTypeEnginesPostgresqlItemQuantity = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

/**
 * Cost in US dollars, broken down into hourly and monthly charges.
 */
export type DatabaseTypeEnginesPostgresqlItemPrice = {
  /** Cost (in US dollars) per hour for this subscription tier. */
  hourly?: number;
  /** Maximum cost (in US dollars) per month for this subscription tier. */
  monthly?: number;
};

export type DatabaseTypeEnginesPostgresqlItem = {
  /** Cost in US dollars, broken down into hourly and monthly charges. */
  price?: DatabaseTypeEnginesPostgresqlItemPrice;
  /** The number of nodes for the Managed Database cluster for this subscription tier. */
  quantity?: DatabaseTypeEnginesPostgresqlItemQuantity;
};

export type DatabaseTypeEngines = {
  /** Pricing details for MySQL Managed Databases. */
  mysql?: DatabaseTypeEnginesMysqlItem[];
  /** Pricing details for PostgreSQL Managed Databases. */
  postgresql?: DatabaseTypeEnginesPostgresqlItem[];
};

/**
 * The number of nodes for the Managed Database cluster for this subscription tier.
 */
export type DatabaseTypeEnginesMysqlItemQuantity = typeof DatabaseTypeEnginesMysqlItemQuantity[keyof typeof DatabaseTypeEnginesMysqlItemQuantity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseTypeEnginesMysqlItemQuantity = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

/**
 * Cost in US dollars, broken down into hourly and monthly charges.
 */
export type DatabaseTypeEnginesMysqlItemPrice = {
  /** Cost (in US dollars) per hour for this subscription tier. */
  hourly?: number;
  /** Maximum cost (in US dollars) per month for this subscription tier. */
  monthly?: number;
};

export type DatabaseTypeEnginesMysqlItem = {
  /** Cost in US dollars, broken down into hourly and monthly charges. */
  price?: DatabaseTypeEnginesMysqlItemPrice;
  /** The number of nodes for the Managed Database cluster for this subscription tier. */
  quantity?: DatabaseTypeEnginesMysqlItemQuantity;
};

/**
 * Managed Database SSL object.
 */
export interface DatabaseSSL {
  /** The base64-encoded SSL CA certificate for the Managed Database instance. */
  ca_certificate?: string;
}

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.

 */
export type DatabasePostgreSQLRequestReplicationType = typeof DatabasePostgreSQLRequestReplicationType[keyof typeof DatabasePostgreSQLRequestReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabasePostgreSQLRequestReplicationType = {
  none: 'none',
  asynch: 'asynch',
} as const;

/**
 * The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.

 */
export type DatabasePostgreSQLRequestReplicationCommitType = typeof DatabasePostgreSQLRequestReplicationCommitType[keyof typeof DatabasePostgreSQLRequestReplicationCommitType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabasePostgreSQLRequestReplicationCommitType = {
  on: 'on',
  local: 'local',
  remote_write: 'remote_write',
  remote_apply: 'remote_apply',
  off: 'off',
} as const;

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type DatabasePostgreSQLRequestClusterSize = typeof DatabasePostgreSQLRequestClusterSize[keyof typeof DatabasePostgreSQLRequestClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabasePostgreSQLRequestClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed PostgreSQL Database request object.
 */
export interface DatabasePostgreSQLRequest {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: DatabasePostgreSQLRequestClusterSize;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine in engine/version format. */
  engine: string;
  /** A unique, user-defined string referring to the Managed Database. */
  label: string;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region: string;
  /** The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.
 */
  replication_commit_type?: DatabasePostgreSQLRequestReplicationCommitType;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.
 */
  replication_type?: DatabasePostgreSQLRequestReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type: string;
}

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type DatabasePostgreSQLUpdatesFrequency = typeof DatabasePostgreSQLUpdatesFrequency[keyof typeof DatabasePostgreSQLUpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabasePostgreSQLUpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type DatabasePostgreSQLUpdates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: DatabasePostgreSQLUpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * The operating status of the Managed Database.
 */
export type DatabasePostgreSQLStatus = typeof DatabasePostgreSQLStatus[keyof typeof DatabasePostgreSQLStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabasePostgreSQLStatus = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.

 */
export type DatabasePostgreSQLReplicationType = typeof DatabasePostgreSQLReplicationType[keyof typeof DatabasePostgreSQLReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabasePostgreSQLReplicationType = {
  none: 'none',
  asynch: 'asynch',
} as const;

/**
 * The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.

 */
export type DatabasePostgreSQLReplicationCommitType = typeof DatabasePostgreSQLReplicationCommitType[keyof typeof DatabasePostgreSQLReplicationCommitType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabasePostgreSQLReplicationCommitType = {
  on: 'on',
  local: 'local',
  remote_write: 'remote_write',
  remote_apply: 'remote_apply',
  off: 'off',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type DatabasePostgreSQLHosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type DatabasePostgreSQLClusterSize = typeof DatabasePostgreSQLClusterSize[keyof typeof DatabasePostgreSQLClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabasePostgreSQLClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed PostgreSQL Databases object.
 */
export interface DatabasePostgreSQL {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: DatabasePostgreSQLClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: DatabasePostgreSQLHosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The synchronization level of the replicating server.

Must be `local` or `off` for the `asynch` replication type.
 */
  replication_commit_type?: DatabasePostgreSQLReplicationCommitType;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `asynch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` for a high availability cluster.
 */
  replication_type?: DatabasePostgreSQLReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: DatabasePostgreSQLStatus;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: DatabasePostgreSQLUpdates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
}

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.

 */
export type DatabaseMySQLRequestReplicationType = typeof DatabaseMySQLRequestReplicationType[keyof typeof DatabaseMySQLRequestReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseMySQLRequestReplicationType = {
  none: 'none',
  asynch: 'asynch',
  semi_synch: 'semi_synch',
} as const;

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type DatabaseMySQLRequestClusterSize = typeof DatabaseMySQLRequestClusterSize[keyof typeof DatabaseMySQLRequestClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseMySQLRequestClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed MySQL Database request object.
 */
export interface DatabaseMySQLRequest {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: DatabaseMySQLRequestClusterSize;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine in engine/version format. */
  engine: string;
  /** A unique, user-defined string referring to the Managed Database. */
  label: string;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region: string;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.
 */
  replication_type?: DatabaseMySQLRequestReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type: string;
}

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type DatabaseMySQLHosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type DatabaseMySQLClusterSize = typeof DatabaseMySQLClusterSize[keyof typeof DatabaseMySQLClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseMySQLClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * Managed MySQL Databases object.
 */
export interface DatabaseMySQL {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: DatabaseMySQLClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: string;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: DatabaseMySQLHosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The access port for this Managed Database. */
  port?: number;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.
 */
  replication_type?: DatabaseMySQLReplicationType;
  /** Whether to require SSL credentials to establish a connection to the Managed Database.

Use the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.
 */
  ssl_connection?: boolean;
  /** The operating status of the Managed Database. */
  readonly status?: DatabaseMySQLStatus;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: DatabaseMySQLUpdates;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  readonly version?: string;
}

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type DatabaseMySQLUpdatesFrequency = typeof DatabaseMySQLUpdatesFrequency[keyof typeof DatabaseMySQLUpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseMySQLUpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type DatabaseMySQLUpdates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: DatabaseMySQLUpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * The operating status of the Managed Database.
 */
export type DatabaseMySQLStatus = typeof DatabaseMySQLStatus[keyof typeof DatabaseMySQLStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseMySQLStatus = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The replication method used for the Managed Database.

Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

Must be `none` for a single node cluster.

Must be `asynch` or `semi_synch` for a high availability cluster.

 */
export type DatabaseMySQLReplicationType = typeof DatabaseMySQLReplicationType[keyof typeof DatabaseMySQLReplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseMySQLReplicationType = {
  none: 'none',
  asynch: 'asynch',
  semi_synch: 'semi_synch',
} as const;

/**
 * Managed Database engine object.
 */
export interface DatabaseEngine {
  /** The Managed Database engine type. */
  engine?: string;
  /** The Managed Database engine ID in engine/version format. */
  id?: string;
  /** The total disk size of the database in GB. */
  total_disk_size_gb?: number;
  /** The used space of the database in GB. */
  used_disk_size_gb?: number;
  /** The Managed Database engine version. */
  version?: string;
}

/**
 * Managed Database object for database credentials.
 */
export interface DatabaseCredentials {
  /** The randomly-generated root password for the Managed Database instance. */
  readonly password?: string;
  /** The root username for the Managed Database instance. */
  readonly username?: string;
}

/**
 * The Database cluster target.
If the Database is a high availability cluster, choosing `secondary` creates a snapshot backup of a replica node.

 */
export type DatabaseBackupSnapshotTarget = typeof DatabaseBackupSnapshotTarget[keyof typeof DatabaseBackupSnapshotTarget];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseBackupSnapshotTarget = {
  primary: 'primary',
  secondary: 'secondary',
} as const;

/**
 * Managed Database request object for snapshot backup.
 */
export interface DatabaseBackupSnapshot {
  /** The label for the Database snapshot backup.

* Must include only ASCII letters, numbers, or underscores.
* Must be unique among other backup labels for this Database.
 */
  label: string;
  /** The Database cluster target.
If the Database is a high availability cluster, choosing `secondary` creates a snapshot backup of a replica node.
 */
  target?: DatabaseBackupSnapshotTarget;
}

/**
 * The type of database backup, determined by how the backup was created.
 */
export type DatabaseBackupType = typeof DatabaseBackupType[keyof typeof DatabaseBackupType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseBackupType = {
  snapshot: 'snapshot',
  auto: 'auto',
} as const;

/**
 * A database backup object.
 */
export interface DatabaseBackup {
  /** A time value given in a combined date and time format that represents when the database backup was created. */
  created?: string;
  /** The ID of the database backup object. */
  id?: number;
  /** The database backup's label, for display purposes only.

Must include only ASCII letters or numbers.
 */
  label?: string;
  /** The type of database backup, determined by how the backup was created. */
  type?: DatabaseBackupType;
}

/**
 * Whether maintenance occurs on a weekly or monthly basis.
 */
export type DatabaseUpdatesFrequency = typeof DatabaseUpdatesFrequency[keyof typeof DatabaseUpdatesFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseUpdatesFrequency = {
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

/**
 * Configuration settings for automated patch update maintenance for the Managed Database.
 */
export type DatabaseUpdates = {
  /** The day to perform maintenance. 1=Monday, 2=Tuesday, etc. */
  day_of_week?: number;
  /** The maximum maintenance window time in hours. */
  duration?: number;
  /** Whether maintenance occurs on a weekly or monthly basis. */
  frequency?: DatabaseUpdatesFrequency;
  /** The hour to begin maintenance based in UTC time. */
  hour_of_day?: number;
  /** The week of the month to perform `monthly` frequency updates. Defaults to `null`.

* Required for `monthly` frequency updates.

* Must be `null` for `weekly` frequency updates.
 */
  week_of_month?: number | null;
};

/**
 * The operating status of the Managed Database.
 */
export type DatabaseStatus = typeof DatabaseStatus[keyof typeof DatabaseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseStatus = {
  provisioning: 'provisioning',
  active: 'active',
  suspending: 'suspending',
  suspended: 'suspended',
  resuming: 'resuming',
  restoring: 'restoring',
  failed: 'failed',
  degraded: 'degraded',
  updating: 'updating',
  backing_up: 'backing_up',
} as const;

/**
 * The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
 */
export type DatabaseHosts = {
  /** The primary host for the Managed Database. */
  readonly primary?: string | null;
  /** The secondary/private network host for the Managed Database.

A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

**Note**: The secondary hostname is publicly viewable and accessible.
 */
  readonly secondary?: string | null;
};

/**
 * The Managed Database engine type.
 */
export type DatabaseEngineProperty = typeof DatabaseEngineProperty[keyof typeof DatabaseEngineProperty];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseEngineProperty = {
  mysql: 'mysql',
  postgresql: 'postgresql',
} as const;

/**
 * The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.

 */
export type DatabaseClusterSize = typeof DatabaseClusterSize[keyof typeof DatabaseClusterSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseClusterSize = {
  NUMBER_1: 1,
  NUMBER_3: 3,
} as const;

/**
 * A general Managed Database instance object containing properties that are identical for all database types.
 */
export interface Database {
  /** A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
 */
  allow_list?: string[];
  /** The number of Linode Instance nodes deployed to the Managed Database.

Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
 */
  cluster_size?: DatabaseClusterSize;
  /** When this Managed Database was created. */
  readonly created?: string;
  /** Whether the Managed Databases is encrypted. */
  encrypted?: boolean;
  /** The Managed Database engine type. */
  readonly engine?: DatabaseEngineProperty;
  /** The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete. */
  readonly hosts?: DatabaseHosts;
  /** A unique ID that can be used to identify and reference the Managed Database. */
  readonly id?: number;
  /** Append this to `https://api.linode.com` to run commands for the Managed Database.
 */
  readonly instance_uri?: string;
  /** A unique, user-defined string referring to the Managed Database. */
  label?: string;
  /** The [Region](/docs/api/regions/) ID for the Managed Database. */
  region?: string;
  /** The operating status of the Managed Database. */
  readonly status?: DatabaseStatus;
  /** The Linode Instance type used by the Managed Database for its nodes. */
  type?: string;
  /** When this Managed Database was last updated. */
  readonly updated?: string;
  /** Configuration settings for automated patch update maintenance for the Managed Database. */
  updates?: DatabaseUpdates;
  /** The Managed Database engine version. */
  readonly version?: string;
}

/**
 * An object representing the credit card information you have on file with
Linode to make Payments against your Account.

 */
export interface CreditCard {
  /** Your credit card number. No spaces or dashes allowed. */
  card_number: string;
  /** CVV (Card Verification Value) of the credit card, typically found on the back of the card.
 */
  cvv: string;
  /** A value from 1-12 representing the expiration month of your credit card.

  * 1 = January
  * 2 = February
  * 3 = March
  * Etc.
 */
  expiry_month: number;
  /** A four-digit integer representing the expiration year of
your credit card.

The combination of `expiry_month` and `expiry_year`
must result in a month/year combination of the current month or in
the future. An expiration date set in the past is invalid.
 */
  expiry_year: number;
}

/**
 * An object representing an enrolled Beta Program for the Account.
 */
export interface BetaProgramEnrolled {
  /** Additional details regarding the Beta Program. */
  readonly description?: string | null;
  /** The date-time that the Beta Program ended.

`null` indicates that the Beta Program is ongoing.
 */
  readonly ended?: string | null;
  /** The date-time of Account enrollment to the Beta Program. */
  readonly enrolled?: string;
  /** The unique identifier of the Beta Program. */
  id?: string;
  /** The name of the Beta Program. */
  readonly label?: string;
  /** The start date-time of the Beta Program. */
  readonly started?: string;
}

/**
 * An object representing Beta Program information.
 */
export interface BetaProgram {
  /** Additional details regarding the Beta Program. */
  readonly description?: string | null;
  /** The date-time that the Beta Program ended.

`null` indicates that the Beta Program is ongoing.
 */
  readonly ended?: string | null;
  /** Whether the Beta Program requires [Green Light](https://www.linode.com/green-light/) participation for enrollment. */
  readonly greenlight_only?: boolean;
  /** The unique identifier of the Beta Program. */
  id?: string;
  /** The name of the Beta Program. */
  readonly label?: string;
  /** Additional source of information for the Beta Program. */
  readonly more_info?: string | null;
  /** The start date-time of the Beta Program. */
  readonly started?: string;
}

/**
 * This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.

 */
export type BackupType = typeof BackupType[keyof typeof BackupType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BackupType = {
  auto: 'auto',
  snapshot: 'snapshot',
} as const;

/**
 * The current state of a specific Backup.
 */
export type BackupStatus = typeof BackupStatus[keyof typeof BackupStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BackupStatus = {
  paused: 'paused',
  pending: 'pending',
  running: 'running',
  needsPostProcessing: 'needsPostProcessing',
  successful: 'successful',
  failed: 'failed',
  userAborted: 'userAborted',
} as const;

/**
 * An object representing a Backup or snapshot for a Linode with Backup service enabled.

 */
export interface Backup {
  /** Whether this Backup is available for restoration.

Backups undergoing maintenance are not available for restoration.
 */
  readonly available?: boolean;
  /** A list of the labels of the Configuration profiles that are part of the Backup.
 */
  readonly configs?: string[];
  /** The date the Backup was taken. */
  readonly created?: string;
  /** A list of the disks that are part of the Backup.
 */
  readonly disks?: BackupDisksItem[];
  /** The date the Backup completed. */
  readonly finished?: string;
  /** The unique ID of this Backup. */
  readonly id?: number;
  /** A label for Backups that are of type `snapshot`. */
  label?: string | null;
  /** The current state of a specific Backup. */
  readonly status?: BackupStatus;
  /** This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.
 */
  readonly type?: BackupType;
  /** The date the Backup was most recently updated. */
  readonly updated?: string;
}

/**
 * The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).

 */
export type BackupDisksItemFilesystem = typeof BackupDisksItemFilesystem[keyof typeof BackupDisksItemFilesystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BackupDisksItemFilesystem = {
  raw: 'raw',
  swap: 'swap',
  ext3: 'ext3',
  ext4: 'ext4',
  initrd: 'initrd',
} as const;

export type BackupDisksItem = {
  /** The Disk filesystem can be one of:

  * raw - No filesystem, just a raw binary stream.
  * swap - Linux swap area.
  * ext3 - The ext3 journaling filesystem for Linux.
  * ext4 - The ext4 journaling filesystem for Linux.
  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).
 */
  filesystem?: BackupDisksItemFilesystem;
  label?: string;
  size?: number;
};

/**
 * An application you have authorized access to your Account through OAuth.

 */
export interface AuthorizedApp {
  /** When this app was authorized. */
  readonly created?: string;
  /** When the app's access to your account expires. If `null`, the app's access must be revoked manually.
 */
  readonly expiry?: string | null;
  /** This authorization's ID, used for revoking access.
 */
  readonly id?: number;
  /** The name of the application you've authorized.
 */
  readonly label?: string;
  /** The OAuth scopes this app was authorized with.  This defines what parts of your Account the app is allowed to access.
 */
  readonly scopes?: string;
  /** The URL at which this app's thumbnail may be accessed.
 */
  readonly thumbnail_url?: string;
  /** The website where you can get more information about this app.
 */
  readonly website?: string;
}

/**
 * A string describing the status of this account's Object Storage service enrollment.

 */
export type AccountSettingsObjectStorage = typeof AccountSettingsObjectStorage[keyof typeof AccountSettingsObjectStorage];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountSettingsObjectStorage = {
  disabled: 'disabled',
  suspended: 'suspended',
  active: 'active',
} as const;

/**
 * Account Settings object
 */
export interface AccountSettings {
  /** Account-wide backups default.  If `true`, all Linodes created will automatically be enrolled in the Backups service.  If `false`, Linodes will not be enrolled by default, but may still be enrolled on creation or later.
 */
  backups_enabled?: boolean;
  /** The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](/docs/api/longview/#longview-subscriptions-list) ID or `null` for Longview Free.
 */
  readonly longview_subscription?: string;
  /** Our 24/7 incident response service. This robust, multi-homed monitoring system distributes monitoring checks to ensure that your servers remain online and available at all times. Linode Managed can monitor any service or software stack reachable over TCP or HTTP. Once you add a service to Linode Managed, we'll monitor it for connectivity, response, and total request time.
 */
  readonly managed?: boolean;
  /** Enables network helper across all users by default for new Linodes and Linode Configs.
 */
  network_helper?: boolean;
  /** A string describing the status of this account's Object Storage service enrollment.
 */
  readonly object_storage?: AccountSettingsObjectStorage;
}

/**
 * Account Service Availability object
 */
export interface AccountAvailability {
  /** Displays the data center represented by a slug.
 */
  readonly region?: string;
  /** A list of strings of unavailable services.
 */
  readonly unavailable?: unknown;
}

/**
 * Credit Card information associated with this Account.
 */
export type AccountCreditCard = {
  /** The expiration month and year of the credit card. */
  readonly expiry?: string;
  /** The last four digits of the credit card associated with this Account.
 */
  readonly last_four?: string;
};

/**
 * The source of service charges for this Account, as determined by its relationship with Akamai.
Accounts that are associated with Akamai-specific customers return a value of `akamai`.
All other Accounts return a value of `linode`.

 */
export type AccountBillingSource = typeof AccountBillingSource[keyof typeof AccountBillingSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountBillingSource = {
  akamai: 'akamai',
  linode: 'linode',
} as const;

/**
 * Account object
 */
export interface Account {
  readonly active_promotions?: AccountActivePromotionsItem[];
  /** The datetime of when the account was activated. */
  readonly active_since?: string;
  /** First line of this Account's billing address. */
  address_1?: string;
  /** Second line of this Account's billing address. */
  address_2?: string;
  /** This Account's balance, in US dollars. */
  readonly balance?: number;
  /** This Account's current estimated invoice in US dollars. This is not your final invoice balance. Transfer charges are not included in the estimate.
 */
  readonly balance_uninvoiced?: number;
  /** The source of service charges for this Account, as determined by its relationship with Akamai.
Accounts that are associated with Akamai-specific customers return a value of `akamai`.
All other Accounts return a value of `linode`.
 */
  readonly billing_source?: AccountBillingSource;
  /** A list of capabilities your account supports.
 */
  readonly capabilities?: string[];
  /** The city for this Account's billing address. */
  city?: string;
  /** The company name associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  company?: string;
  /** The two-letter ISO 3166 country code of this Account's billing address.
 */
  country?: string;
  /** Credit Card information associated with this Account. */
  readonly credit_card?: AccountCreditCard;
  /** The email address of the person associated with this Account. */
  email?: string;
  /** An external unique identifier for this account.
 */
  readonly euuid?: string;
  /** The first name of the person associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  first_name?: string;
  /** The last name of the person associated with this Account.

Must not include any of the following characters: `<` `>` `(` `)` `"` `=`
 */
  last_name?: string;
  /** The phone number associated with this Account. */
  phone?: string;
  /** If billing address is in the United States (US) or Canada (CA), only the two-letter ISO 3166 State or Province code are accepted. If entering a US military address, state abbreviations (AA, AE, AP) should be entered. If the address is outside the US or CA, this is the Province associated with the Account's billing address.
 */
  state?: string;
  /** The tax identification number associated with this Account, for tax calculations in some countries. If you do not live in a country that collects tax, this should be an empty string (`""`).
 */
  tax_id?: string;
  /** The zip code of this Account's billing address. The following restrictions apply:

- May only consist of letters, numbers, spaces, and hyphens.
- Must not contain more than 9 letter or number characters.
 */
  zip?: string;
}

/**
 * The service to which this promotion applies.

 */
export type AccountActivePromotionsItemServiceType = typeof AccountActivePromotionsItemServiceType[keyof typeof AccountActivePromotionsItemServiceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountActivePromotionsItemServiceType = {
  all: 'all',
  backup: 'backup',
  blockstorage: 'blockstorage',
  db_mysql: 'db_mysql',
  ip_v4: 'ip_v4',
  linode: 'linode',
  linode_disk: 'linode_disk',
  linode_memory: 'linode_memory',
  longview: 'longview',
  managed: 'managed',
  nodebalancer: 'nodebalancer',
  objectstorage: 'objectstorage',
  transfer_tx: 'transfer_tx',
} as const;

/**
 * Promotions generally
offer a set amount of credit that can be used toward your Linode
services, and the promotion expires after a specified date. As well,
a monthly cap on the promotional offer is set.

Simply put, a promotion offers a certain amount of credit every
month, until either the expiration date is passed, or until the total
promotional credit is used, whichever comes first.

 */
export type AccountActivePromotionsItem = {
  /** The amount available to spend per month.
 */
  readonly credit_monthly_cap?: string;
  /** The total amount of credit left for this promotion.
 */
  readonly credit_remaining?: string;
  /** A detailed description of this promotion.
 */
  readonly description?: string;
  /** When this promotion's credits expire.
 */
  readonly expire_dt?: string;
  /** The location of an image for this promotion.
 */
  readonly image_url?: string;
  /** The service to which this promotion applies.
 */
  readonly service_type?: AccountActivePromotionsItemServiceType;
  /** Short details of this promotion.
 */
  readonly summary?: string;
  /** The amount of credit left for this month for this promotion.
 */
  readonly this_month_credit_remaining?: string;
};




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  export const getLinodeAPI = () => {
/**
 * Returns the contact and billing information related to your Account.

 * @summary Account View
 */
const getAccount = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetAccount200>(
      {url: `/account`, method: 'get'
    },
      options);
    }
  
/**
 * Updates contact and billing information related to your Account.

 * @summary Account Update
 */
const updateAccount = (
    updateAccountBody: BodyType<NonReadonly<UpdateAccountBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateAccount200>(
      {url: `/account`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateAccountBody
    },
      options);
    }
  
/**
 * Returns service unavailability for all available regions.

Only authorized Users can access this endpoint.

*This endpoint is currently in **Beta**, and should not be used for production workloads.*

 * @summary Account Availability
 */
const getAvailability = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetAvailability200>(
      {url: `/account/availability`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a single region's service availability.

Only authorized Users can access this.

 * @summary Region Service Availability
 */
const getAccountAvailability = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetAccountAvailability200>(
      {url: `/account/availability/${id}`, method: 'get'
    },
      options);
    }
  
/**
 * Display all enrolled Beta Programs for your Account. Includes inactive as well as active Beta Programs.

Only unrestricted Users can access this command.

 * @summary Enrolled Beta Programs List
 */
const getEnrolledBetaPrograms = (
    params?: GetEnrolledBetaProgramsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEnrolledBetaPrograms200>(
      {url: `/account/betas`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Enroll your Account in an active Beta Program.

Only unrestricted Users can access this command.

To view active Beta Programs, use the Beta Programs List command.

Active Beta Programs may have a limited number of enrollments. If a Beta Program has reached is maximum number of enrollments, an error is returned even though the request is successful.

Beta Programs with `"greenlight_only": true` can only be enrolled by Accounts that participate in the [Greenlight](https://www.linode.com/green-light/) program.

 * @summary Beta Program Enroll
 */
const enrollBetaProgram = (
    enrollBetaProgramBody: BodyType<EnrollBetaProgramBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EnrollBetaProgram200>(
      {url: `/account/betas`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: enrollBetaProgramBody
    },
      options);
    }
  
/**
 * Display an enrolled Beta Program for your Account. The Beta Program may be inactive.

Only unrestricted Users can access this command.

 * @summary Enrolled Beta Program View
 */
const getEnrolledBetaProgram = (
    betaId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEnrolledBetaProgram200>(
      {url: `/account/betas/${betaId}`, method: 'get'
    },
      options);
    }
  
/**
 * Cancels an active Linode account. This action will cause Linode to attempt to charge the credit card on file for the remaining balance. An error will occur if Linode fails to charge the credit card on file. Restricted users will not be able to cancel an account.

 * @summary Account Cancel
 */
const cancelAccount = (
    cancelAccountBody: BodyType<CancelAccountBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CancelAccount200>(
      {url: `/account/cancel`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cancelAccountBody
    },
      options);
    }
  
/**
 * **DEPRECATED**. Please use Payment Method Add ([POST /account/payment-methods](/docs/api/account/#payment-method-add)).

Adds a credit card Payment Method to your account and sets it as the default method.

 * @deprecated
 * @summary Credit Card Add/Edit
 */
const createCreditCard = (
    createCreditCardBody: BodyType<CreateCreditCardBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateCreditCard200>(
      {url: `/account/credit-card`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createCreditCardBody
    },
      options);
    }
  
/**
 * **DEPRECATED**. Please use [Service Transfers List](/docs/api/account/#service-transfers-list).

 * @deprecated
 * @summary Entity Transfers List
 */
const getEntityTransfers = (
    params?: GetEntityTransfersParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEntityTransfers200>(
      {url: `/account/entity-transfers`, method: 'get',
        params
    },
      options);
    }
  
/**
 * **DEPRECATED**. Please use [Service Transfer Create](/docs/api/account/#service-transfer-create).

 * @deprecated
 * @summary Entity Transfer Create
 */
const createEntityTransfer = (
    createEntityTransferBody: BodyType<CreateEntityTransferBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateEntityTransfer200>(
      {url: `/account/entity-transfers`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createEntityTransferBody
    },
      options);
    }
  
/**
 * **DEPRECATED**. Please use [Service Transfer View](/docs/api/account/#service-transfer-view).

 * @deprecated
 * @summary Entity Transfer View
 */
const getEntityTransfer = (
    token: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEntityTransfer200>(
      {url: `/account/entity-transfers/${token}`, method: 'get'
    },
      options);
    }
  
/**
 * **DEPRECATED**. Please use [Service Transfer Cancel](/docs/api/account/#service-transfer-cancel).

 * @deprecated
 * @summary Entity Transfer Cancel
 */
const deleteEntityTransfer = (
    token: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteEntityTransfer200>(
      {url: `/account/entity-transfers/${token}`, method: 'delete'
    },
      options);
    }
  
/**
 * **DEPRECATED**. Please use [Service Transfer Accept](/docs/api/account/#service-transfer-accept).

 * @deprecated
 * @summary Entity Transfer Accept
 */
const acceptEntityTransfer = (
    token: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AcceptEntityTransfer200>(
      {url: `/account/entity-transfers/${token}/accept`, method: 'post'
    },
      options);
    }
  
/**
 * Returns a collection of Event objects representing actions taken on your Account from the last 90 days. The Events returned depend on your grants.

 * @summary Events List
 */
const getEvents = (
    params?: GetEventsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEvents200>(
      {url: `/account/events`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Returns a single Event object.

 * @summary Event View
 */
const getEvent = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEvent200>(
      {url: `/account/events/${eventId}`, method: 'get'
    },
      options);
    }
  
/**
 * Marks a single Event as read.
 * @summary Event Mark as Read
 */
const eventRead = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EventRead200>(
      {url: `/account/events/${eventId}/read`, method: 'post'
    },
      options);
    }
  
/**
 * Marks all Events up to and including this Event by ID as seen.

 * @summary Event Mark as Seen
 */
const eventSeen = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EventSeen200>(
      {url: `/account/events/${eventId}/seen`, method: 'post'
    },
      options);
    }
  
/**
 * Returns a paginated list of Invoices against your Account.

 * @summary Invoices List
 */
const getInvoices = (
    params?: GetInvoicesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetInvoices200>(
      {url: `/account/invoices`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Returns a single Invoice object.
 * @summary Invoice View
 */
const getInvoice = (
    invoiceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetInvoice200>(
      {url: `/account/invoices/${invoiceId}`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of Invoice items.
 * @summary Invoice Items List
 */
const getInvoiceItems = (
    invoiceId: number,
    params?: GetInvoiceItemsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetInvoiceItems200>(
      {url: `/account/invoices/${invoiceId}/items`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Returns a collection of successful logins for all users on the account during the last 90 days. This command can only be accessed by the unrestricted users of an account.

 * @summary User Logins List All
 */
const getAccountLogins = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetAccountLogins200>(
      {url: `/account/logins`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a Login object that displays information about a successful login. The logins that can be viewed can be for any user on the account, and are not limited to only the logins of the user that is accessing this API endpoint. This command can only be accessed by the unrestricted users of the account.

 * @summary Login View
 */
const getAccountLogin = (
    loginId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetAccountLogin200>(
      {url: `/account/logins/${loginId}`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a collection of Maintenance objects for any entity a user has permissions to view. Canceled Maintenance objects are not returned.

Currently, Linodes are the only entities available for viewing.

 * @summary Maintenance List
 */
const getMaintenance = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetMaintenance200>(
      {url: `/account/maintenance`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a collection of Notification objects representing important, often time-sensitive items related to your Account.
You cannot interact directly with Notifications, and a Notification will disappear when the circumstances causing it have been resolved. For example, if you have an important Ticket open, you must respond to the Ticket to dismiss the Notification.

 * @summary Notifications List
 */
const getNotifications = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetNotifications200>(
      {url: `/account/notifications`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of OAuth Clients registered to your Account.  OAuth Clients allow users to log into applications you write or host using their Linode Account, and may allow them to grant some level of access to their Linodes or other entities to your application.

 * @summary OAuth Clients List
 */
const getClients = (
    params?: GetClientsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetClients200>(
      {url: `/account/oauth-clients`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates an OAuth Client, which can be used to allow users (using their Linode account) to log in to your own application, and optionally grant your application some amount of access to their Linodes or other entities.

 * @summary OAuth Client Create
 */
const createClient = (
    createClientBodyAllOf: BodyType<NonReadonly<CreateClientBodyAllOf>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateClient200>(
      {url: `/account/oauth-clients`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createClientBodyAllOf
    },
      options);
    }
  
/**
 * Returns information about a single OAuth client.

 * @summary OAuth Client View
 */
const getClient = (
    clientId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetClient200>(
      {url: `/account/oauth-clients/${clientId}`, method: 'get'
    },
      options);
    }
  
/**
 * Update information about an OAuth Client on your Account. This can be especially useful to update the `redirect_uri` of your client in the event that the callback url changed in your application.

 * @summary OAuth Client Update
 */
const updateClient = (
    clientId: string,
    updateClientBody: BodyType<NonReadonly<UpdateClientBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateClient200>(
      {url: `/account/oauth-clients/${clientId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateClientBody
    },
      options);
    }
  
/**
 * Deletes an OAuth Client registered with Linode. The Client ID and Client secret will no longer be accepted by <a target="_top" href="https://login.linode.com">https://login.linode.com</a>, and all tokens issued to this client will be invalidated (meaning that if your application was using a token, it will no longer work).

 * @summary OAuth Client Delete
 */
const deleteClient = (
    clientId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteClient200>(
      {url: `/account/oauth-clients/${clientId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Resets the OAuth Client secret for a client you own, and returns the OAuth Client with the plaintext secret. This secret is not supposed to be publicly known or disclosed anywhere. This can be used to generate a new secret in case the one you have has been leaked, or to get a new secret if you lost the original. The old secret is expired immediately, and logins to your client with the old secret will fail.

 * @summary OAuth Client Secret Reset
 */
const resetClientSecret = (
    clientId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ResetClientSecret200>(
      {url: `/account/oauth-clients/${clientId}/reset-secret`, method: 'post'
    },
      options);
    }
  
/**
 * Returns the thumbnail for this OAuth Client.  This is a publicly-viewable endpoint, and can be accessed without authentication.

 * @summary OAuth Client Thumbnail View
 */
const getClientThumbnail = (
    clientId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Blob>(
      {url: `/account/oauth-clients/${clientId}/thumbnail`, method: 'get',
        responseType: 'blob'
    },
      options);
    }
  
/**
 * Upload a thumbnail for a client you own.  You must upload an image file that will be returned when the thumbnail is retrieved.  This image will be publicly-viewable.

 * @summary OAuth Client Thumbnail Update
 */
const setClientThumbnail = (
    clientId: string,
    setClientThumbnailBody: BodyType<Blob>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SetClientThumbnail200>(
      {url: `/account/oauth-clients/${clientId}/thumbnail`, method: 'put',
      headers: {'Content-Type': 'image/png', },
      data: setClientThumbnailBody
    },
      options);
    }
  
/**
 * Returns a paginated list of Payment Methods for this Account.

 * @summary Payment Methods List
 */
const getPaymentMethods = (
    params?: GetPaymentMethodsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetPaymentMethods200>(
      {url: `/account/payment-methods`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Adds a Payment Method to your Account with the option to set it as the default method.

* Adding a default Payment Method removes the default status from any other Payment Method.

* An Account can have up to 6 active Payment Methods.

* Up to 60 Payment Methods can be added each day.

* Prior to adding a Payment Method, ensure that your billing address information is up-to-date
with a valid `zip` by using the Account Update ([PUT /account](/docs/api/account/#account-update)) endpoint.

* A `payment_method_add` event is generated when a payment is successfully submitted.

 * @summary Payment Method Add
 */
const createPaymentMethod = (
    createPaymentMethodBody: BodyType<CreatePaymentMethodBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreatePaymentMethod200>(
      {url: `/account/payment-methods`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createPaymentMethodBody
    },
      options);
    }
  
/**
 * View the details of the specified Payment Method.

 * @summary Payment Method View
 */
const getPaymentMethod = (
    paymentMethodId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetPaymentMethod200>(
      {url: `/account/payment-methods/${paymentMethodId}`, method: 'get'
    },
      options);
    }
  
/**
 * Deactivate the specified Payment Method.

The default Payment Method can not be deleted. To add a new default Payment Method, access the Payment Method
Add ([POST /account/payment-methods](/docs/api/account/#payment-method-add)) endpoint. To designate an existing
Payment Method as the default method, access the Payment Method Make Default
([POST /account/payment-methods/{paymentMethodId}/make-default](/docs/api/account/#payment-method-make-default))
endpoint.

 * @summary Payment Method Delete
 */
const deletePaymentMethod = (
    paymentMethodId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeletePaymentMethod200>(
      {url: `/account/payment-methods/${paymentMethodId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Make the specified Payment Method the default method for automatically processing payments.

Removes the default status from any other Payment Method.

 * @summary Payment Method Make Default
 */
const makePaymentMethodDefault = (
    paymentMethodId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MakePaymentMethodDefault200>(
      {url: `/account/payment-methods/${paymentMethodId}/make-default`, method: 'post'
    },
      options);
    }
  
/**
 * Returns a paginated list of Payments made on this Account.

 * @summary Payments List
 */
const getPayments = (
    params?: GetPaymentsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetPayments200>(
      {url: `/account/payments`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Makes a Payment to your Account.

* The requested amount is charged to the default Payment Method if no `payment_method_id` is specified.

* A `payment_submitted` event is generated when a payment is successfully submitted.

 * @summary Payment Make
 */
const createPayment = (
    createPaymentBody: BodyType<CreatePaymentBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreatePayment200 | CreatePayment202>(
      {url: `/account/payments`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createPaymentBody
    },
      options);
    }
  
/**
 * Returns information about a specific Payment.

 * @summary Payment View
 */
const getPayment = (
    paymentId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetPayment200>(
      {url: `/account/payments/${paymentId}`, method: 'get'
    },
      options);
    }
  
/**
 * **Note**: This endpoint is disabled and no longer accessible. PayPal can be designated as a Payment Method for automated payments using the Cloud Manager. See [Manage Payment Methods](/docs/products/platform/billing/guides/payment-methods/).

 * @deprecated
 * @summary PayPal Payment Stage
 */
const createPayPalPayment = (
    createPayPalPaymentBody: BodyType<CreatePayPalPaymentBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreatePayPalPayment200 | CreatePayPalPayment299>(
      {url: `/account/payments/paypal`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createPayPalPaymentBody
    },
      options);
    }
  
/**
 * **Note**: This endpoint is disabled and no longer accessible. PayPal can be designated as a Payment Method for automated payments using the Cloud Manager. See [Manage Payment Methods](/docs/products/platform/billing/guides/payment-methods/).

 * @deprecated
 * @summary Staged/Approved PayPal Payment Execute
 */
const executePayPalPayment = (
    executePayPalPaymentBody: BodyType<ExecutePayPalPaymentBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ExecutePayPalPayment200 | ExecutePayPalPayment202 | ExecutePayPalPayment299>(
      {url: `/account/payments/paypal/execute`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: executePayPalPaymentBody
    },
      options);
    }
  
/**
 * Adds an expiring Promo Credit to your account.

The following restrictions apply:

* Your account must be less than 90 days old.
* There must not be an existing Promo Credit already on your account.
* The requesting User must be unrestricted. Use the User Update
  ([PUT /account/users/{username}](/docs/api/account/#user-update)) to change a User's restricted status.
* The `promo_code` must be valid and unexpired.

 * @summary Promo Credit Add
 */
const createPromoCredit = (
    createPromoCreditBody: BodyType<CreatePromoCreditBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreatePromoCredit200>(
      {url: `/account/promo-codes`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createPromoCreditBody
    },
      options);
    }
  
/**
 * Returns a collection of all created and accepted Service Transfers for this account, regardless of the user that created or accepted the transfer.

This command can only be accessed by the unrestricted users of an account.

 * @summary Service Transfers List
 */
const getServiceTransfers = (
    params?: GetServiceTransfersParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetServiceTransfers200>(
      {url: `/account/service-transfers`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a transfer request for the specified services. A request can contain any of the specified service types
and any number of each service type. At this time, only Linodes can be transferred.

When created successfully, a confirmation email is sent to the account that created this transfer containing a
transfer token and instructions on completing the transfer.

When a transfer is [accepted](/docs/api/account/#service-transfer-accept), the requested services are moved to
the receiving account. Linode services will not experience interruptions due to the transfer process. Backups
for Linodes are transferred as well.

DNS records that are associated with requested services will not be transferred or updated. Please ensure that
associated DNS records have been updated or communicated to the recipient prior to the transfer.

A transfer can take up to three hours to complete once accepted. When a transfer is
completed, billing for transferred services ends for the sending account and begins for the receiving account.

This command can only be accessed by the unrestricted users of an account.

There are several conditions that must be met in order to successfully create a transfer request:

1. The account creating the transfer must not have a past due balance or active Terms of Service violation.

1. The service must be owned by the account that is creating the transfer.

1. The service must not be assigned to another Service Transfer that is pending or that has been accepted and is
incomplete.

1. Linodes must not:

    * be assigned to a NodeBalancer, Firewall, VLAN, or Managed Service.

    * have any attached Block Storage Volumes.

    * have any shared IP addresses.

    * have any assigned /56, /64, or /116 IPv6 ranges.

 * @summary Service Transfer Create
 */
const createServiceTransfer = (
    createServiceTransferBody: BodyType<CreateServiceTransferBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateServiceTransfer200>(
      {url: `/account/service-transfers`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createServiceTransferBody
    },
      options);
    }
  
/**
 * Returns the details of the Service Transfer for the provided token.

While a transfer is pending, any unrestricted user *of any account* can access this command. After a
transfer has been accepted, it can only be viewed by unrestricted users of the accounts that created and
accepted the transfer. If canceled or expired, only unrestricted users of the account that created the
transfer can view it.

 * @summary Service Transfer View
 */
const getServiceTransfer = (
    token: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetServiceTransfer200>(
      {url: `/account/service-transfers/${token}`, method: 'get'
    },
      options);
    }
  
/**
 * Cancels the Service Transfer for the provided token. Once canceled, a transfer cannot be accepted or otherwise acted on in any way. If canceled in error, the transfer must be [created](/docs/api/account/#service-transfer-create) again.

When canceled, an email notification for the cancellation is sent to the account that created this transfer. Transfers can not be canceled if they are expired or have been accepted.

This command can only be accessed by the unrestricted users of the account that created this transfer.

 * @summary Service Transfer Cancel
 */
const deleteServiceTransfer = (
    token: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteServiceTransfer200>(
      {url: `/account/service-transfers/${token}`, method: 'delete'
    },
      options);
    }
  
/**
 * Accept a Service Transfer for the provided token to receive the services included in the transfer to your
account. At this time, only Linodes can be transferred.

When accepted, email confirmations are sent to the accounts that created and accepted the transfer. A transfer
can take up to three hours to complete once accepted. Once a transfer is completed, billing for transferred
services ends for the sending account and begins for the receiving account.

This command can only be accessed by the unrestricted users of the account that receives the transfer. Users
of the same account that created a transfer cannot accept the transfer.

There are several conditions that must be met in order to accept a transfer request:

1. Only transfers with a `pending` status can be accepted.

1. The account accepting the transfer must have a registered payment method and must not have a past due
  balance or other account limitations for the services to be transferred.

1. Both the account that created the transfer and the account that is accepting the transfer must not have any
active Terms of Service violations.

1. The service must still be owned by the account that created the transfer.

1. Linodes must not:

    * be assigned to a NodeBalancer, Firewall, VLAN, or Managed Service.

    * have any attached Block Storage Volumes.

    * have any shared IP addresses.

    * have any assigned /56, /64, or /116 IPv6 ranges.

Any and all of the above conditions must be cured and maintained by the relevant account prior to the
transfer's expiration to allow the transfer to be accepted by the receiving account.

 * @summary Service Transfer Accept
 */
const acceptServiceTransfer = (
    token: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AcceptServiceTransfer200>(
      {url: `/account/service-transfers/${token}/accept`, method: 'post'
    },
      options);
    }
  
/**
 * Returns information related to your Account settings: Managed service subscription, Longview subscription, and network helper.

 * @summary Account Settings View
 */
const getAccountSettings = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetAccountSettings200>(
      {url: `/account/settings`, method: 'get'
    },
      options);
    }
  
/**
 * Updates your Account settings.

To update your Longview subscription plan, send a request to [Update Longview Plan](/docs/api/longview/#longview-plan-update).

 * @summary Account Settings Update
 */
const updateAccountSettings = (
    updateAccountSettingsBody: BodyType<NonReadonly<UpdateAccountSettingsBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateAccountSettings200>(
      {url: `/account/settings`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateAccountSettingsBody
    },
      options);
    }
  
/**
 * Enables Linode Managed for the entire account and sends a welcome email to the account's associated email address. Linode Managed can monitor any service or software stack reachable over TCP or HTTP. See our [Linode Managed guide](/docs/guides/linode-managed/) to learn more.

 * @summary Linode Managed Enable
 */
const enableAccountManaged = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EnableAccountManaged200>(
      {url: `/account/settings/managed-enable`, method: 'post'
    },
      options);
    }
  
/**
 * Returns a Transfer object showing your network utilization, in GB, for the current month.

 * @summary Network Utilization View
 */
const getTransfer = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetTransfer200>(
      {url: `/account/transfer`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of Users on your Account.

This command can only be accessed by the unrestricted users of an account.

Users may access all or part of your Account based on their restricted status and grants.  An unrestricted User may access everything on the account, whereas restricted User may only access entities or perform actions they've been given specific grants to.

 * @summary Users List
 */
const getUsers = (
    params?: GetUsersParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetUsers200>(
      {url: `/account/users`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a User on your Account. Once created, a confirmation message containing
password creation and login instructions is sent to the User's email address.

This command can only be accessed by the unrestricted users of an account.

The User's account access is determined by whether or not they are restricted,
and what grants they have been given.

 * @summary User Create
 */
const createUser = (
    createUserBodyAllOf: BodyType<NonReadonly<CreateUserBodyAllOf>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateUser200>(
      {url: `/account/users`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createUserBodyAllOf
    },
      options);
    }
  
/**
 * Returns information about a single User on your Account.

This command can only be accessed by the unrestricted users of an account.

 * @summary User View
 */
const getUser = (
    username: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetUser200>(
      {url: `/account/users/${username}`, method: 'get'
    },
      options);
    }
  
/**
 * Update information about a User on your Account. This can be used to
change the restricted status of a User. When making a User restricted,
no grants will be configured by default and you must then set up grants
in order for the User to access anything on the Account.

This command can only be accessed by the unrestricted users of an account.

 * @summary User Update
 */
const updateUser = (
    username: string,
    updateUserBody: BodyType<NonReadonly<UpdateUserBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateUser200>(
      {url: `/account/users/${username}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateUserBody
    },
      options);
    }
  
/**
 * Deletes a User. The deleted User will be immediately logged out and
may no longer log in or perform any actions. All of the User's Grants
will be removed.

This command can only be accessed by the unrestricted users of an account.

 * @summary User Delete
 */
const deleteUser = (
    username: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteUser200>(
      {url: `/account/users/${username}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns the full grants structure for the specified account User
(other than the account owner, see below for details). This includes all entities
on the Account alongside the level of access this User has to each of them.

This command can only be accessed by the unrestricted users of an account.

The current authenticated User, including the account owner, may view their
own grants at the [/profile/grants](/docs/api/profile/#grants-list)
endpoint, but will not see entities that they do not have access to.

 * @summary User's Grants View
 */
const getUserGrants = (
    username: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetUserGrants200 | void>(
      {url: `/account/users/${username}/grants`, method: 'get'
    },
      options);
    }
  
/**
 * Update the grants a User has. This can be used to give a User access
to new entities or actions, or take access away.  You do not need to
include the grant for every entity on the Account in this request; any
that are not included will remain unchanged.

This command can only be accessed by the unrestricted users of an account.

 * @summary User's Grants Update
 */
const updateUserGrants = (
    username: string,
    updateUserGrantsBody: BodyType<UpdateUserGrantsBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateUserGrants200>(
      {url: `/account/users/${username}/grants`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateUserGrantsBody
    },
      options);
    }
  
/**
 * Display all active Beta Programs.

Only unrestricted Users can access this command.

 * @summary Beta Programs List
 */
const getBetaPrograms = (
    params?: GetBetaProgramsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetBetaPrograms200>(
      {url: `/betas`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Display information about a Beta Program. This command can be used to access inactive as well as active Beta Programs.

Only unrestricted Users can access this command.

 * @summary Beta Program View
 */
const getBetaProgram = (
    betaId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetBetaProgram200>(
      {url: `/betas/${betaId}`, method: 'get'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display all available Managed Database engine types and versions. Engine IDs are used when creating new Managed Databases.

 * @summary Managed Database Engines List
 */
const getDatabasesEngines = (
    params?: GetDatabasesEnginesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesEngines200>(
      {url: `/databases/engines`, method: 'get',
        params
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display information for a single Managed Database engine type and version.

 * @summary Managed Database Engine View
 */
const getDatabasesEngine = (
    engineId: string,
    params?: GetDatabasesEngineParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesEngine200>(
      {url: `/databases/engines/${engineId}`, method: 'get',
        params
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display all Managed Databases that are accessible by your User, regardless of engine type.

For more detailed information on a particular Database instance, make a request to its `instance_uri`.

 * @summary Managed Databases List All
 */
const getDatabasesInstances = (
    params?: GetDatabasesInstancesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesInstances200>(
      {url: `/databases/instances`, method: 'get',
        params
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display all accessible Managed MySQL Databases.

 * @summary Managed MySQL Databases List
 */
const getDatabasesMySQLInstances = (
    params?: GetDatabasesMySQLInstancesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesMySQLInstances200>(
      {url: `/databases/mysql/instances`, method: 'get',
        params
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Provision a Managed MySQL Database.

Restricted Users must have the `add_databases` grant to use this command.

New instances can take approximately 15 to 30 minutes to provision.

The `allow_list` is used to control access to the Managed Database.

* IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.

* If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.

* Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.

All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.

All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database during configurable maintenance windows.

* If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.

* **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.

* To modify update the maintenance window for a Database, use the **Managed MySQL Database Update** ([PUT /databases/mysql/instances/{instanceId}](/docs/api/databases/#managed-mysql-database-update)) command.

 * @summary Managed MySQL Database Create
 */
const postDatabasesMySQLInstances = (
    postDatabasesMySQLInstancesBody: BodyType<PostDatabasesMySQLInstancesBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesMySQLInstances200>(
      {url: `/databases/mysql/instances`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postDatabasesMySQLInstancesBody
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display information for a single, accessible Managed MySQL Database.

 * @summary Managed MySQL Database View
 */
const getDatabasesMySQLInstance = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesMySQLInstance200>(
      {url: `/databases/mysql/instances/${instanceId}`, method: 'get'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Remove a Managed MySQL Database from your Account.

Requires `read_write` access to the Database.

The Database must have an `active`, `failed`, or `degraded` status to perform this command.

Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.

 * @summary Managed MySQL Database Delete
 */
const deleteDatabasesMySQLInstance = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteDatabasesMySQLInstance200>(
      {url: `/databases/mysql/instances/${instanceId}`, method: 'delete'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Update a Managed MySQL Database.

Requires `read_write` access to the Database.

The Database must have an `active` status to perform this command.

Updating addresses in the `allow_list` overwrites any existing addresses.

* IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.

* If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.

* Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.

* **Note**: Updates to the `allow_list` may take a short period of time to complete, making this command inappropriate for rapid successive updates to this property.

All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.

* If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.

* **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.

 * @summary Managed MySQL Database Update
 */
const putDatabasesMySQLInstance = (
    instanceId: number,
    putDatabasesMySQLInstanceBody: BodyType<PutDatabasesMySQLInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PutDatabasesMySQLInstance200>(
      {url: `/databases/mysql/instances/${instanceId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: putDatabasesMySQLInstanceBody
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display all backups for an accessible Managed MySQL Database.

The Database must not be provisioning to perform this command.

Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.

Database `snapshot` type backups are created by accessing the **Managed MySQL Database Backup Snapshot Create** ([POST /databases/mysql/instances/{instanceId}/backups](/docs/api/databases/#managed-mysql-database-backup-snapshot-create)) command.

 * @summary Managed MySQL Database Backups List
 */
const getDatabasesMySQLInstanceBackups = (
    instanceId: number,
    params?: GetDatabasesMySQLInstanceBackupsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesMySQLInstanceBackups200>(
      {url: `/databases/mysql/instances/${instanceId}/backups`, method: 'get',
        params
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Creates a snapshot backup of a Managed MySQL Database.

Requires `read_write` access to the Database.

Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.

Backups generated by this command have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.

The Database must have an `active` status to perform this command. If another backup is in progress, it must complete before a new backup can be initiated.

 * @summary Managed MySQL Database Backup Snapshot Create
 */
const postDatabasesMySQLInstanceBackup = (
    instanceId: number,
    postDatabasesMySQLInstanceBackupBody: BodyType<PostDatabasesMySQLInstanceBackupBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesMySQLInstanceBackup200>(
      {url: `/databases/mysql/instances/${instanceId}/backups`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postDatabasesMySQLInstanceBackupBody
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display information for a single backup for an accessible Managed MySQL Database.

The Database must not be provisioning to perform this command.

 * @summary Managed MySQL Database Backup View
 */
const getDatabasesMySQLInstanceBackup = (
    instanceId: number,
    backupId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesMySQLInstanceBackup200>(
      {url: `/databases/mysql/instances/${instanceId}/backups/${backupId}`, method: 'get'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Delete a single backup for an accessible Managed MySQL Database.

Requires `read_write` access to the Database.

The Database must not be provisioning to perform this command.

 * @summary Managed MySQL Database Backup Delete
 */
const deleteDatabaseMySQLInstanceBackup = (
    instanceId: number,
    backupId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteDatabaseMySQLInstanceBackup200>(
      {url: `/databases/mysql/instances/${instanceId}/backups/${backupId}`, method: 'delete'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Restore a backup to a Managed MySQL Database on your Account.

Requires `read_write` access to the Database.

The Database must have an `active`, `degraded`, or `failed` status to perform this command.

**Note**: Restoring from a backup will erase all existing data on the database instance and replace it with backup data.

**Note**: Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.

 * @summary Managed MySQL Database Backup Restore
 */
const postDatabasesMySQLInstanceBackupRestore = (
    instanceId: number,
    backupId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesMySQLInstanceBackupRestore200>(
      {url: `/databases/mysql/instances/${instanceId}/backups/${backupId}/restore`, method: 'post'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display the root username and password for an accessible Managed MySQL Database.

The Database must have an `active` status to perform this command.

 * @summary Managed MySQL Database Credentials View
 */
const getDatabasesMySQLInstanceCredentials = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesMySQLInstanceCredentials200>(
      {url: `/databases/mysql/instances/${instanceId}/credentials`, method: 'get'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Reset the root password for a Managed MySQL Database.

Requires `read_write` access to the Database.

A new root password is randomly generated and accessible with the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command.

Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.

**Note**: Note that it may take several seconds for credentials to reset.

 * @summary Managed MySQL Database Credentials Reset
 */
const postDatabasesMySQLInstanceCredentialsReset = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesMySQLInstanceCredentialsReset200>(
      {url: `/databases/mysql/instances/${instanceId}/credentials/reset`, method: 'post'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display the SSL CA certificate for an accessible Managed MySQL Database.

The Database must have an `active` status to perform this command.

 * @summary Managed MySQL Database SSL Certificate View
 */
const getDatabasesMySQLInstanceSSL = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesMySQLInstanceSSL200>(
      {url: `/databases/mysql/instances/${instanceId}/ssl`, method: 'get'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Apply security patches and updates to the underlying operating system of the Managed MySQL Database. This function runs during regular maintenance windows, which are configurable with the **Managed MySQL Database Update** ([PUT /databases/mysql/instances/{instanceId}](/docs/api/databases/#managed-mysql-database-update)) command.

Requires `read_write` access to the Database.

The Database must have an `active` status to perform this command.

**Note**

* If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.

* **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.

 * @summary Managed MySQL Database Patch
 */
const postDatabasesMySQLInstancePatch = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesMySQLInstancePatch200>(
      {url: `/databases/mysql/instances/${instanceId}/patch`, method: 'post'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display all accessible Managed PostgreSQL Databases.

 * @summary Managed PostgreSQL Databases List
 */
const getDatabasesPostgreSQLInstances = (
    params?: GetDatabasesPostgreSQLInstancesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesPostgreSQLInstances200>(
      {url: `/databases/postgresql/instances`, method: 'get',
        params
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Provision a Managed PostgreSQL Database.

Restricted Users must have the `add_databases` grant to use this command.

New instances can take approximately 15 to 30 minutes to provision.

The `allow_list` is used to control access to the Managed Database.

* IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.

* If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.

* Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.

All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.

All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database during configurable maintenance windows.

* If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.

* **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.

* To modify update the maintenance window for a Database, use the **Managed PostgreSQL Database Update** ([PUT /databases/postgresql/instances/{instanceId}](/docs/api/databases/#managed-postgresql-database-update)) command.

 * @summary Managed PostgreSQL Database Create
 */
const postDatabasesPostgreSQLInstances = (
    postDatabasesPostgreSQLInstancesBody: BodyType<PostDatabasesPostgreSQLInstancesBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesPostgreSQLInstances200>(
      {url: `/databases/postgresql/instances`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postDatabasesPostgreSQLInstancesBody
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display information for a single, accessible Managed PostgreSQL Database.

 * @summary Managed PostgreSQL Database View
 */
const getDatabasesPostgreSQLInstance = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesPostgreSQLInstance200>(
      {url: `/databases/postgresql/instances/${instanceId}`, method: 'get'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Remove a Managed PostgreSQL Database from your Account.

Requires `read_write` access to the Database.

The Database must have an `active`, `failed`, or `degraded` status to perform this command.

Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.

 * @summary Managed PostgreSQL Database Delete
 */
const deleteDatabasesPostgreSQLInstance = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteDatabasesPostgreSQLInstance200>(
      {url: `/databases/postgresql/instances/${instanceId}`, method: 'delete'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Update a Managed PostgreSQL Database.

Requires `read_write` access to the Database.

The Database must have an `active` status to perform this command.

Updating addresses in the `allow_list` overwrites any existing addresses.

* IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.

* If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.

* Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.

* **Note**: Updates to the `allow_list` may take a short period of time to complete, making this command inappropriate for rapid successive updates to this property.

All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.

* If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.

* **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.

 * @summary Managed PostgreSQL Database Update
 */
const putDatabasesPostgreSQLInstance = (
    instanceId: number,
    putDatabasesPostgreSQLInstanceBody: BodyType<PutDatabasesPostgreSQLInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PutDatabasesPostgreSQLInstance200>(
      {url: `/databases/postgresql/instances/${instanceId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: putDatabasesPostgreSQLInstanceBody
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display all backups for an accessible Managed PostgreSQL Database.

The Database must not be provisioning to perform this command.

Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.

Database `snapshot` type backups are created by accessing the **Managed PostgreSQL Database Backup Snapshot Create** ([POST /databases/postgresql/instances/{instanceId}/backups](/docs/api/databases/#managed-postgresql-database-backup-snapshot-create)) command.

 * @summary Managed PostgreSQL Database Backups List
 */
const getDatabasesPostgreSQLInstanceBackups = (
    instanceId: number,
    params?: GetDatabasesPostgreSQLInstanceBackupsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesPostgreSQLInstanceBackups200>(
      {url: `/databases/postgresql/instances/${instanceId}/backups`, method: 'get',
        params
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Creates a snapshot backup of a Managed PostgreSQL Database.

Requires `read_write` access to the Database.

Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.

Backups generated by this command have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.

The Database must have an `active` status to perform this command. If another backup is in progress, it must complete before a new backup can be initiated.

 * @summary Managed PostgreSQL Database Backup Snapshot Create
 */
const postDatabasesPostgreSQLInstanceBackup = (
    instanceId: number,
    postDatabasesPostgreSQLInstanceBackupBody: BodyType<PostDatabasesPostgreSQLInstanceBackupBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesPostgreSQLInstanceBackup200>(
      {url: `/databases/postgresql/instances/${instanceId}/backups`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postDatabasesPostgreSQLInstanceBackupBody
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display information for a single backup for an accessible Managed PostgreSQL Database.

The Database must not be provisioning to perform this command.

 * @summary Managed PostgreSQL Database Backup View
 */
const getDatabasesPostgreSQLInstanceBackup = (
    instanceId: number,
    backupId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesPostgreSQLInstanceBackup200>(
      {url: `/databases/postgresql/instances/${instanceId}/backups/${backupId}`, method: 'get'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Delete a single backup for an accessible Managed PostgreSQL Database.

Requires `read_write` access to the Database.

The Database must not be provisioning to perform this command.

 * @summary Managed PostgreSQL Database Backup Delete
 */
const deleteDatabasePostgreSQLInstanceBackup = (
    instanceId: number,
    backupId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteDatabasePostgreSQLInstanceBackup200>(
      {url: `/databases/postgresql/instances/${instanceId}/backups/${backupId}`, method: 'delete'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Restore a backup to a Managed PostgreSQL Database on your Account.

Requires `read_write` access to the Database.

The Database must have an `active`, `degraded`, or `failed` status to perform this command.

**Note**: Restoring from a backup will erase all existing data on the database instance and replace it with backup data.

**Note**: Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.

 * @summary Managed PostgreSQL Database Backup Restore
 */
const postDatabasesPostgreSQLInstanceBackupRestore = (
    instanceId: number,
    backupId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesPostgreSQLInstanceBackupRestore200>(
      {url: `/databases/postgresql/instances/${instanceId}/backups/${backupId}/restore`, method: 'post'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display the root username and password for an accessible Managed PostgreSQL Database.

The Database must have an `active` status to perform this command.

 * @summary Managed PostgreSQL Database Credentials View
 */
const getDatabasesPostgreSQLInstanceCredentials = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesPostgreSQLInstanceCredentials200>(
      {url: `/databases/postgresql/instances/${instanceId}/credentials`, method: 'get'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Reset the root password for a Managed PostgreSQL Database.

Requires `read_write` access to the Database.

A new root password is randomly generated and accessible with the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command.

Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.

**Note**: Note that it may take several seconds for credentials to reset.

 * @summary Managed PostgreSQL Database Credentials Reset
 */
const postDatabasesPostgreSQLInstanceCredentialsReset = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesPostgreSQLInstanceCredentialsReset200>(
      {url: `/databases/postgresql/instances/${instanceId}/credentials/reset`, method: 'post'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display the SSL CA certificate for an accessible Managed PostgreSQL Database.

The Database must have an `active` status to perform this command.

 * @summary Managed PostgreSQL Database SSL Certificate View
 */
const getDatabasesPostgreSQLInstanceSSL = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesPostgreSQLInstanceSSL200>(
      {url: `/databases/postgresql/instances/${instanceId}/ssl`, method: 'get'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. This function runs during regular maintenance windows, which are configurable with the **Managed PostgreSQL Database Update** ([PUT /databases/postgresql/instances/{instanceId}](/docs/api/databases/#managed-postgresql-database-update)) command.

Requires `read_write` access to the Database.

The Database must have an `active` status to perform this command.

**Note**

* If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.

* **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.

 * @summary Managed PostgreSQL Database Patch
 */
const postDatabasesPostgreSQLInstancePatch = (
    instanceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostDatabasesPostgreSQLInstancePatch200>(
      {url: `/databases/postgresql/instances/${instanceId}/patch`, method: 'post'
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display all Managed Database node types. The type and number of nodes determine the resources and price of a Managed Database instance.

Each Managed Database can have one node type. In the case of a high availabilty Database, all nodes are provisioned according to the chosen type.

 * @summary Managed Database Types List
 */
const getDatabasesTypes = (
    params?: GetDatabasesTypesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesTypes200>(
      {url: `/databases/types`, method: 'get',
        params
    },
      options);
    }
  
/**
 * **This command is currently only available for customers who already have an active Managed Database.**

Display the details of a single Managed Database type. The type and number of nodes determine the resources and price of a Managed Database instance.

 * @summary Managed Database Type View
 */
const getDatabasesType = (
    typeId: string,
    params?: GetDatabasesTypeParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDatabasesType200>(
      {url: `/databases/types/${typeId}`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This is a collection of Domains that you have registered in Linode's DNS Manager.  Linode is not a registrar, and in order for these to work you must own the domains and point your registrar at Linode's nameservers.

 * @summary Domains List
 */
const getDomains = (
    params?: GetDomainsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDomains200>(
      {url: `/domains`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Adds a new Domain to Linode's DNS Manager. Linode is not a registrar, and you must own the domain before adding it here. Be sure to point your registrar to Linode's nameservers so that the records hosted here are used.

 * @summary Domain Create
 */
const createDomain = (
    createDomainBodyAllOf: BodyType<NonReadonly<CreateDomainBodyAllOf>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateDomain200>(
      {url: `/domains`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createDomainBodyAllOf
    },
      options);
    }
  
/**
 * This is a single Domain that you have registered in Linode's DNS Manager. Linode is not a registrar, and in order for this Domain record to work you must own the domain and point your registrar at Linode's nameservers.

 * @summary Domain View
 */
const getDomain = (
    domainId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDomain200>(
      {url: `/domains/${domainId}`, method: 'get'
    },
      options);
    }
  
/**
 * Update information about a Domain in Linode's DNS Manager.

 * @summary Domain Update
 */
const updateDomain = (
    domainId: number,
    updateDomainBody: BodyType<NonReadonly<UpdateDomainBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateDomain200>(
      {url: `/domains/${domainId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateDomainBody
    },
      options);
    }
  
/**
 * Deletes a Domain from Linode's DNS Manager. The Domain will be removed from Linode's nameservers shortly after this operation completes. This also deletes all associated Domain Records.

 * @summary Domain Delete
 */
const deleteDomain = (
    domainId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteDomain200>(
      {url: `/domains/${domainId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns the zone file for the last rendered zone for the specified domain.

 * @summary Domain Zone File View
 */
const getDomainZone = (
    domainId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDomainZone200>(
      {url: `/domains/${domainId}/zone-file`, method: 'get'
    },
      options);
    }
  
/**
 * Imports a domain zone from a remote nameserver.
Your nameserver must allow zone transfers (AXFR) from the following IPs:

  - 96.126.114.97
  - 96.126.114.98
  - 2600:3c00::5e
  - 2600:3c00::5f

 * @summary Domain Import
 */
const importDomain = (
    importDomainBody: BodyType<ImportDomainBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ImportDomain200>(
      {url: `/domains/import`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: importDomainBody
    },
      options);
    }
  
/**
 * Clones a Domain and all associated DNS records from a Domain that is registered in Linode's DNS manager.

 * @summary Domain Clone
 */
const cloneDomain = (
    domainId: string,
    cloneDomainBody: BodyType<CloneDomainBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CloneDomain200>(
      {url: `/domains/${domainId}/clone`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cloneDomainBody
    },
      options);
    }
  
/**
 * Returns a paginated list of Records configured on a Domain in Linode's
DNS Manager.

 * @summary Domain Records List
 */
const getDomainRecords = (
    domainId: number,
    params?: GetDomainRecordsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDomainRecords200>(
      {url: `/domains/${domainId}/records`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Adds a new Domain Record to the zonefile this Domain represents.

Each domain can have up to 12,000 active records.

 * @summary Domain Record Create
 */
const createDomainRecord = (
    domainId: number,
    createDomainRecordBodyAllOf: BodyType<NonReadonly<CreateDomainRecordBodyAllOf>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateDomainRecord200>(
      {url: `/domains/${domainId}/records`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createDomainRecordBodyAllOf
    },
      options);
    }
  
/**
 * View a single Record on this Domain.

 * @summary Domain Record View
 */
const getDomainRecord = (
    domainId: number,
    recordId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDomainRecord200>(
      {url: `/domains/${domainId}/records/${recordId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a single Record on this Domain.

 * @summary Domain Record Update
 */
const updateDomainRecord = (
    domainId: number,
    recordId: number,
    updateDomainRecordBody: BodyType<UpdateDomainRecordBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateDomainRecord200>(
      {url: `/domains/${domainId}/records/${recordId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateDomainRecordBody
    },
      options);
    }
  
/**
 * Deletes a Record on this Domain.

 * @summary Domain Record Delete
 */
const deleteDomainRecord = (
    domainId: number,
    recordId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteDomainRecord200>(
      {url: `/domains/${domainId}/records/${recordId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a paginated list of Images.

* **Public** Images have IDs that begin with "linode/". These distribution images are generally available to
all users.

* **Private** Images have IDs that begin with "private/". These Images are Account-specific and only
accessible to Users with appropriate [Grants](/docs/api/account/#users-grants-view).

* To view only public Images, call this endpoint with or without authentication. To view private Images as well, call this endpoint with authentication.

 * @summary Images List
 */
const getImages = (
    params?: GetImagesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetImages200>(
      {url: `/images`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Captures a private gold-master Image from a Linode Disk.

 * @summary Image Create
 */
const createImage = (
    createImageBody: BodyType<CreateImageBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateImage200>(
      {url: `/images`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createImageBody
    },
      options);
    }
  
/**
 * Initiates an Image upload.

This endpoint creates a new private Image object and returns it along
with the URL to which image data can be uploaded.

- Image data must be uploaded within 24 hours of creation or the
upload will be canceled and the image deleted.

- Image uploads should be made as an HTTP PUT request to the URL returned in the `upload_to`
response parameter, with a `Content-type: application/octet-stream` header included in the
request. For example:

      curl -v \
        -H "Content-Type: application/octet-stream" \
        --upload-file example.img.gz \
        $UPLOAD_URL \
        --progress-bar \
        --output /dev/null

- Uploaded image data should be compressed in gzip (`.gz`) format. The uncompressed disk should be in raw
disk image (`.img`) format. A maximum compressed file size of 5GB is supported for upload at this time.

**Note:** To initiate and complete an Image upload in a single step, see our guide on how to [Upload an Image](/docs/products/tools/images/guides/upload-an-image/) using Cloud Manager or the Linode CLI `image-upload` plugin.

 * @summary Image Upload
 */
const postImagesUpload = (
    postImagesUploadBody: BodyType<PostImagesUploadBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostImagesUpload200>(
      {url: `/images/upload`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postImagesUploadBody
    },
      options);
    }
  
/**
 * Get information about a single Image.

* **Public** Images have IDs that begin with "linode/". These distribution images are generally available to
all users.

* **Private** Images have IDs that begin with "private/". These Images are Account-specific and only
accessible to Users with appropriate [Grants](/docs/api/account/#users-grants-view).

* To view a public Image, call this endpoint with or without authentication. To view a private Image, call this endpoint with authentication.

 * @summary Image View
 */
const getImage = (
    imageId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetImage200>(
      {url: `/images/${imageId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a private Image that you have permission to `read_write`.

 * @summary Image Update
 */
const updateImage = (
    imageId: string,
    updateImageBody: BodyType<NonReadonly<UpdateImageBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateImage200>(
      {url: `/images/${imageId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateImageBody
    },
      options);
    }
  
/**
 * Deletes a private Image you have permission to `read_write`.


**Deleting an Image is a destructive action and cannot be undone.**

 * @summary Image Delete
 */
const deleteImage = (
    imageId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteImage200>(
      {url: `/images/${imageId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a paginated list of Linodes you have permission to view.

 * @summary Linodes List
 */
const getLinodeInstances = (
    params?: GetLinodeInstancesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeInstances200>(
      {url: `/linode/instances`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a Linode Instance on your Account. In order for this
request to complete successfully, your User must have the `add_linodes` grant. Creating a
new Linode will incur a charge on your Account.

Linodes can be created using one of the available Types. See
Types List ([GET /linode/types](/docs/api/linode-types/#types-list)) to get more
information about each Type's specs and cost.

Linodes can be created in any one of our available Regions, which are accessible from the
Regions List ([GET /regions](/docs/api/regions/#regions-list)) endpoint.

In an effort to fight spam, Linode restricts outbound connections on ports 25, 465, and 587
on all Linodes for new accounts created after November 5th, 2019. For more information,
see our guide on [Running a Mail Server](/docs/guides/running-a-mail-server/).

**Important**: You must be an unrestricted User in order to add or modify tags on Linodes.

Linodes can be created in a number of ways:

* Using a Linode Public Image distribution or a Private Image you created based on another Linode.
  * Access the Images List ([GET /images](/docs/api/images/#images-list)) endpoint with authentication to view
    all available Images.
  * The Linode will be `running` after it completes `provisioning`.
  * A default config with two Disks, one being a 512 swap disk, is created.
    * `swap_size` can be used to customize the swap disk size.
  * Requires a `root_pass` be supplied to use for the root User's Account.
  * It is recommended to supply SSH keys for the root User using the `authorized_keys` field.
  * You may also supply a list of usernames via the `authorized_users` field.
    * These users must have an SSH Key associated with your Profile first. See SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) for more information.

* Using cloud-init with [Metadata](/docs/products/compute/compute-instances/guides/metadata/).
  * Automate system configuration and software installation by providing a base-64 encoded [cloud-config](/docs/products/compute/compute-instances/guides/metadata-cloud-config/) file.
  * Requires a compatible Image. You can determine compatible Images by checking for `cloud-init` under `capabilities` when using Images List ([GET /images](/docs/api/images/#images-list)).
  * Requires a compatible Region.  You can determine compatible Regions by checking for `Metadata` under `capabilities` when using Regions List ([GET /regions](/docs/api/regions/#regions-list)).

* Using a StackScript.
  * See StackScripts List ([GET /linode/stackscripts](/docs/api/stackscripts/#stackscripts-list)) for
    a list of available StackScripts.
  * The Linode will be `running` after it completes `provisioning`.
  * Requires a compatible Image to be supplied.
    * See StackScript View ([GET /linode/stackscript/{stackscriptId}](/docs/api/stackscripts/#stackscript-view)) for compatible Images.
  * Requires a `root_pass` be supplied to use for the root User's Account.
  * It is recommended to supply SSH keys for the root User using the `authorized_keys` field.
  * You may also supply a list of usernames via the `authorized_users` field.
    * These users must have an SSH Key associated with your Profile first. See SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) for more information.

* Using one of your other Linode's backups.
  * You must create a Linode large enough to accommodate the Backup's size.
  * The Disks and Config will match that of the Linode that was backed up.
  * The `root_pass` will match that of the Linode that was backed up.

* Attached to a private VLAN.
  * Review the `interfaces` property of the [Request Body Schema](/docs/api/linode-instances/#linode-create__request-body-schema) for details.
  * For more information, see our guide on [Getting Started with VLANs](/docs/products/networking/vlans/get-started/).

* Create an empty Linode.
  * The Linode will remain `offline` and must be manually started.
    * See Linode Boot ([POST /linode/instances/{linodeId}/boot](/docs/api/linode-instances/#linode-boot)).
  * Disks and Configs must be created manually.
  * This is only recommended for advanced use cases.

 * @summary Linode Create
 */
const createLinodeInstance = (
    createLinodeInstanceBody: BodyType<CreateLinodeInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateLinodeInstance200>(
      {url: `/linode/instances`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createLinodeInstanceBody
    },
      options);
    }
  
/**
 * Get a specific Linode by ID.
 * @summary Linode View
 */
const getLinodeInstance = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeInstance200>(
      {url: `/linode/instances/${linodeId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a Linode that you have permission to `read_write`.

**Important**: You must be an unrestricted User in order to add or modify tags on Linodes.

 * @summary Linode Update
 */
const updateLinodeInstance = (
    linodeId: number,
    updateLinodeInstanceBody: BodyType<NonReadonly<UpdateLinodeInstanceBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateLinodeInstance200>(
      {url: `/linode/instances/${linodeId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateLinodeInstanceBody
    },
      options);
    }
  
/**
 * Deletes a Linode you have permission to `read_write`.

**Deleting a Linode is a destructive action and cannot be undone.**

Additionally, deleting a Linode:

  * Gives up any IP addresses the Linode was assigned.
  * Deletes all Disks, Backups, Configs, etc.
  * Detaches any Volumes associated with the Linode.
  * Stops billing for the Linode and its associated services. You will be billed for time used
    within the billing period the Linode was active.

Linodes that are in the process of [cloning](/docs/api/linode-instances/#linode-clone) or [backup restoration](/docs/api/linode-instances/#backup-restore) cannot be deleted.

 * @summary Linode Delete
 */
const deleteLinodeInstance = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteLinodeInstance200>(
      {url: `/linode/instances/${linodeId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns information about this Linode's available backups.

 * @summary Backups List
 */
const getBackups = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetBackups200>(
      {url: `/linode/instances/${linodeId}/backups`, method: 'get'
    },
      options);
    }
  
/**
 * Creates a snapshot Backup of a Linode.

**Important:** If you already have a snapshot of this Linode, this is a destructive
action. The previous snapshot will be deleted.

 * @summary Snapshot Create
 */
const createSnapshot = (
    linodeId: number,
    createSnapshotBody: BodyType<CreateSnapshotBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateSnapshot200>(
      {url: `/linode/instances/${linodeId}/backups`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createSnapshotBody
    },
      options);
    }
  
/**
 * Cancels the Backup service on the given Linode. Deletes all of this Linode's existing backups forever.

 * @summary Backups Cancel
 */
const cancelBackups = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CancelBackups200>(
      {url: `/linode/instances/${linodeId}/backups/cancel`, method: 'post'
    },
      options);
    }
  
/**
 * Enables backups for the specified Linode.

 * @summary Backups Enable
 */
const enableBackups = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EnableBackups200>(
      {url: `/linode/instances/${linodeId}/backups/enable`, method: 'post'
    },
      options);
    }
  
/**
 * Returns information about a Backup.

 * @summary Backup View
 */
const getBackup = (
    linodeId: number,
    backupId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetBackup200>(
      {url: `/linode/instances/${linodeId}/backups/${backupId}`, method: 'get'
    },
      options);
    }
  
/**
 * Restores a Linode's Backup to the specified Linode.

The following conditions apply:
  * Backups may not be restored across Regions.
  * Only successfully completed Backups that are not undergoing maintenance can be restored.
  * The Linode that the Backup is being restored to must not itself be in the process of creating a Backup.

{{< note type="warning" title="Warning: UUID Collisions">}}
When you restore a backup, the restored disk is assigned the same [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) as the original disk. In most cases, this is acceptable and does not cause issues. However, if you attempt to mount both the original disk and the corresponding restore disk at the same time (by assigning them both to devices in your Configuration Profile's **Block Device Assignment**), you will encounter a UUID "collision".

When this happens, the system selects, and mounts, only one of the disks at random. This is due to both disks sharing the same UUID, and your instance *may fail to boot* since it will not be clear which disk is root. If your system does boot, you will not see any immediate indication if you are booted into the restored disk or the original disk, and you will be unable to access both disks at the same time.

To avoid this, we recommend only restoring a backup to the same Compute Instance if you do not intend on mounting them at the same time or are comfortable modifying UUIDs. If you need access to files on both the original disk and the restored disk simultaneously (such as needing to copy files between them), we suggest either restoring the backup to a separate Compute Instance or [creating](/docs/api/linode-instances/#linode-create) a new Compute Instance with the desired `backup_id`.

To learn more about block device assignments and viewing your disks' UUIDs, see our guide on [Configuration Profiles](/docs/products/compute/compute-instances/guides/configuration-profiles/#block-device-assignment).
{{< /note >}}

 * @summary Backup Restore
 */
const restoreBackup = (
    linodeId: number,
    backupId: number,
    restoreBackupBody: BodyType<RestoreBackupBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RestoreBackup200>(
      {url: `/linode/instances/${linodeId}/backups/${backupId}/restore`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: restoreBackupBody
    },
      options);
    }
  
/**
 * Boots a Linode you have permission to modify. If no parameters are given, a Config profile
will be chosen for this boot based on the following criteria:

* If there is only one Config profile for this Linode, it will be used.
* If there is more than one Config profile, the last booted config will be used.
* If there is more than one Config profile and none were the last to be booted (because the
  Linode was never booted or the last booted config was deleted) an error will be returned.

 * @summary Linode Boot
 */
const bootLinodeInstance = (
    linodeId: number,
    bootLinodeInstanceBody: BodyType<BootLinodeInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BootLinodeInstance200>(
      {url: `/linode/instances/${linodeId}/boot`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: bootLinodeInstanceBody
    },
      options);
    }
  
/**
 * You can clone your Linode's existing Disks or Configuration profiles to
another Linode on your Account. In order for this request to complete
successfully, your User must have the `add_linodes` grant. Cloning to a
new Linode will incur a charge on your Account.

If cloning to an existing Linode, any actions currently running or
queued must be completed first before you can clone to it.

Up to five clone operations from any given source Linode can be run concurrently.
If more concurrent clones are attempted, an HTTP 400 error will be
returned by this endpoint.

Any [tags](/docs/api/tags/#tags-list) existing on the source Linode will be cloned to the target Linode.

Linodes utilizing Metadata (`"has_user_data": true`) must be cloned to a new Linode with `metadata.user_data` included with the clone request.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. If a VLAN is attached to your Linode and you attempt clone it to a non-NGN data center, the cloning will not initiate. If a Linode cannot be cloned because of an incompatibility, you will be prompted to select a different data center or contact support.

 * @summary Linode Clone
 */
const cloneLinodeInstance = (
    linodeId: number,
    cloneLinodeInstanceBody: BodyType<CloneLinodeInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CloneLinodeInstance200>(
      {url: `/linode/instances/${linodeId}/clone`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cloneLinodeInstanceBody
    },
      options);
    }
  
/**
 * Lists Configuration profiles associated with a Linode.

 * @summary Configuration Profiles List
 */
const getLinodeConfigs = (
    linodeId: number,
    params?: GetLinodeConfigsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeConfigs200>(
      {url: `/linode/instances/${linodeId}/configs`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Adds a new Configuration profile to a Linode.

 * @summary Configuration Profile Create
 */
const addLinodeConfig = (
    linodeId: number,
    addLinodeConfigBodyAllOf: BodyType<NonReadonly<AddLinodeConfigBodyAllOf>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AddLinodeConfig200>(
      {url: `/linode/instances/${linodeId}/configs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addLinodeConfigBodyAllOf
    },
      options);
    }
  
/**
 * Returns information about a specific Configuration profile.

 * @summary Configuration Profile View
 */
const getLinodeConfig = (
    linodeId: number,
    configId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeConfig200>(
      {url: `/linode/instances/${linodeId}/configs/${configId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a Configuration profile.

 * @summary Configuration Profile Update
 */
const updateLinodeConfig = (
    linodeId: number,
    configId: number,
    updateLinodeConfigBody: BodyType<NonReadonly<UpdateLinodeConfigBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateLinodeConfig200>(
      {url: `/linode/instances/${linodeId}/configs/${configId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateLinodeConfigBody
    },
      options);
    }
  
/**
 * Deletes the specified Configuration profile from the specified Linode.

 * @summary Configuration Profile Delete
 */
const deleteLinodeConfig = (
    linodeId: number,
    configId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteLinodeConfig200>(
      {url: `/linode/instances/${linodeId}/configs/${configId}`, method: 'delete'
    },
      options);
    }
  
/**
 * View Disk information for Disks associated with this Linode.

 * @summary Disks List
 */
const getLinodeDisks = (
    linodeId: number,
    params?: GetLinodeDisksParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeDisks200>(
      {url: `/linode/instances/${linodeId}/disks`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Adds a new Disk to a Linode.

* You can optionally create a Disk from an Image or an Empty Disk if no Image is provided with a request.

* When creating an Empty Disk, providing a `label` is required.

* If no `label` is provided, an `image` is required instead.

* When creating a Disk from an Image, `root_pass` is required.

* The default filesystem for new Disks is `ext4`. If creating a Disk from an Image, the filesystem
of the Image is used unless otherwise specified.

* When deploying a StackScript on a Disk:
  * See StackScripts List ([GET /linode/stackscripts](/docs/api/stackscripts/#stackscripts-list)) for
    a list of available StackScripts.
  * Requires a compatible Image to be supplied.
    * See StackScript View ([GET /linode/stackscript/{stackscriptId}](/docs/api/stackscripts/#stackscript-view)) for compatible Images.
  * It is recommended to supply SSH keys for the root User using the `authorized_keys` field.
  * You may also supply a list of usernames via the `authorized_users` field.
    * These users must have an SSH Key associated with their Profiles first. See SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) for more information.

 * @summary Disk Create
 */
const addLinodeDisk = (
    linodeId: number,
    addLinodeDiskBodyAllOf: BodyType<AddLinodeDiskBodyAllOf>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AddLinodeDisk200>(
      {url: `/linode/instances/${linodeId}/disks`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addLinodeDiskBodyAllOf
    },
      options);
    }
  
/**
 * View Disk information for a Disk associated with this Linode.

 * @summary Disk View
 */
const getLinodeDisk = (
    linodeId: number,
    diskId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeDisk200>(
      {url: `/linode/instances/${linodeId}/disks/${diskId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a Disk that you have permission to `read_write`.

 * @summary Disk Update
 */
const updateDisk = (
    linodeId: number,
    diskId: number,
    updateDiskBody: BodyType<NonReadonly<UpdateDiskBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateDisk200>(
      {url: `/linode/instances/${linodeId}/disks/${diskId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateDiskBody
    },
      options);
    }
  
/**
 * Deletes a Disk you have permission to `read_write`.

**Deleting a Disk is a destructive action and cannot be undone.**

 * @summary Disk Delete
 */
const deleteDisk = (
    linodeId: number,
    diskId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteDisk200>(
      {url: `/linode/instances/${linodeId}/disks/${diskId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Copies a disk, byte-for-byte, into a new Disk belonging to the same Linode. The Linode must have enough storage space available to accept a new Disk of the same size as this one or this operation will fail.

 * @summary Disk Clone
 */
const cloneLinodeDisk = (
    linodeId: number,
    diskId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CloneLinodeDisk200>(
      {url: `/linode/instances/${linodeId}/disks/${diskId}/clone`, method: 'post'
    },
      options);
    }
  
/**
 * Resets the password of a Disk you have permission to `read_write`.

 * @summary Disk Root Password Reset
 */
const resetDiskPassword = (
    linodeId: number,
    diskId: number,
    resetDiskPasswordBody: BodyType<ResetDiskPasswordBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ResetDiskPassword200>(
      {url: `/linode/instances/${linodeId}/disks/${diskId}/password`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: resetDiskPasswordBody
    },
      options);
    }
  
/**
 * Resizes a Disk you have permission to `read_write`.

The Disk must not be in use. If the Disk is in use, the request will
succeed but the resize will ultimately fail. For a request to succeed,
the Linode must be shut down prior to resizing the Disk, or the Disk
must not be assigned to the Linode's active Configuration Profile.

If you are resizing the Disk to a smaller size, it cannot be made smaller
than what is required by the total size of the files current on the Disk.

 * @summary Disk Resize
 */
const resizeDisk = (
    linodeId: number,
    diskId: number,
    resizeDiskBody: BodyType<ResizeDiskBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ResizeDisk200>(
      {url: `/linode/instances/${linodeId}/disks/${diskId}/resize`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: resizeDiskBody
    },
      options);
    }
  
/**
 * View Firewall information for Firewalls assigned to this Linode.

 * @summary Firewalls List
 */
const getLinodeFirewalls = (
    linodeId: number,
    params?: GetLinodeFirewallsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeFirewalls200>(
      {url: `/linode/instances/${linodeId}/firewalls`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Returns networking information for a single Linode.

 * @summary Networking Information List
 */
const getLinodeIPs = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeIPs200>(
      {url: `/linode/instances/${linodeId}/ips`, method: 'get'
    },
      options);
    }
  
/**
 * Allocates a public or private IPv4 address to a Linode. Public IP Addresses, after the one included with each Linode, incur an additional monthly charge. If you need an additional public IP Address you must request one - please [open a support ticket](/docs/api/support/#support-ticket-open). You may not add more than one private IPv4 address to a single Linode.

 * @summary IPv4 Address Allocate
 */
const addLinodeIP = (
    linodeId: number,
    addLinodeIPBody: BodyType<AddLinodeIPBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AddLinodeIP200>(
      {url: `/linode/instances/${linodeId}/ips`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addLinodeIPBody
    },
      options);
    }
  
/**
 * View information about the specified IP address associated with the specified Linode.

 * @summary IP Address View
 */
const getLinodeIP = (
    linodeId: number,
    address: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeIP200>(
      {url: `/linode/instances/${linodeId}/ips/${address}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates the reverse DNS (RDNS) for a Linode's IP Address. This may be done for both IPv4 and IPv6 addresses.

Setting the RDNS to `null` for a public IPv4 address, resets it to the default "ip.linodeusercontent.com" RDNS value.

 * @summary IP Address RDNS Update
 */
const updateLinodeIP = (
    linodeId: number,
    address: string,
    updateLinodeIPBody: BodyType<UpdateLinodeIPBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateLinodeIP200>(
      {url: `/linode/instances/${linodeId}/ips/${address}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateLinodeIPBody
    },
      options);
    }
  
/**
 * Deletes a public or private IPv4 address associated with this Linode. This will fail if it is the Linode's last remaining public IPv4 address.

 * @summary IPv4 Address Delete
 */
const removeLinodeIP = (
    linodeId: number,
    address: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RemoveLinodeIP200>(
      {url: `/linode/instances/${linodeId}/ips/${address}`, method: 'delete'
    },
      options);
    }
  
/**
 * Lists available Kernels.

Due to the extensive list of available kernels, please keep [pagination](/docs/api/#pagination) controls in mind when managing responses to this command.

 * @summary Kernels List
 */
const getKernels = (
    params?: GetKernelsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetKernels200>(
      {url: `/linode/kernels`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Returns information about a single Kernel.

 * @summary Kernel View
 */
const getKernel = (
    kernelId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetKernel200>(
      {url: `/linode/kernels/${kernelId}`, method: 'get'
    },
      options);
    }
  
/**
 * Initiate a pending host migration that has been scheduled by Linode or
initiate a cross data center (DC) migration.  A list of pending migrations,
if any, can be accessed from [GET /account/notifications](/docs/api/account/#notifications-list).
When the migration begins, your Linode will be shutdown if not already off.
If the migration initiated the shutdown, it will reboot the Linode when completed.

To initiate a cross DC migration, you must pass a `region` parameter to the
request body specifying the target data center region.
You can view a list of all available regions and their feature capabilities
from [GET /regions](/docs/api/regions/#regions-list). See our [Pricing Page](https://www.linode.com/pricing/) for Region-specific pricing, which applies after migration is complete. If your Linode has a DC migration already queued
or you have initiated a previously scheduled migration, you will not be able to initiate
a DC migration until it has completed.

**Note:** Next Generation Network (NGN) data centers do not support IPv6 `/116` pools or IP Failover.
If you have these features enabled on your Linode and attempt to migrate to an NGN data center,
the migration will not initiate. If a Linode cannot be migrated because of an incompatibility,
you will be prompted to select a different data center or contact support.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. If a VLAN is attached to your Linode and you attempt to migrate it to a non-NGN data center, the migration will not initiate. If a Linode cannot be migrated because of an incompatibility, you will be prompted to select a different data center or contact support.

 * @summary DC Migration/Pending Host Migration Initiate
 */
const migrateLinodeInstance = (
    linodeId: number,
    migrateLinodeInstanceBody: BodyType<MigrateLinodeInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MigrateLinodeInstance200>(
      {url: `/linode/instances/${linodeId}/migrate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: migrateLinodeInstanceBody
    },
      options);
    }
  
/**
 * Linodes created with now-deprecated Types are entitled to a free upgrade to the next generation. A mutating Linode will be allocated any new resources the upgraded Type provides, and will be subsequently restarted if it was currently running.
If any actions are currently running or queued, those actions must be completed first before you can initiate a mutate.

 * @summary Linode Upgrade
 */
const mutateLinodeInstance = (
    linodeId: number,
    mutateLinodeInstanceBody: BodyType<MutateLinodeInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MutateLinodeInstance200>(
      {url: `/linode/instances/${linodeId}/mutate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: mutateLinodeInstanceBody
    },
      options);
    }
  
/**
 * Returns a list of NodeBalancers that are assigned to this Linode and readable by the requesting User.

Read permission to a NodeBalancer can be given to a User by accessing the User's Grants Update
([PUT /account/users/{username}/grants](/docs/api/account/#users-grants-update)) endpoint.

 * @summary Linode NodeBalancers View
 */
const getLinodeNodeBalancers = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeNodeBalancers200>(
      {url: `/linode/instances/${linodeId}/nodebalancers`, method: 'get'
    },
      options);
    }
  
/**
 * Resets the root password for this Linode.
* Your Linode must be [shut down](/docs/api/linode-instances/#linode-shut-down) for a password reset to complete.
* If your Linode has more than one disk (not counting its swap disk), use the [Reset Disk Root Password](/docs/api/linode-instances/#disk-root-password-reset) endpoint to update a specific disk's root password.
* A `password_reset` event is generated when a root password reset is successful.

 * @summary Linode Root Password Reset
 */
const resetLinodePassword = (
    linodeId: number,
    resetLinodePasswordBody: BodyType<ResetLinodePasswordBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ResetLinodePassword200>(
      {url: `/linode/instances/${linodeId}/password`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: resetLinodePasswordBody
    },
      options);
    }
  
/**
 * Reboots a Linode you have permission to modify. If any actions are currently running or queued, those actions must be completed first before you can initiate a reboot.

 * @summary Linode Reboot
 */
const rebootLinodeInstance = (
    linodeId: number,
    rebootLinodeInstanceBody: BodyType<RebootLinodeInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RebootLinodeInstance200>(
      {url: `/linode/instances/${linodeId}/reboot`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: rebootLinodeInstanceBody
    },
      options);
    }
  
/**
 * Rebuilds a Linode you have the `read_write` permission to modify.

A rebuild will first shut down the Linode, delete all disks and configs
on the Linode, and then deploy a new `image` to the Linode with the given
attributes. Additionally:

  * Requires an `image` be supplied.
  * Requires a `root_pass` be supplied to use for the root User's Account.
  * It is recommended to supply SSH keys for the root User using the
    `authorized_keys` field.
  * Linodes utilizing Metadata (`"has_user_data": true`) should include `metadata.user_data` in the rebuild request to continue using the service.

You also have the option to resize the Linode to a different plan by including the `type` parameter with your request. Note that resizing involves migrating the Linode to a new hardware host, while rebuilding without resizing maintains the same hardware host. Resizing also requires significantly more time for completion of this command. The following additional conditions apply:

  * The Linode must not have a pending migration.
  * Your Account cannot have an outstanding balance.
  * The Linode must not have more disk allocation than the new Type allows.
    * In that situation, you must first delete or resize the disk to be smaller.

 * @summary Linode Rebuild
 */
const rebuildLinodeInstance = (
    linodeId: number,
    rebuildLinodeInstanceBody: BodyType<RebuildLinodeInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RebuildLinodeInstance200>(
      {url: `/linode/instances/${linodeId}/rebuild`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: rebuildLinodeInstanceBody
    },
      options);
    }
  
/**
 * Rescue Mode is a safe environment for performing many system recovery and disk management tasks. Rescue Mode is based on the Finnix recovery distribution, a self-contained and bootable Linux distribution. You can also use Rescue Mode for tasks other than disaster recovery, such as formatting disks to use different filesystems, copying data between disks, and downloading files from a disk via SSH and SFTP.
* Note that "sdh" is reserved and unavailable during rescue.

 * @summary Linode Boot into Rescue Mode
 */
const rescueLinodeInstance = (
    linodeId: number,
    rescueLinodeInstanceBody: BodyType<RescueLinodeInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RescueLinodeInstance200>(
      {url: `/linode/instances/${linodeId}/rescue`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: rescueLinodeInstanceBody
    },
      options);
    }
  
/**
 * Resizes a Linode you have the `read_write` permission to a different Type. If any actions are currently running or queued, those actions must be completed first before you can initiate a resize. Additionally, the following criteria must be met in order to resize a Linode:

  * The Linode must not have a pending migration.
  * Your Account cannot have an outstanding balance.
  * The Linode must not have more disk allocation than the new Type allows.
    * In that situation, you must first delete or resize the disk to be smaller.

You can also resize a Linode when using the [Linode Rebuild](/docs/api/linode-instances/#linode-rebuild) command.

 * @summary Linode Resize
 */
const resizeLinodeInstance = (
    linodeId: number,
    resizeLinodeInstanceBody: BodyType<ResizeLinodeInstanceBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ResizeLinodeInstance200>(
      {url: `/linode/instances/${linodeId}/resize`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: resizeLinodeInstanceBody
    },
      options);
    }
  
/**
 * Shuts down a Linode you have permission to modify. If any actions are currently running or queued, those actions must be completed first before you can initiate a shutdown.

 * @summary Linode Shut Down
 */
const shutdownLinodeInstance = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ShutdownLinodeInstance200>(
      {url: `/linode/instances/${linodeId}/shutdown`, method: 'post'
    },
      options);
    }
  
/**
 * Returns a Linode's network transfer pool statistics for the current month.

 * @summary Network Transfer View
 */
const getLinodeTransfer = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeTransfer200>(
      {url: `/linode/instances/${linodeId}/transfer`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a Linode's network transfer statistics for a specific month. The year/month values must be either a date in the past, or the current month.

 * @summary Network Transfer View (year/month)
 */
const getLinodeTransferByYearMonth = (
    linodeId: number,
    year: number,
    month: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeTransferByYearMonth200>(
      {url: `/linode/instances/${linodeId}/transfer/${year}/${month}`, method: 'get'
    },
      options);
    }
  
/**
 * Returns CPU, IO, IPv4, and IPv6 statistics for your Linode for the past 24 hours.

 * @summary Linode Statistics View
 */
const getLinodeStats = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeStats200>(
      {url: `/linode/instances/${linodeId}/stats`, method: 'get'
    },
      options);
    }
  
/**
 * Returns statistics for a specific month. The year/month values must be either a date in the past, or the current month. If the current month, statistics will be retrieved for the past 30 days.

 * @summary Statistics View (year/month)
 */
const getLinodeStatsByYearMonth = (
    linodeId: number,
    year: number,
    month: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeStatsByYearMonth200>(
      {url: `/linode/instances/${linodeId}/stats/${year}/${month}`, method: 'get'
    },
      options);
    }
  
/**
 * View Block Storage Volumes attached to this Linode.

 * @summary Linode's Volumes List
 */
const getLinodeVolumes = (
    linodeId: number,
    params?: GetLinodeVolumesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeVolumes200>(
      {url: `/linode/instances/${linodeId}/volumes`, method: 'get',
        params
    },
      options);
    }
  
/**
 * If the request is not authenticated, only public StackScripts are returned.

For more information on StackScripts, please read our [StackScripts documentation](/docs/products/tools/stackscripts/).

 * @summary StackScripts List
 */
const getStackScripts = (
    params?: GetStackScriptsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetStackScripts200>(
      {url: `/linode/stackscripts`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a StackScript in your Account.

 * @summary StackScript Create
 */
const addStackScript = (
    addStackScriptBodyAllOf: BodyType<NonReadonly<AddStackScriptBodyAllOf>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AddStackScript200>(
      {url: `/linode/stackscripts`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addStackScriptBodyAllOf
    },
      options);
    }
  
/**
 * Returns all of the information about a specified StackScript, including the contents of the script.

 * @summary StackScript View
 */
const getStackScript = (
    stackscriptId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetStackScript200>(
      {url: `/linode/stackscripts/${stackscriptId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a StackScript.

**Once a StackScript is made public, it cannot be made private.**

 * @summary StackScript Update
 */
const updateStackScript = (
    stackscriptId: string,
    updateStackScriptBody: BodyType<NonReadonly<UpdateStackScriptBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateStackScript200>(
      {url: `/linode/stackscripts/${stackscriptId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateStackScriptBody
    },
      options);
    }
  
/**
 * Deletes a private StackScript you have permission to `read_write`. You cannot delete a public StackScript.

 * @summary StackScript Delete
 */
const deleteStackScript = (
    stackscriptId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteStackScript200>(
      {url: `/linode/stackscripts/${stackscriptId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns collection of Linode Types, including pricing and specifications for each Type. These are used when [creating](/docs/api/linode-instances/#linode-create) or [resizing](/docs/api/linode-instances/#linode-resize) Linodes.

 * @summary Types List
 */
const getLinodeTypes = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeTypes200>(
      {url: `/linode/types`, method: 'get'
    },
      options);
    }
  
/**
 * Returns information about a specific Linode Type, including pricing and specifications. This is used when [creating](/docs/api/linode-instances/#linode-create) or [resizing](/docs/api/linode-instances/#linode-resize) Linodes.

 * @summary Type View
 */
const getLinodeType = (
    typeId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLinodeType200>(
      {url: `/linode/types/${typeId}`, method: 'get'
    },
      options);
    }
  
/**
 * Lists current Kubernetes clusters available on your account.

 * @summary Kubernetes Clusters List
 */
const getLKEClusters = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKEClusters200>(
      {url: `/lke/clusters`, method: 'get'
    },
      options);
    }
  
/**
 * Creates a Kubernetes cluster. The Kubernetes cluster will be created
asynchronously. You can use the events system to determine when the
Kubernetes cluster is ready to use. Please note that it often takes 2-5 minutes before the
[Kubernetes API server endpoint](/docs/api/linode-kubernetes-engine-lke/#kubernetes-api-endpoints-list) and
the [Kubeconfig file](/docs/api/linode-kubernetes-engine-lke/#kubeconfig-view) for the new cluster
are ready.

 * @summary Kubernetes Cluster Create
 */
const createLKECluster = (
    createLKEClusterBody: BodyType<CreateLKEClusterBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateLKECluster200>(
      {url: `/lke/clusters`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createLKEClusterBody
    },
      options);
    }
  
/**
 * Get a specific Cluster by ID.

 * @summary Kubernetes Cluster View
 */
const getLKECluster = (
    clusterId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKECluster200>(
      {url: `/lke/clusters/${clusterId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a Kubernetes cluster.

 * @summary Kubernetes Cluster Update
 */
const putLKECluster = (
    clusterId: number,
    putLKEClusterBody: BodyType<PutLKEClusterBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PutLKECluster200>(
      {url: `/lke/clusters/${clusterId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: putLKEClusterBody
    },
      options);
    }
  
/**
 * Deletes a Cluster you have permission to `read_write`.

**Deleting a Cluster is a destructive action and cannot be undone.**

Deleting a Cluster:
  - Deletes all Linodes in all pools within this Kubernetes cluster
  - Deletes all supporting Kubernetes services for this Kubernetes
    cluster (API server, etcd, etc)
  - Deletes all NodeBalancers created by this Kubernetes cluster
  - Does not delete any of the volumes created by this Kubernetes
    cluster

 * @summary Kubernetes Cluster Delete
 */
const deleteLKECluster = (
    clusterId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteLKECluster200>(
      {url: `/lke/clusters/${clusterId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns all active Node Pools on a Kubernetes cluster.

 * @summary Node Pools List
 */
const getLKEClusterPools = (
    clusterId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKEClusterPools200>(
      {url: `/lke/clusters/${clusterId}/pools`, method: 'get'
    },
      options);
    }
  
/**
 * Creates a new Node Pool for the designated Kubernetes cluster.

 * @summary Node Pool Create
 */
const postLKEClusterPools = (
    clusterId: number,
    postLKEClusterPoolsBodyAllOf: BodyType<PostLKEClusterPoolsBodyAllOf>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostLKEClusterPools200>(
      {url: `/lke/clusters/${clusterId}/pools`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postLKEClusterPoolsBodyAllOf
    },
      options);
    }
  
/**
 * Recycles all nodes in all pools of a designated Kubernetes Cluster. All Linodes within the Cluster will be deleted
and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are
installed with the latest available [patch version](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/release/versioning.md#kubernetes-release-versioning) for the Cluster's current Kubernetes minor release.

**Any local storage on deleted Linodes (such as "hostPath" and "emptyDir" volumes, or "local" PersistentVolumes) will be erased.**

 * @summary Cluster Nodes Recycle
 */
const postLKEClusterRecycle = (
    clusterId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostLKEClusterRecycle200>(
      {url: `/lke/clusters/${clusterId}/recycle`, method: 'post'
    },
      options);
    }
  
/**
 * Get a specific Node Pool by ID.

 * @summary Node Pool View
 */
const getLKENodePool = (
    clusterId: number,
    poolId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKENodePool200>(
      {url: `/lke/clusters/${clusterId}/pools/${poolId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a Node Pool's count and autoscaler configuration.

Linodes will be created or deleted to match changes to the Node Pool's count.

**Any local storage on deleted Linodes (such as "hostPath" and "emptyDir" volumes, or "local" PersistentVolumes) will be erased.**

 * @summary Node Pool Update
 */
const putLKENodePool = (
    clusterId: number,
    poolId: number,
    putLKENodePoolBody: BodyType<PutLKENodePoolBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PutLKENodePool200>(
      {url: `/lke/clusters/${clusterId}/pools/${poolId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: putLKENodePoolBody
    },
      options);
    }
  
/**
 * Delete a specific Node Pool from a Kubernetes cluster.

**Deleting a Node Pool is a destructive action and cannot be undone.**

Deleting a Node Pool will delete all Linodes within that Pool.

 * @summary Node Pool Delete
 */
const deleteLKENodePool = (
    clusterId: number,
    poolId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteLKENodePool200>(
      {url: `/lke/clusters/${clusterId}/pools/${poolId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Recycles a Node Pool for the designated Kubernetes Cluster. All Linodes within the Node Pool will be deleted
and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are
installed with the latest available patch for the Cluster's Kubernetes Version.

**Any local storage on deleted Linodes (such as "hostPath" and "emptyDir" volumes, or "local" PersistentVolumes) will be erased.**

 * @summary Node Pool Recycle
 */
const postLKEClusterPoolRecycle = (
    clusterId: number,
    poolId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostLKEClusterPoolRecycle200>(
      {url: `/lke/clusters/${clusterId}/pools/${poolId}/recycle`, method: 'post'
    },
      options);
    }
  
/**
 * Returns the values for a specified node object.

 * @summary Node View
 */
const getLKEClusterNode = (
    clusterId: number,
    nodeId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKEClusterNode200>(
      {url: `/lke/clusters/${clusterId}/nodes/${nodeId}`, method: 'get'
    },
      options);
    }
  
/**
 * Deletes a specific Node from a Node Pool.

**Deleting a Node is a destructive action and cannot be undone.**

Deleting a Node will reduce the size of the Node Pool it belongs to.

 * @summary Node Delete
 */
const deleteLKEClusterNode = (
    clusterId: number,
    nodeId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteLKEClusterNode200>(
      {url: `/lke/clusters/${clusterId}/nodes/${nodeId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Recycles an individual Node in the designated Kubernetes Cluster. The Node will be deleted
and replaced with a new Linode, which may take a few minutes. Replacement Nodes are
installed with the latest available patch for the Cluster's Kubernetes Version.

**Any local storage on deleted Linodes (such as "hostPath" and "emptyDir" volumes, or "local" PersistentVolumes) will be erased.**

 * @summary Node Recycle
 */
const postLKEClusterNodeRecycle = (
    clusterId: number,
    nodeId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostLKEClusterNodeRecycle200>(
      {url: `/lke/clusters/${clusterId}/nodes/${nodeId}/recycle`, method: 'post'
    },
      options);
    }
  
/**
 * List the Kubernetes API server endpoints for this cluster. Please note that it often takes 2-5 minutes before the endpoint is ready after first [creating a new cluster](/docs/api/linode-kubernetes-engine-lke/#kubernetes-cluster-create).

 * @summary Kubernetes API Endpoints List
 */
const getLKEClusterAPIEndpoints = (
    clusterId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKEClusterAPIEndpoints200>(
      {url: `/lke/clusters/${clusterId}/api-endpoints`, method: 'get'
    },
      options);
    }
  
/**
 * Get a [Kubernetes Dashboard](https://github.com/kubernetes/dashboard) access URL for this Cluster, which enables performance of administrative tasks through a web interface.

Dashboards are installed for Clusters by default.

To access the Cluster Dashboard login prompt, enter the URL in a web browser. Select either **Token** or **Kubeconfig** authentication, then select **Sign in**.

For additional guidance on using the Cluster Dashboard, see the [Navigating the Cluster Dashboard](/docs/guides/using-the-kubernetes-dashboard-on-lke/#navigating-the-cluster-dashboard) section of our guide on [Using the Kubernetes Dashboard on LKE](/docs/guides/using-the-kubernetes-dashboard-on-lke/).

 * @summary Kubernetes Cluster Dashboard URL View
 */
const getLKEClusterDashboard = (
    clusterId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKEClusterDashboard200>(
      {url: `/lke/clusters/${clusterId}/dashboard`, method: 'get'
    },
      options);
    }
  
/**
 * Get the Kubeconfig file for a Cluster. Please note that it often takes 2-5 minutes before
the Kubeconfig file is ready after first [creating a new cluster](/docs/api/linode-kubernetes-engine-lke/#kubernetes-cluster-create).

 * @summary Kubeconfig View
 */
const getLKEClusterKubeconfig = (
    clusterId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKEClusterKubeconfig200>(
      {url: `/lke/clusters/${clusterId}/kubeconfig`, method: 'get'
    },
      options);
    }
  
/**
 * Delete and regenerate the Kubeconfig file for a Cluster.

 * @summary Kubeconfig Delete
 */
const deleteLKEClusterKubeconfig = (
    clusterId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteLKEClusterKubeconfig200>(
      {url: `/lke/clusters/${clusterId}/kubeconfig`, method: 'delete'
    },
      options);
    }
  
/**
 * Regenerate the Kubeconfig file and/or the service account token for a Cluster.

This is a helper command that allows performing both the [Kubeconfig Delete](#kubeconfig-delete) and the [Service Token Delete](#service-token-delete) actions with a single request.

When using this command, at least one of `kubeconfig` or `servicetoken` is required.

**Note**: When regenerating a service account token, the Cluster's control plane components and Linode CSI drivers are also restarted and configured with the new token. High Availability Clusters should not experience any disruption, while standard Clusters may experience brief control plane downtime while components are restarted.

 * @summary Kubernetes Cluster Regenerate
 */
const postLKEClusterRegenerate = (
    clusterId: number,
    postLKEClusterRegenerateBody: BodyType<PostLKEClusterRegenerateBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostLKEClusterRegenerate200>(
      {url: `/lke/clusters/${clusterId}/regenerate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postLKEClusterRegenerateBody
    },
      options);
    }
  
/**
 * Delete and regenerate the service account token for a Cluster.

**Note**: When regenerating a service account token, the Cluster's control plane components and Linode CSI drivers are also restarted and configured with the new token. High Availability Clusters should not experience any disruption, while standard Clusters may experience brief control plane downtime while components are restarted.

 * @summary Service Token Delete
 */
const postLKECServiceTokenDelete = (
    clusterId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostLKECServiceTokenDelete200>(
      {url: `/lke/clusters/${clusterId}/servicetoken`, method: 'delete'
    },
      options);
    }
  
/**
 * List the Kubernetes versions available for deployment to a Kubernetes cluster.

 * @summary Kubernetes Versions List
 */
const getLKEVersions = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKEVersions200>(
      {url: `/lke/versions`, method: 'get'
    },
      options);
    }
  
/**
 * View a Kubernetes version available for deployment to a Kubernetes cluster.

 * @summary Kubernetes Version View
 */
const getLKEVersion = (
    version: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLKEVersion200>(
      {url: `/lke/versions/${version}`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of Longview Clients you have access to. Longview Client is used to monitor stats on your Linode with the help of the Longview Client application.

 * @summary Longview Clients List
 */
const getLongviewClients = (
    params?: GetLongviewClientsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLongviewClients200>(
      {url: `/longview/clients`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a Longview Client.  This Client will not begin monitoring the status of your server until you configure the Longview Client application on your Linode using the returning `install_code` and `api_key`.

 * @summary Longview Client Create
 */
const createLongviewClient = (
    createLongviewClientBody: BodyType<NonReadonly<CreateLongviewClientBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateLongviewClient200>(
      {url: `/longview/clients`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createLongviewClientBody
    },
      options);
    }
  
/**
 * Returns a single Longview Client you can access.

 * @summary Longview Client View
 */
const getLongviewClient = (
    clientId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLongviewClient200>(
      {url: `/longview/clients/${clientId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a Longview Client.  This cannot update how it monitors your server; use the Longview Client application on your Linode for monitoring configuration.

 * @summary Longview Client Update
 */
const updateLongviewClient = (
    clientId: number,
    updateLongviewClientBody: BodyType<NonReadonly<UpdateLongviewClientBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateLongviewClient200>(
      {url: `/longview/clients/${clientId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateLongviewClientBody
    },
      options);
    }
  
/**
 * Deletes a Longview Client from your Account.

**All information stored for this client will be lost.**

This _does not_ uninstall the Longview Client application for your Linode - you must do that manually.

 * @summary Longview Client Delete
 */
const deleteLongviewClient = (
    clientId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteLongviewClient200>(
      {url: `/longview/clients/${clientId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Get the details of your current Longview plan. This returns a `LongviewSubscription` object for your current Longview Pro plan, or an empty set `{}` if your current plan is Longview Free.

You must have at least one of the following `global` [User Grants](/docs/api/account/#users-grants-view) in order to access this endpoint:

  - `"account_access": read_write`
  - `"account_access": read_only`
  - `"longview_subscription": true`
  - `"add_longview": true`


To update your subscription plan, send a request to [Update Longview Plan](/docs/api/longview/#longview-plan-update).

 * @summary Longview Plan View
 */
const getLongviewPlan = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLongviewPlan200>(
      {url: `/longview/plan`, method: 'get'
    },
      options);
    }
  
/**
 * Update your Longview plan to that of the given subcription ID. This returns a `LongviewSubscription` object for the updated Longview Pro plan, or an empty set `{}` if the updated plan is Longview Free.

You must have `"longview_subscription": true` configured as a `global` [User Grant](/docs/api/account/#users-grants-view) in order to access this endpoint.

You can send a request to the [List Longview Subscriptions](/docs/api/longview/#longview-subscriptions-list) endpoint to receive the details, including `id`'s, of each plan.

 * @summary Longview Plan Update
 */
const updateLongviewPlan = (
    updateLongviewPlanBody: BodyType<UpdateLongviewPlanBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateLongviewPlan200>(
      {url: `/longview/plan`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateLongviewPlanBody
    },
      options);
    }
  
/**
 * Returns a paginated list of available Longview Subscriptions. This is a public endpoint and requires no authentication.

 * @summary Longview Subscriptions List
 */
const getLongviewSubscriptions = (
    params?: GetLongviewSubscriptionsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLongviewSubscriptions200>(
      {url: `/longview/subscriptions`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get the Longview plan details as a single `LongviewSubscription` object for the provided subscription ID. This is a public endpoint and requires no authentication.

 * @summary Longview Subscription View
 */
const getLongviewSubscription = (
    subscriptionId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetLongviewSubscription200>(
      {url: `/longview/subscriptions/${subscriptionId}`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of Managed Contacts on your Account.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Contacts List
 */
const getManagedContacts = (
    params?: GetManagedContactsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedContacts200>(
      {url: `/managed/contacts`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a Managed Contact.  A Managed Contact is someone Linode
special forces can contact in the course of attempting to resolve an issue
with a Managed Service.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Contact Create
 */
const createManagedContact = (
    createManagedContactBody: BodyType<NonReadonly<CreateManagedContactBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateManagedContact200>(
      {url: `/managed/contacts`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createManagedContactBody
    },
      options);
    }
  
/**
 * Returns a single Managed Contact.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Contact View
 */
const getManagedContact = (
    contactId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedContact200>(
      {url: `/managed/contacts/${contactId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates information about a Managed Contact.
This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Contact Update
 */
const updateManagedContact = (
    contactId: number,
    updateManagedContactBody: BodyType<NonReadonly<UpdateManagedContactBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateManagedContact200>(
      {url: `/managed/contacts/${contactId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateManagedContactBody
    },
      options);
    }
  
/**
 * Deletes a Managed Contact.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Contact Delete
 */
const deleteManagedContact = (
    contactId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteManagedContact200>(
      {url: `/managed/contacts/${contactId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a paginated list of Managed Credentials on your Account.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Credentials List
 */
const getManagedCredentials = (
    params?: GetManagedCredentialsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedCredentials200>(
      {url: `/managed/credentials`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a Managed Credential. A Managed Credential is stored securely
to allow Linode special forces to access your Managed Services and resolve
issues.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Credential Create
 */
const createManagedCredential = (
    createManagedCredentialBody: BodyType<NonReadonly<CreateManagedCredentialBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateManagedCredential200>(
      {url: `/managed/credentials`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createManagedCredentialBody
    },
      options);
    }
  
/**
 * Returns a single Managed Credential.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Credential View
 */
const getManagedCredential = (
    credentialId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedCredential200>(
      {url: `/managed/credentials/${credentialId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates the label of a Managed Credential. This endpoint does not update the username and password for a Managed Credential. To do this, use the Managed Credential Username and Password Update ([POST /managed/credentials/{credentialId}/update](/docs/api/managed/#managed-credential-username-and-password-update)) endpoint instead.
This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Credential Update
 */
const updateManagedCredential = (
    credentialId: number,
    updateManagedCredentialBody: BodyType<NonReadonly<UpdateManagedCredentialBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateManagedCredential200>(
      {url: `/managed/credentials/${credentialId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateManagedCredentialBody
    },
      options);
    }
  
/**
 * Updates the username and password for a Managed Credential.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Credential Username and Password Update
 */
const updateManagedCredentialUsernamePassword = (
    credentialId: number,
    updateManagedCredentialUsernamePasswordBody: BodyType<UpdateManagedCredentialUsernamePasswordBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateManagedCredentialUsernamePassword200>(
      {url: `/managed/credentials/${credentialId}/update`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateManagedCredentialUsernamePasswordBody
    },
      options);
    }
  
/**
 * Deletes a Managed Credential.  Linode special forces will no longer
have access to this Credential when attempting to resolve issues.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Credential Delete
 */
const deleteManagedCredential = (
    credentialId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteManagedCredential200>(
      {url: `/managed/credentials/${credentialId}/revoke`, method: 'post'
    },
      options);
    }
  
/**
 * Returns the unique SSH public key assigned to your Linode account's
Managed service. If you [add this public key](/docs/products/services/managed/get-started/#adding-the-public-key) to a Linode on your account,
Linode special forces will be able to log in to the Linode with this key
when attempting to resolve issues.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed SSH Key View
 */
const viewManagedSSHKey = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ViewManagedSSHKey200>(
      {url: `/managed/credentials/sshkey`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of recent and ongoing issues detected on your
Managed Services.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Issues List
 */
const getManagedIssues = (
    params?: GetManagedIssuesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedIssues200>(
      {url: `/managed/issues`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Returns a single Issue that is impacting or did impact one of your
Managed Services.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Issue View
 */
const getManagedIssue = (
    issueId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedIssue200>(
      {url: `/managed/issues/${issueId}`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of Managed Settings for your Linodes. There will
be one entry per Linode on your Account.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Linode Settings List
 */
const getManagedLinodeSettings = (
    params?: GetManagedLinodeSettingsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedLinodeSettings200>(
      {url: `/managed/linode-settings`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Returns a single Linode's Managed settings.

This command can only be accessed by the unrestricted users of an account.

 * @summary Linode's Managed Settings View
 */
const getManagedLinodeSetting = (
    linodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedLinodeSetting200>(
      {url: `/managed/linode-settings/${linodeId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a single Linode's Managed settings.
This command can only be accessed by the unrestricted users of an account.

 * @summary Linode's Managed Settings Update
 */
const updateManagedLinodeSetting = (
    linodeId: number,
    updateManagedLinodeSettingBody: BodyType<NonReadonly<UpdateManagedLinodeSettingBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateManagedLinodeSetting200>(
      {url: `/managed/linode-settings/${linodeId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateManagedLinodeSettingBody
    },
      options);
    }
  
/**
 * Returns a paginated list of Managed Services on your Account. These
are the services Linode Managed is monitoring and will report and attempt
to resolve issues with.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Services List
 */
const getManagedServices = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedServices200>(
      {url: `/managed/services`, method: 'get'
    },
      options);
    }
  
/**
 * Creates a Managed Service. Linode Managed will begin monitoring this
service and reporting and attempting to resolve any Issues.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Service Create
 */
const createManagedService = (
    createManagedServiceBodyAllOf: BodyType<NonReadonly<CreateManagedServiceBodyAllOf>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateManagedService200>(
      {url: `/managed/services`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createManagedServiceBodyAllOf
    },
      options);
    }
  
/**
 * Returns information about a single Managed Service on your Account.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Service View
 */
const getManagedService = (
    serviceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedService200>(
      {url: `/managed/services/${serviceId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates information about a Managed Service.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Service Update
 */
const updateManagedService = (
    serviceId: number,
    updateManagedServiceBody: BodyType<NonReadonly<UpdateManagedServiceBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateManagedService200>(
      {url: `/managed/services/${serviceId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateManagedServiceBody
    },
      options);
    }
  
/**
 * Deletes a Managed Service.  This service will no longer be monitored by
Linode Managed.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Service Delete
 */
const deleteManagedService = (
    serviceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteManagedService200>(
      {url: `/managed/services/${serviceId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Temporarily disables monitoring of a Managed Service.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Service Disable
 */
const disableManagedService = (
    serviceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DisableManagedService200>(
      {url: `/managed/services/${serviceId}/disable`, method: 'post'
    },
      options);
    }
  
/**
 * Enables monitoring of a Managed Service.

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Service Enable
 */
const enableManagedService = (
    serviceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EnableManagedService200>(
      {url: `/managed/services/${serviceId}/enable`, method: 'post'
    },
      options);
    }
  
/**
 * Returns a list of Managed Stats on your Account in the form of x and y data points.
You can use these data points to plot your own graph visualizations. These stats
reflect the last 24 hours of combined usage across all managed Linodes on your account
giving you a high-level snapshot of data for the following:


* cpu
* disk
* swap
* network in
* network out

This command can only be accessed by the unrestricted users of an account.

 * @summary Managed Stats List
 */
const getManagedStats = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetManagedStats200>(
      {url: `/managed/stats`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of IP Addresses on your Account, excluding private addresses.

We recommend utilizing the "skip_ipv6_rdns" option to improve performance if your application frequently accesses this command and does not require IPv6 RDNS data.

 * @summary IP Addresses List
 */
const getIPs = (
    getIPsBody: BodyType<GetIPsBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetIPs200>(
      {url: `/networking/ips`, method: 'get',
      headers: {'Content-Type': 'application/json', }
    },
      options);
    }
  
/**
 * Allocates a new IPv4 Address on your Account. The Linode must be configured to support additional addresses - please [open a support ticket](/docs/api/support/#support-ticket-open) requesting additional addresses before attempting allocation.

 * @summary IP Address Allocate
 */
const allocateIP = (
    allocateIPBody: BodyType<AllocateIPBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AllocateIP200>(
      {url: `/networking/ips`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: allocateIPBody
    },
      options);
    }
  
/**
 * Returns information about a single IP Address on your Account.

 * @summary IP Address View
 */
const getIP = (
    address: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetIP200>(
      {url: `/networking/ips/${address}`, method: 'get'
    },
      options);
    }
  
/**
 * Sets RDNS on an IP Address. Forward DNS must already be set up for reverse DNS to be applied. If you set the RDNS to `null` for public IPv4 addresses, it will be reset to the default _ip.linodeusercontent.com_ RDNS value.

 * @summary IP Address RDNS Update
 */
const updateIP = (
    address: string,
    updateIPBody: BodyType<UpdateIPBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateIP200>(
      {url: `/networking/ips/${address}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateIPBody
    },
      options);
    }
  
/**
 * Assign multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in one Region. This allows swapping, shuffling, or otherwise reorganizing IPs to your Linodes.

The following restrictions apply:
* All Linodes involved must have at least one public IPv4 address after assignment.
* Linodes may have no more than one assigned private IPv4 address.
* Linodes may have no more than one assigned IPv6 range.
* Shared IP addresses cannot be swapped between Linodes.

[Open a Support Ticket](/docs/api/support/#support-ticket-open) to request additional IPv4 addresses or IPv6 ranges beyond standard account limits.

**Note**: Removing an IP address that has been set as a Managed Linode's `ssh.ip` causes the Managed Linode's SSH access settings to reset to their default values. To view and configure Managed Linode SSH settings, use the following commands:
* **Linode's Managed Settings View** ([GET /managed/linode-settings/{linodeId}](/docs/api/managed/#linodes-managed-settings-view))
* **Linode's Managed Settings Update** ([PUT /managed/linode-settings/{linodeId}](/docs/api/managed/#linodes-managed-settings-update))

 * @summary IP Addresses Assign
 */
const assignIPs = (
    assignIPsBody: BodyType<AssignIPsBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AssignIPs200>(
      {url: `/networking/ips/assign`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: assignIPsBody
    },
      options);
    }
  
/**
 * Configure shared IPs.

IP sharing allows IP address reassignment (also referred to as IP failover) from one Linode to another if the primary Linode becomes unresponsive. This means that requests to the primary Linode's IP address can be automatically rerouted to secondary Linodes at the configured shared IP addresses.

IP failover requires configuration of a failover service (such as [Keepalived](/docs/guides/ip-failover-keepalived)) within the internal system of the primary Linode.

 * @summary IP Addresses Share
 */
const shareIPs = (
    shareIPsBody: BodyType<ShareIPsBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ShareIPs200>(
      {url: `/networking/ips/share`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: shareIPsBody
    },
      options);
    }
  
/**
 * This command is equivalent to **IP Addresses Assign** ([POST /networking/ips/assign](#ip-addresses-assign)).

Assign multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in one Region. This allows swapping, shuffling, or otherwise reorganizing IPs to your Linodes.

The following restrictions apply:
* All Linodes involved must have at least one public IPv4 address after assignment.
* Linodes may have no more than one assigned private IPv4 address.
* Linodes may have no more than one assigned IPv6 range.

[Open a Support Ticket](/docs/api/support/#support-ticket-open) to request additional IPv4 addresses or IPv6 ranges beyond standard account limits.

**Note**: Removing an IP address that has been set as a Managed Linode's `ssh.ip` causes the Managed Linode's SSH access settings to reset to their default values. To view and configure Managed Linode SSH settings, use the following commands:
* **Linode's Managed Settings View** ([GET /managed/linode-settings/{linodeId}](/docs/api/managed/#linodes-managed-settings-view))
* **Linode's Managed Settings Update** ([PUT /managed/linode-settings/{linodeId}](/docs/api/managed/#linodes-managed-settings-update))

 * @summary Linodes Assign IPv4s
 */
const assignIPv4s = (
    assignIPv4sBody: BodyType<AssignIPv4sBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AssignIPv4s200>(
      {url: `/networking/ipv4/assign`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: assignIPv4sBody
    },
      options);
    }
  
/**
 * This command is equivalent to **IP Addresses Share** ([POST /networking/ips/share](#ip-addresses-share)).

Configure shared IPs.

IP sharing allows IP address reassignment (also referred to as IP failover) from one Linode to another if the primary Linode becomes unresponsive. This means that requests to the primary Linode's IP address can be automatically rerouted to secondary Linodes at the configured shared IP addresses.

IP failover requires configuration of a failover service (such as [Keepalived](/docs/guides/ip-failover-keepalived)) within the internal system of the primary Linode.

 * @summary IPv4 Sharing Configure
 */
const shareIPv4s = (
    shareIPv4sBody: BodyType<ShareIPv4sBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ShareIPv4s200>(
      {url: `/networking/ipv4/share`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: shareIPv4sBody
    },
      options);
    }
  
/**
 * Displays the IPv6 pools on your Account. A pool of IPv6 addresses are routed to all of your Linodes in a single [Region](/docs/api/regions/#regions-list). Any Linode on your Account may bring up any address in this pool at any time, with no external configuration required.

 * @summary IPv6 Pools List
 */
const getIPv6Pools = (
    params?: GetIPv6PoolsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetIPv6Pools200>(
      {url: `/networking/ipv6/pools`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Displays the IPv6 ranges on your Account.


  * An IPv6 range is a `/64` or `/54` block of IPv6 addresses routed to a single Linode in a given [Region](/docs/api/regions/#regions-list).

  * Your Linode is responsible for routing individual addresses in the range, or handling traffic for all the addresses in the range.

  * Access the IPv6 Range Create ([POST /networking/ipv6/ranges](/docs/api/networking/#ipv6-range-create)) endpoint to add a `/64` or `/56` block of IPv6 addresses to your account.

 * @summary IPv6 Ranges List
 */
const getIPv6Ranges = (
    params?: GetIPv6RangesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetIPv6Ranges200>(
      {url: `/networking/ipv6/ranges`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates an IPv6 Range and assigns it based on the provided Linode or route target IPv6 SLAAC address. See the `ipv6` property when accessing the Linode View ([GET /linode/instances/{linodeId}](/docs/api/linode-instances/#linode-view)) endpoint to view a Linode's IPv6 SLAAC address.
  * Either `linode_id` or `route_target` is required in a request.
  * `linode_id` and `route_target` are mutually exclusive. Submitting values for both properties in a request results in an error.
  * Upon a successful request, an IPv6 range is created in the [Region](/docs/api/regions/#regions-list) that corresponds to the provided `linode_id` or `route_target`.
  * Your Linode is responsible for routing individual addresses in the range, or handling traffic for all the addresses in the range.
  * Access the IP Addresses Assign ([POST /networking/ips/assign](/docs/api/networking/#ip-addresses-assign)) endpoint to re-assign IPv6 Ranges to your Linodes.

**Note**: The following restrictions apply:
  * A Linode can only have one IPv6 range targeting its SLAAC address.
  * An account can only have one IPv6 range in each [Region](/docs/api/regions/#regions-list).
  * [Open a Support Ticket](/docs/api/support/#support-ticket-open) to request expansion of these restrictions.

 * @summary IPv6 Range Create
 */
const postIPv6Range = (
    postIPv6RangeBody: BodyType<PostIPv6RangeBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostIPv6Range200>(
      {url: `/networking/ipv6/ranges`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postIPv6RangeBody
    },
      options);
    }
  
/**
 * View IPv6 range information.

 * @summary IPv6 Range View
 */
const getIPv6Range = (
    range: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetIPv6Range200>(
      {url: `/networking/ipv6/ranges/${range}`, method: 'get'
    },
      options);
    }
  
/**
 * Removes this IPv6 range from your account and disconnects the range from any assigned Linodes.

**Note:** Shared IPv6 ranges cannot be deleted at this time. Please contact Customer Support for assistance.

 * @summary IPv6 Range Delete
 */
const deleteIPv6Range = (
    range: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteIPv6Range200>(
      {url: `/networking/ipv6/ranges/${range}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a paginated list of accessible Firewalls.

 * @summary Firewalls List
 */
const getFirewalls = (
    params?: GetFirewallsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetFirewalls200>(
      {url: `/networking/firewalls`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a Firewall to filter network traffic.

* Use the `rules` property to create inbound and outbound access rules.

* Use the `devices` property to assign the Firewall to a service and apply its Rules to the device. Requires `read_write` [User's Grants](/docs/api/account/#users-grants-view) to the device.
Currently, Firewalls can be assigned to Linode compute instances and NodeBalancers.

* A Firewall can be assigned to multiple services at a time.

* A service can have one active, assigned Firewall at a time.
Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.

* Firewalls apply to all of a Linode's non-`vlan` purpose Configuration Profile Interfaces.

* Assigned Linodes must not have any ongoing live migrations.

* A `firewall_create` Event is generated when this endpoint returns successfully.

 * @summary Firewall Create
 */
const createFirewalls = (
    createFirewallsBody: BodyType<NonReadonly<CreateFirewallsBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateFirewalls200>(
      {url: `/networking/firewalls`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createFirewallsBody
    },
      options);
    }
  
/**
 * Get a specific Firewall resource by its ID. The Firewall's Devices will not be
returned in the response. Instead, use the
[List Firewall Devices](/docs/api/networking/#firewall-devices-list)
endpoint to review them.

 * @summary Firewall View
 */
const getFirewall = (
    firewallId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetFirewall200>(
      {url: `/networking/firewalls/${firewallId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates information for a Firewall.

* Assigned Linodes must not have any ongoing live migrations.

* If a Firewall's status is changed with this endpoint, a corresponding `firewall_enable` or
`firewall_disable` Event will be generated.

Some parts of a Firewall's configuration cannot
be manipulated by this endpoint:

- A Firewall's Devices cannot be set with this endpoint. Instead, use the
[Create Firewall Device](/docs/api/networking/#firewall-device-create)
and [Delete Firewall Device](/docs/api/networking/#firewall-device-delete)
endpoints to assign and remove this Firewall from services.

- A Firewall's Rules cannot be changed with this endpoint. Instead, use the
[Update Firewall Rules](/docs/api/networking/#firewall-rules-update)
endpoint to update your Rules.

- A Firewall's status can be set to `enabled` or `disabled` by this endpoint, but it cannot be
set to `deleted`. Instead, use the
[Delete Firewall](/docs/api/networking/#firewall-delete)
endpoint to delete a Firewall.

 * @summary Firewall Update
 */
const updateFirewall = (
    firewallId: number,
    updateFirewallBody: BodyType<UpdateFirewallBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateFirewall200>(
      {url: `/networking/firewalls/${firewallId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateFirewallBody
    },
      options);
    }
  
/**
 * Delete a Firewall resource by its ID. This removes all of the Firewall's Rules
from any services that the Firewall was assigned to.

* Assigned Linodes must not have any ongoing live migrations.

* A `firewall_delete` Event is generated when this endpoint returns successfully.

 * @summary Firewall Delete
 */
const deleteFirewall = (
    firewallId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteFirewall200>(
      {url: `/networking/firewalls/${firewallId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a paginated list of a Firewall's Devices. A Firewall Device assigns a Firewall to a service (referred to as the Device's `entity`).

 * @summary Firewall Devices List
 */
const getFirewallDevices = (
    firewallId: number,
    params?: GetFirewallDevicesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetFirewallDevices200>(
      {url: `/networking/firewalls/${firewallId}/devices`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a Firewall Device, which assigns a Firewall to a service (referred to
as the Device's `entity`) and applies the Firewall's Rules to the device.

* Currently, Devices with `linode` and `nodebalancer` entity types are accepted.

* Firewalls only apply to inbound TCP traffic to NodeBalancers.

* A Firewall can be assigned to multiple services at a time.

* A service can have one active, assigned Firewall at a time.
Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.

* Assigned Linodes must not have any ongoing live migrations.

* A `firewall_device_add` Event is generated when the Firewall Device is added successfully.

 * @summary Firewall Device Create
 */
const createFirewallDevice = (
    firewallId: number,
    createFirewallDeviceBodyAllOf: BodyType<NonReadonly<CreateFirewallDeviceBodyAllOf>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateFirewallDevice200>(
      {url: `/networking/firewalls/${firewallId}/devices`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createFirewallDeviceBodyAllOf
    },
      options);
    }
  
/**
 * Returns information for a Firewall Device, which assigns a Firewall
to a service (referred to as the Device's `entity`).

 * @summary Firewall Device View
 */
const getFirewallDevice = (
    firewallId: number,
    deviceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetFirewallDevice200>(
      {url: `/networking/firewalls/${firewallId}/devices/${deviceId}`, method: 'get'
    },
      options);
    }
  
/**
 * Removes a Firewall Device, which removes a Firewall from the service it was
assigned to by the Device. This removes all of the Firewall's Rules from the
service. If any other Firewalls have been assigned to the service, then those Rules
remain in effect.

* Assigned Linodes must not have any ongoing live migrations.

* A `firewall_device_remove` Event is generated when the Firewall Device is removed successfully.

 * @summary Firewall Device Delete
 */
const deleteFirewallDevice = (
    firewallId: number,
    deviceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteFirewallDevice200>(
      {url: `/networking/firewalls/${firewallId}/devices/${deviceId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns the inbound and outbound Rules for a Firewall.

 * @summary Firewall Rules List
 */
const getFirewallRules = (
    firewallId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetFirewallRules200>(
      {url: `/networking/firewalls/${firewallId}/rules`, method: 'get'
    },
      options);
    }
  
/**
 * Updates the inbound and outbound Rules for a Firewall.

* Assigned Linodes must not have any ongoing live migrations.

* **Note:** This command replaces all of a Firewall's `inbound` and `outbound` rulesets with the values specified in your request.

 * @summary Firewall Rules Update
 */
const updateFirewallRules = (
    firewallId: number,
    updateFirewallRulesBody: BodyType<UpdateFirewallRulesBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateFirewallRules200>(
      {url: `/networking/firewalls/${firewallId}/rules`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateFirewallRulesBody
    },
      options);
    }
  
/**
 * Returns a list of all Virtual Local Area Networks (VLANs) on your Account. VLANs provide
a mechanism for secure communication between two or more Linodes that are assigned to the
same VLAN and are both within the same Layer 2 broadcast domain.

VLANs are created and attached to Linodes by using the `interfaces` property for the following endpoints:

- Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))
- Configuration Profile Create ([POST /linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profile-create))
- Configuration Profile Update ([PUT /linode/instances/{linodeId}/configs/{configId}](/docs/api/linode-instances/#configuration-profile-update))

There are several ways to detach a VLAN from a Linode:

- [Update](/docs/api/linode-instances/#configuration-profile-update) the active Configuration Profile to remove the VLAN interface, then [reboot](/docs/api/linode-instances/#linode-reboot) the Linode.
- [Create](/docs/api/linode-instances/#configuration-profile-create) a new Configuration Profile without the VLAN interface, then [reboot](/docs/api/linode-instances/#linode-reboot) the Linode into the new Configuration Profile.
- [Delete](/docs/api/linode-instances/#linode-delete) the Linode.

**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
the migration or cloning will not initiate. If a Linode cannot be migrated because of an incompatibility,
you will be prompted to select a different data center or contact support.

**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) to view additional specifications and limitations.

 * @summary VLANs List
 */
const getVLANs = (
    params?: GetVLANsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetVLANs200>(
      {url: `/networking/vlans`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Returns a paginated list of NodeBalancers you have access to.

 * @summary NodeBalancers List
 */
const getNodeBalancers = (
    params?: GetNodeBalancersParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetNodeBalancers200>(
      {url: `/nodebalancers`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a NodeBalancer in the requested Region.

NodeBalancers require a port Config with at least one backend Node to start serving requests.

When using the Linode CLI to create a NodeBalancer, first create a NodeBalancer without any Configs. Then, create Configs and Nodes for that NodeBalancer with the respective [Config Create](/docs/api/nodebalancers/#config-create) and [Node Create](/docs/api/nodebalancers/#node-create) commands.

 * @summary NodeBalancer Create
 */
const createNodeBalancer = (
    createNodeBalancerBody: BodyType<CreateNodeBalancerBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateNodeBalancer200>(
      {url: `/nodebalancers`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createNodeBalancerBody
    },
      options);
    }
  
/**
 * Returns a single NodeBalancer you can access.

 * @summary NodeBalancer View
 */
const getNodeBalancer = (
    nodeBalancerId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetNodeBalancer200>(
      {url: `/nodebalancers/${nodeBalancerId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates information about a NodeBalancer you can access.

 * @summary NodeBalancer Update
 */
const updateNodeBalancer = (
    nodeBalancerId: number,
    updateNodeBalancerBody: BodyType<NonReadonly<UpdateNodeBalancerBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateNodeBalancer200>(
      {url: `/nodebalancers/${nodeBalancerId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateNodeBalancerBody
    },
      options);
    }
  
/**
 * Deletes a NodeBalancer.

**This is a destructive action and cannot be undone.**

Deleting a NodeBalancer will also delete all associated Configs and Nodes, although the backend servers represented by the Nodes will not be changed or removed. Deleting a NodeBalancer will cause you to lose access to the IP Addresses assigned to this NodeBalancer.

 * @summary NodeBalancer Delete
 */
const deleteNodeBalancer = (
    nodeBalancerId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteNodeBalancer200>(
      {url: `/nodebalancers/${nodeBalancerId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a paginated list of NodeBalancer Configs associated with this NodeBalancer. NodeBalancer Configs represent individual ports that this NodeBalancer will accept traffic on, one Config per port.

For example, if you wanted to accept standard HTTP traffic, you would need a Config listening on port 80.

 * @summary Configs List
 */
const getNodeBalancerConfigs = (
    nodeBalancerId: number,
    params?: GetNodeBalancerConfigsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetNodeBalancerConfigs200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a NodeBalancer Config, which allows the NodeBalancer to accept traffic on a new port. You will need to add NodeBalancer Nodes to the new Config before it can actually serve requests.

 * @summary Config Create
 */
const createNodeBalancerConfig = (
    nodeBalancerId: number,
    createNodeBalancerConfigBody: BodyType<NonReadonly<CreateNodeBalancerConfigBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateNodeBalancerConfig200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createNodeBalancerConfigBody
    },
      options);
    }
  
/**
 * Returns configuration information for a single port of this NodeBalancer.

 * @summary Config View
 */
const getNodeBalancerConfig = (
    nodeBalancerId: number,
    configId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetNodeBalancerConfig200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs/${configId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates the configuration for a single port on a NodeBalancer.

 * @summary Config Update
 */
const updateNodeBalancerConfig = (
    nodeBalancerId: number,
    configId: number,
    updateNodeBalancerConfigBody: BodyType<NonReadonly<UpdateNodeBalancerConfigBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateNodeBalancerConfig200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs/${configId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateNodeBalancerConfigBody
    },
      options);
    }
  
/**
 * Deletes the Config for a port of this NodeBalancer.

**This cannot be undone.**

Once completed, this NodeBalancer will no longer respond to requests on the given port. This also deletes all associated NodeBalancerNodes, but the Linodes they were routing traffic to will be unchanged and will not be removed.

 * @summary Config Delete
 */
const deleteNodeBalancerConfig = (
    nodeBalancerId: number,
    configId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteNodeBalancerConfig200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs/${configId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Rebuilds a NodeBalancer Config and its Nodes that you have permission to modify.

Use this command to update a NodeBalancer's Config and Nodes with a single request.

 * @summary Config Rebuild
 */
const rebuildNodeBalancerConfig = (
    nodeBalancerId: number,
    configId: number,
    rebuildNodeBalancerConfigBody: BodyType<NonReadonly<RebuildNodeBalancerConfigBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RebuildNodeBalancerConfig200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs/${configId}/rebuild`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: rebuildNodeBalancerConfigBody
    },
      options);
    }
  
/**
 * Returns a paginated list of NodeBalancer nodes associated with this Config. These are the backends that will be sent traffic for this port.

 * @summary Nodes List
 */
const getNodeBalancerConfigNodes = (
    nodeBalancerId: number,
    configId: number,
    params?: GetNodeBalancerConfigNodesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetNodeBalancerConfigNodes200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs/${configId}/nodes`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a NodeBalancer Node, a backend that can accept traffic for this NodeBalancer Config. Nodes are routed requests on the configured port based on their status.

 * @summary Node Create
 */
const createNodeBalancerNode = (
    nodeBalancerId: number,
    configId: number,
    createNodeBalancerNodeBodyAllOf: BodyType<NonReadonly<CreateNodeBalancerNodeBodyAllOf>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateNodeBalancerNode200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs/${configId}/nodes`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createNodeBalancerNodeBodyAllOf
    },
      options);
    }
  
/**
 * Returns information about a single Node, a backend for this NodeBalancer's configured port.

 * @summary Node View
 */
const getNodeBalancerNode = (
    nodeBalancerId: number,
    configId: number,
    nodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetNodeBalancerNode200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs/${configId}/nodes/${nodeId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates information about a Node, a backend for this NodeBalancer's configured port.

 * @summary Node Update
 */
const updateNodeBalancerNode = (
    nodeBalancerId: number,
    configId: number,
    nodeId: number,
    updateNodeBalancerNodeBody: BodyType<NonReadonly<UpdateNodeBalancerNodeBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateNodeBalancerNode200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs/${configId}/nodes/${nodeId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateNodeBalancerNodeBody
    },
      options);
    }
  
/**
 * Deletes a Node from this Config. This backend will no longer receive traffic for the configured port of this NodeBalancer.

This does not change or remove the Linode whose address was used in the creation of this Node.

 * @summary Node Delete
 */
const deleteNodeBalancerConfigNode = (
    nodeBalancerId: number,
    configId: number,
    nodeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteNodeBalancerConfigNode200>(
      {url: `/nodebalancers/${nodeBalancerId}/configs/${configId}/nodes/${nodeId}`, method: 'delete'
    },
      options);
    }
  
/**
 * View information for Firewalls assigned to this NodeBalancer.

 * @summary Firewalls List
 */
const getNodeBalancerFirewalls = (
    nodeBalancerId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetNodeBalancerFirewalls200>(
      {url: `/nodebalancers/${nodeBalancerId}/firewalls`, method: 'get'
    },
      options);
    }
  
/**
 * Returns detailed statistics about the requested NodeBalancer.

 * @summary NodeBalancer Statistics View
 */
const getNodebalancersNodeBalancerIdStats = (
    nodeBalancerId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetNodebalancersNodeBalancerIdStats200>(
      {url: `/nodebalancers/${nodeBalancerId}/stats`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of all Object Storage Buckets that you own.


This endpoint is available for convenience. It is recommended that instead you
use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/serviceops/#list-buckets) directly.

 * @summary Object Storage Buckets List
 */
const getObjectStorageBuckets = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageBuckets200>(
      {url: `/object-storage/buckets`, method: 'get'
    },
      options);
    }
  
/**
 * Creates an Object Storage Bucket in the specified cluster.

Accounts with negative balances cannot access this command.

If the bucket already exists and is owned by you, this endpoint returns a `200` response with that bucket as if it had just been created.

This endpoint is available for convenience. It is recommended that instead you use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#put-bucket) directly.

 * @summary Object Storage Bucket Create
 */
const createObjectStorageBucket = (
    createObjectStorageBucketBody: BodyType<CreateObjectStorageBucketBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateObjectStorageBucket200>(
      {url: `/object-storage/buckets`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createObjectStorageBucketBody
    },
      options);
    }
  
/**
 * Returns a single Object Storage Bucket.


This endpoint is available for convenience. It is recommended that instead you
use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#get-bucket) directly.

 * @summary Object Storage Bucket View
 */
const getObjectStorageBucket = (
    clusterId: string,
    bucket: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageBucket200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}`, method: 'get'
    },
      options);
    }
  
/**
 * Removes a single bucket.

Bucket objects must be removed prior to removing the bucket. While buckets containing objects _may_ be
deleted using the [s3cmd command-line tool](/docs/products/storage/object-storage/guides/s3cmd/#delete-a-bucket), such operations
can fail if the bucket contains too many objects. The recommended
way to empty large buckets is to use the [S3 API to configure lifecycle policies](https://docs.ceph.com/en/latest/radosgw/bucketpolicy/#) that
remove all objects, then delete the bucket.

This endpoint is available for convenience. It is recommended that instead you
use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#delete-bucket) directly.

 * @summary Object Storage Bucket Remove
 */
const deleteObjectStorageBucket = (
    clusterId: string,
    bucket: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteObjectStorageBucket200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a list of Buckets in this cluster belonging to this Account.


This endpoint is available for convenience. It is recommended that instead you
use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#get-bucket) directly.

 * @summary Object Storage Buckets in Cluster List
 */
const getObjectStorageBucketinCluster = (
    clusterId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageBucketinCluster200>(
      {url: `/object-storage/buckets/${clusterId}`, method: 'get'
    },
      options);
    }
  
/**
 * Allows changing basic Cross-origin Resource Sharing (CORS) and Access Control Level (ACL) settings.
Only allows enabling/disabling CORS for all origins, and/or setting canned ACLs.


For more fine-grained control of both systems, please use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#put-bucket-acl) directly.

 * @summary Object Storage Bucket Access Modify
 */
const modifyObjectStorageBucketAccess = (
    clusterId: string,
    bucket: string,
    modifyObjectStorageBucketAccessBody: BodyType<ModifyObjectStorageBucketAccessBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ModifyObjectStorageBucketAccess200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}/access`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: modifyObjectStorageBucketAccessBody
    },
      options);
    }
  
/**
 * Allows changing basic Cross-origin Resource Sharing (CORS) and Access Control Level (ACL) settings.
Only allows enabling/disabling CORS for all origins, and/or setting canned ACLs.


For more fine-grained control of both systems, please use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/bucketops/#put-bucket-acl) directly.

 * @summary Object Storage Bucket Access Update
 */
const updateObjectStorageBucketAccess = (
    clusterId: string,
    bucket: string,
    updateObjectStorageBucketAccessBody: BodyType<UpdateObjectStorageBucketAccessBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateObjectStorageBucketAccess200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}/access`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateObjectStorageBucketAccessBody
    },
      options);
    }
  
/**
 * View an Object's configured Access Control List (ACL) in this Object Storage bucket.
ACLs define who can access your buckets and objects and specify the level of access
granted to those users.


This endpoint is available for convenience. It is recommended that instead you
use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/objectops/#get-object-acl) directly.

 * @summary Object Storage Object ACL Config View
 */
const viewObjectStorageBucketACL = (
    clusterId: string,
    bucket: string,
    params: ViewObjectStorageBucketACLParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ViewObjectStorageBucketACL200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}/object-acl`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Update an Object's configured Access Control List (ACL) in this Object Storage bucket.
ACLs define who can access your buckets and objects and specify the level of access
granted to those users.


This endpoint is available for convenience. It is recommended that instead you
use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/objectops/#set-object-acl) directly.

 * @summary Object Storage Object ACL Config Update
 */
const updateObjectStorageBucketACL = (
    clusterId: string,
    bucket: string,
    updateObjectStorageBucketACLBody: BodyType<UpdateObjectStorageBucketACLBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateObjectStorageBucketACL200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}/object-acl`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateObjectStorageBucketACLBody
    },
      options);
    }
  
/**
 * Returns the contents of a bucket. The contents are paginated using a `marker`,
which is the name of the last object on the previous page.  Objects may
be filtered by `prefix` and `delimiter` as well; see Query Parameters for more
information.


This endpoint is available for convenience. It is recommended that instead you
use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/objectops/#get-object) directly.

 * @summary Object Storage Bucket Contents List
 */
const getObjectStorageBucketContent = (
    clusterId: string,
    bucket: string,
    params?: GetObjectStorageBucketContentParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageBucketContent200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}/object-list`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a pre-signed URL to access a single Object in a bucket. This
can be used to share objects, and also to create/delete objects by using
the appropriate HTTP method in your request body's `method` parameter.


This endpoint is available for convenience. It is recommended that instead you
use the more [fully-featured S3 API](https://docs.ceph.com/en/latest/radosgw/s3/)
directly.

 * @summary Object Storage Object URL Create
 */
const createObjectStorageObjectURL = (
    clusterId: string,
    bucket: string,
    createObjectStorageObjectURLBody: BodyType<CreateObjectStorageObjectURLBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateObjectStorageObjectURL200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}/object-url`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createObjectStorageObjectURLBody
    },
      options);
    }
  
/**
 * Returns a paginated list of Object Storage Clusters that are available for
use.  Users can connect to the clusters with third party clients to create buckets
and upload objects.

 * @summary Clusters List
 */
const getObjectStorageClusters = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageClusters200>(
      {url: `/object-storage/clusters`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a single Object Storage Cluster.

 * @summary Cluster View
 */
const getObjectStorageCluster = (
    clusterId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageCluster200>(
      {url: `/object-storage/clusters/${clusterId}`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of Object Storage Keys for authenticating to
the Object Storage S3 API.

 * @summary Object Storage Keys List
 */
const getObjectStorageKeys = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageKeys200>(
      {url: `/object-storage/keys`, method: 'get'
    },
      options);
    }
  
/**
 * Provisions a new Object Storage Key on your account.

* Accounts with negative balances cannot access this command.
* A successful request triggers an `obj_access_key_create` event.
* To create a Limited Access Key with specific permissions, send a `bucket_access` array.
* To create a Limited Access Key without access to any buckets, send an empty `bucket_access` array.
* To create an Access Key with unlimited access to all clusters and all buckets, omit the `bucket_access` array.

 * @summary Object Storage Key Create
 */
const createObjectStorageKeys = (
    createObjectStorageKeysBody: BodyType<NonReadonly<CreateObjectStorageKeysBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateObjectStorageKeys200>(
      {url: `/object-storage/keys`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createObjectStorageKeysBody
    },
      options);
    }
  
/**
 * Returns a single Object Storage Key provisioned for your account.

 * @summary Object Storage Key View
 */
const getObjectStorageKey = (
    keyId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageKey200>(
      {url: `/object-storage/keys/${keyId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates an Object Storage Key on your account.

* A successful request triggers an `obj_access_key_update` event.

 * @summary Object Storage Key Update
 */
const updateObjectStorageKey = (
    keyId: number,
    updateObjectStorageKeyBody: BodyType<UpdateObjectStorageKeyBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateObjectStorageKey200>(
      {url: `/object-storage/keys/${keyId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateObjectStorageKeyBody
    },
      options);
    }
  
/**
 * Revokes an Object Storage Key. This keypair will no longer be usable by third-party clients.

* A successful request triggers an `obj_access_key_delete` event.

 * @summary Object Storage Key Revoke
 */
const deleteObjectStorageKey = (
    keyId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteObjectStorageKey200>(
      {url: `/object-storage/keys/${keyId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Cancel Object Storage on an Account.

**Warning**: Removes all buckets and their contents from your Account. This data is irretrievable once removed.

 * @summary Object Storage Cancel
 */
const cancelObjectStorage = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CancelObjectStorage200>(
      {url: `/object-storage/cancel`, method: 'post'
    },
      options);
    }
  
/**
 * Returns a boolean value indicating if this bucket has a corresponding TLS/SSL certificate that was
uploaded by an Account user.

 * @summary Object Storage TLS/SSL Cert View
 */
const getObjectStorageSSL = (
    clusterId: string,
    bucket: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageSSL200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}/ssl`, method: 'get'
    },
      options);
    }
  
/**
 * Upload a TLS/SSL certificate and private key to be served when you visit your Object Storage bucket via HTTPS.
Your TLS/SSL certificate and private key are stored encrypted at rest.


To replace an expired certificate, [delete your current certificate](/docs/api/object-storage/#object-storage-tlsssl-cert-delete)
and upload a new one.

 * @summary Object Storage TLS/SSL Cert Upload
 */
const createObjectStorageSSL = (
    clusterId: string,
    bucket: string,
    createObjectStorageSSLBody: BodyType<CreateObjectStorageSSLBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateObjectStorageSSL200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}/ssl`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createObjectStorageSSLBody
    },
      options);
    }
  
/**
 * Deletes this Object Storage bucket's user uploaded TLS/SSL certificate and private key.

 * @summary Object Storage TLS/SSL Cert Delete
 */
const deleteObjectStorageSSL = (
    clusterId: string,
    bucket: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteObjectStorageSSL200>(
      {url: `/object-storage/buckets/${clusterId}/${bucket}/ssl`, method: 'delete'
    },
      options);
    }
  
/**
 * The amount of outbound data transfer used by your account's Object Storage buckets.
Object Storage adds 1 terabyte of outbound data transfer to your data transfer pool.
See the [Object Storage Overview](/docs/products/storage/object-storage/#pricing)
guide for details on Object Storage transfer quotas.

 * @summary Object Storage Transfer View
 */
const getObjectStorageTransfer = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetObjectStorageTransfer200>(
      {url: `/object-storage/transfer`, method: 'get'
    },
      options);
    }
  
/**
 * Returns information about the current User. This can be used to see who is acting in applications where more than one token is managed. For example, in third-party OAuth applications.

This endpoint is always accessible, no matter what OAuth scopes the acting token has.

 * @summary Profile View
 */
const getProfile = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetProfile200>(
      {url: `/profile`, method: 'get'
    },
      options);
    }
  
/**
 * Update information in your Profile.  This endpoint requires the "account:read_write" OAuth Scope.

 * @summary Profile Update
 */
const updateProfile = (
    updateProfileBody: BodyType<NonReadonly<UpdateProfileBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateProfile200>(
      {url: `/profile`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateProfileBody
    },
      options);
    }
  
/**
 * This is a collection of OAuth apps that you've given access to your Account, and includes the level of access granted.

 * @summary Authorized Apps List
 */
const getProfileApps = (
    params?: GetProfileAppsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetProfileApps200>(
      {url: `/profile/apps`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Returns information about a single app you've authorized to access your Account.

 * @summary Authorized App View
 */
const getProfileApp = (
    appId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetProfileApp200>(
      {url: `/profile/apps/${appId}`, method: 'get'
    },
      options);
    }
  
/**
 * Expires this app token. This token may no longer be used to access your Account.

 * @summary App Access Revoke
 */
const deleteProfileApp = (
    appId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteProfileApp200>(
      {url: `/profile/apps/${appId}`, method: 'delete'
    },
      options);
    }
  
/**
 * This returns a GrantsResponse describing what the acting User has been granted access to.  For unrestricted users, this will return a  204 and no body because unrestricted users have access to everything without grants.  This will not return information about entities you do not have access to.  This endpoint is useful when writing third-party OAuth applications to see what options you should present to the acting User.

For example, if they do not have `global.add_linodes`, you might not display a button to deploy a new Linode.

Any client may access this endpoint; no OAuth scopes are required.

 * @summary Grants List
 */
const getProfileGrants = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetProfileGrants200 | void>(
      {url: `/profile/grants`, method: 'get'
    },
      options);
    }
  
/**
 * Disables Two Factor Authentication for your User. Once successful, login attempts from untrusted computers will only require a password before being successful. This is less secure, and is discouraged.

 * @summary Two Factor Authentication Disable
 */
const tfaDisable = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<TfaDisable200>(
      {url: `/profile/tfa-disable`, method: 'post'
    },
      options);
    }
  
/**
 * Generates a Two Factor secret for your User. To enable TFA for your User, enter the secret obtained from this command with the **Two Factor Authentication Confirm/Enable** ([POST /profile/tfa-enable-confirm](/docs/api/profile/#two-factor-authentication-confirmenable)) command.
Once enabled, logins from untrusted computers are required to provide
a TFA code before they are successful.

**Note**: Before you can enable TFA, security questions must be answered for your User by accessing the **Security Questions Answer** ([POST /profile/security-questions](/docs/api/profile/#security-questions-answer)) command.

 * @summary Two Factor Secret Create
 */
const tfaEnable = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<TfaEnable200>(
      {url: `/profile/tfa-enable`, method: 'post'
    },
      options);
    }
  
/**
 * Confirms that you can successfully generate Two Factor codes and enables TFA on your Account. Once this is complete, login attempts from untrusted computers will be required to provide a Two Factor code before they are successful.

 * @summary Two Factor Authentication Confirm/Enable
 */
const tfaConfirm = (
    tfaConfirmBody: BodyType<TfaConfirmBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<TfaConfirm200>(
      {url: `/profile/tfa-enable-confirm`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: tfaConfirmBody
    },
      options);
    }
  
/**
 * Returns a paginated list of Personal Access Tokens currently active for your User.

 * @summary Personal Access Tokens List
 */
const getPersonalAccessTokens = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetPersonalAccessTokens200>(
      {url: `/profile/tokens`, method: 'get'
    },
      options);
    }
  
/**
 * Creates a Personal Access Token for your User. The raw token will be returned in the response, but will never be returned again afterward so be sure to take note of it. You may create a token with _at most_ the scopes of your current token. The created token will be able to access your Account until the given expiry, or until it is revoked.

 * @summary Personal Access Token Create
 */
const createPersonalAccessToken = (
    createPersonalAccessTokenBody: BodyType<CreatePersonalAccessTokenBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreatePersonalAccessToken200>(
      {url: `/profile/tokens`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createPersonalAccessTokenBody
    },
      options);
    }
  
/**
 * Returns a single Personal Access Token.

 * @summary Personal Access Token View
 */
const getPersonalAccessToken = (
    tokenId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetPersonalAccessToken200>(
      {url: `/profile/tokens/${tokenId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a Personal Access Token.

 * @summary Personal Access Token Update
 */
const updatePersonalAccessToken = (
    tokenId: number,
    updatePersonalAccessTokenBody: BodyType<NonReadonly<UpdatePersonalAccessTokenBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdatePersonalAccessToken200>(
      {url: `/profile/tokens/${tokenId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updatePersonalAccessTokenBody
    },
      options);
    }
  
/**
 * Revokes a Personal Access Token. The token will be invalidated immediately, and requests using that token will fail with a 401. It is possible to revoke access to the token making the request to revoke a token, but keep in mind that doing so could lose you access to the api and require you to create a new token through some other means.

 * @summary Personal Access Token Revoke
 */
const deletePersonalAccessToken = (
    tokenId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeletePersonalAccessToken200>(
      {url: `/profile/tokens/${tokenId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a collection of successful account logins from this user during the last 90 days.

 * @summary Logins List
 */
const getProfileLogins = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetProfileLogins200>(
      {url: `/profile/logins`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a login object displaying information about a successful account login from this user.

 * @summary Login View
 */
const getProfileLogin = (
    loginId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetProfileLogin200>(
      {url: `/profile/logins/${loginId}`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a paginated list of active TrustedDevices for your User. Browsers with an active Remember Me Session are logged into your account until the session expires or is revoked.

 * @summary Trusted Devices List
 */
const getDevices = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetDevices200>(
      {url: `/profile/devices`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a single active TrustedDevice for your User.

 * @summary Trusted Device View
 */
const getTrustedDevice = (
    deviceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetTrustedDevice200>(
      {url: `/profile/devices/${deviceId}`, method: 'get'
    },
      options);
    }
  
/**
 * Revoke an active TrustedDevice for your User.  Once a TrustedDevice is revoked, this device will have to log in again before accessing your Linode account.

 * @summary Trusted Device Revoke
 */
const revokeTrustedDevice = (
    deviceId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RevokeTrustedDevice200>(
      {url: `/profile/devices/${deviceId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a collection of security questions and their responses, if any, for your User Profile.

 * @summary Security Questions List
 */
const getSecurityQuestions = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetSecurityQuestions200>(
      {url: `/profile/security-questions`, method: 'get'
    },
      options);
    }
  
/**
 * Adds security question responses for your User.

Requires exactly three unique questions.

Previous responses are overwritten if answered or reset to `null` if unanswered.

**Note**: Security questions must be answered for your User prior to accessing the **Two Factor Secret Create** ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) command.

 * @summary Security Questions Answer
 */
const postSecurityQuestions = (
    postSecurityQuestionsBody: BodyType<PostSecurityQuestionsBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostSecurityQuestions200>(
      {url: `/profile/security-questions`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postSecurityQuestionsBody
    },
      options);
    }
  
/**
 * Returns a collection of SSH Keys you've added to your Profile.

 * @summary SSH Keys List
 */
const getSSHKeys = (
    params?: GetSSHKeysParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetSSHKeys200>(
      {url: `/profile/sshkeys`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Adds an SSH Key to your Account profile.

 * @summary SSH Key Add
 */
const addSSHKey = (
    addSSHKeyBody: BodyType<NonReadonly<AddSSHKeyBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AddSSHKey200>(
      {url: `/profile/sshkeys`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addSSHKeyBody
    },
      options);
    }
  
/**
 * Returns a single SSH Key object identified by `id` that you have access to view.

 * @summary SSH Key View
 */
const getSSHKey = (
    sshKeyId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetSSHKey200>(
      {url: `/profile/sshkeys/${sshKeyId}`, method: 'get'
    },
      options);
    }
  
/**
 * Updates an SSH Key that you have permission to `read_write`.

Only SSH key labels can be updated.

 * @summary SSH Key Update
 */
const updateSSHKey = (
    sshKeyId: number,
    updateSSHKeyBody: BodyType<UpdateSSHKeyBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateSSHKey200>(
      {url: `/profile/sshkeys/${sshKeyId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateSSHKeyBody
    },
      options);
    }
  
/**
 * Deletes an SSH Key you have access to.

**Note:** deleting an SSH Key will *not* remove it from any Linode or Disk that was deployed with `authorized_keys`. In those cases, the keys must be manually deleted on the Linode or Disk. This endpoint will only delete the key's association from your Profile.

 * @summary SSH Key Delete
 */
const deleteSSHKey = (
    sshKeyId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteSSHKey200>(
      {url: `/profile/sshkeys/${sshKeyId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Delete the verified phone number for the User making this request.

Use this command to opt out of SMS messages for the requesting User after a phone number has been verified with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

 * @summary Phone Number Delete
 */
const deleteProfilePhoneNumber = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteProfilePhoneNumber200>(
      {url: `/profile/phone-number`, method: 'delete'
    },
      options);
    }
  
/**
 * Send a one-time verification code via SMS message to the submitted phone number. Providing your phone number helps ensure you can securely access your Account in case other ways to connect are lost. Your phone number is only used to verify your identity by sending an SMS message. Standard carrier messaging fees may apply.

* By accessing this command you are opting in to receive SMS messages. You can opt out of SMS messages by using the **Phone Number Delete** ([DELETE /profile/phone-number](/docs/api/profile/#phone-number-delete)) command after your phone number is verified.

* Verification codes are valid for 10 minutes after they are sent.

* Subsequent requests made prior to code expiration result in sending the same code.

Once a verification code is received, verify your phone number with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

 * @summary Phone Number Verification Code Send
 */
const postProfilePhoneNumber = (
    postProfilePhoneNumberBody: BodyType<PostProfilePhoneNumberBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostProfilePhoneNumber200>(
      {url: `/profile/phone-number`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postProfilePhoneNumberBody
    },
      options);
    }
  
/**
 * Verify a phone number by confirming the one-time code received via SMS message after accessing the **Phone Verification Code Send** ([POST /profile/phone-number](/docs/api/profile/#phone-number-verification-code-send)) command.

* Verification codes are valid for 10 minutes after they are sent.

* Only the same User that made the verification code request can use that code with this command.

Once completed, the verified phone number is assigned to the User making the request. To change the verified phone number for a User, first use the **Phone Number Delete** ([DELETE /profile/phone-number](/docs/api/profile/#phone-number-delete)) command, then begin the verification process again with the **Phone Verification Code Send** ([POST /profile/phone-number](/docs/api/profile/#phone-number-verification-code-send)) command.

 * @summary Phone Number Verify
 */
const postProfilePhoneNumberVerify = (
    postProfilePhoneNumberVerifyBody: BodyType<PostProfilePhoneNumberVerifyBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostProfilePhoneNumberVerify200>(
      {url: `/profile/phone-number/verify`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postProfilePhoneNumberVerifyBody
    },
      options);
    }
  
/**
 * View a list of user preferences tied to the OAuth client that generated
the token making the request. The user preferences endpoints allow
consumers of the API to store arbitrary JSON data, such as a user's font
size preference or preferred display name. User preferences are available
for each OAuth client registered to your account, and as such an account can
have multiple user preferences.

 * @summary User Preferences View
 */
const getUserPreferences = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetUserPreferences200>(
      {url: `/profile/preferences`, method: 'get'
    },
      options);
    }
  
/**
 * Updates a user's preferences. These preferences are tied to the OAuth client that generated the token making the request. The user preferences endpoints allow consumers of the API to store arbitrary JSON data, such as a user's font size preference or preferred display name. An account may have multiple preferences. Preferences, and the pertaining request body, may contain any arbitrary JSON data that the user would like to store.

 * @summary User Preferences Update
 */
const updateUserPreferences = (
    updateUserPreferencesBody: BodyType<UpdateUserPreferencesBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateUserPreferences200>(
      {url: `/profile/preferences`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateUserPreferencesBody
    },
      options);
    }
  
/**
 * Lists the Regions available for Linode services. Not all services are guaranteed to be
available in all Regions.

 * @summary Regions List
 */
const getRegions = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetRegions200>(
      {url: `/regions`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a single Region.

 * @summary Region View
 */
const getRegion = (
    regionId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetRegion200>(
      {url: `/regions/${regionId}`, method: 'get'
    },
      options);
    }
  
/**
 * Returns availability data for a single Region.

 * @summary Region Availability View
 */
const getRegionAvailability = (
    regionId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetRegionAvailability200Item[]>(
      {url: `/regions/${regionId}/availability`, method: 'get'
    },
      options);
    }
  
/**
 * Returns availability data for all Regions.

Currently, this command returns availability of select premium and GPU plans for select regions.

 * @summary Regions Availability List
 */
const getRegionsAvailability = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetRegionsAvailability200>(
      {url: `/regions/availability`, method: 'get'
    },
      options);
    }
  
/**
 * Returns a collection of Support Tickets on your Account. Support Tickets can be both tickets you open with Linode for support, as well as tickets generated by Linode regarding your Account.
This collection includes all Support Tickets generated on your Account, with open tickets returned first.

 * @summary Support Tickets List
 */
const getTickets = (
    params?: GetTicketsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetTickets200>(
      {url: `/support/tickets`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Open a Support Ticket.
Only one of the ID attributes (`linode_id`, `domain_id`, etc.) can be set on a single Support Ticket.

 * @summary Support Ticket Open
 */
const createTicket = (
    createTicketBody: BodyType<CreateTicketBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateTicket200>(
      {url: `/support/tickets`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createTicketBody
    },
      options);
    }
  
/**
 * Returns a Support Ticket under your Account.

 * @summary Support Ticket View
 */
const getTicket = (
    ticketId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetTicket200>(
      {url: `/support/tickets/${ticketId}`, method: 'get'
    },
      options);
    }
  
/**
 * Adds a file attachment to an existing Support
Ticket on your Account. File attachments are used to assist our
Support team in resolving your Ticket. Examples of attachments
are screen shots and text files that provide additional information.

The file attachment is submitted in the request as multipart/form-data.

**Note**: Accepted file extensions include: .gif, .jpg, .jpeg, .pjpg,
.pjpeg, .tif, .tiff, .png, .pdf, or .txt.

 * @summary Support Ticket Attachment Create
 */
const createTicketAttachment = (
    ticketId: number,
    createTicketAttachmentBody: BodyType<CreateTicketAttachmentBody>,
 options?: SecondParameter<typeof customInstance>,) => {const formData = new FormData();
formData.append('data', createTicketAttachmentBody)

      return customInstance<CreateTicketAttachment200>(
      {url: `/support/tickets/${ticketId}/attachments`, method: 'post',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
/**
 * Closes a Support Ticket you have access to modify.

 * @summary Support Ticket Close
 */
const closeTicket = (
    ticketId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CloseTicket200>(
      {url: `/support/tickets/${ticketId}/close`, method: 'post'
    },
      options);
    }
  
/**
 * Returns a collection of replies to a Support Ticket on your Account.

 * @summary Replies List
 */
const getTicketReplies = (
    ticketId: number,
    params?: GetTicketRepliesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetTicketReplies200>(
      {url: `/support/tickets/${ticketId}/replies`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Adds a reply to an existing Support Ticket.

 * @summary Reply Create
 */
const createTicketReply = (
    ticketId: number,
    createTicketReplyBody: BodyType<CreateTicketReplyBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateTicketReply200>(
      {url: `/support/tickets/${ticketId}/replies`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createTicketReplyBody
    },
      options);
    }
  
/**
 * Tags are User-defined labels attached to objects in your Account, such as Linodes. They are used for specifying and grouping attributes of objects that are relevant to the User.

This endpoint returns a paginated list of Tags on your account.

**Important**: You must be an unrestricted User in order to access, add, or modify
Tags information.

 * @summary Tags List
 */
const getTags = (
    params?: GetTagsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetTags200>(
      {url: `/tags`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a new Tag and optionally tags requested objects with it immediately.

**Important**: You must be an unrestricted User in order to access, add, or modify
Tags information.

 * @summary New Tag Create
 */
const createTag = (
    createTagBody: BodyType<CreateTagBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateTag200>(
      {url: `/tags`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createTagBody
    },
      options);
    }
  
/**
 * Returns a paginated list of all objects you've tagged with the requested Tag. This is a mixed collection of all object types.

**Important**: You must be an unrestricted User in order to access, add, or modify
Tags information.

 * @summary Tagged Objects List
 */
const getTaggedObjects = (
    tagLabel: string,
    params?: GetTaggedObjectsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetTaggedObjects200>(
      {url: `/tags/${tagLabel}`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Remove a Tag from all objects and delete it.

**Important**: You must be an unrestricted User in order to access, add, or modify Tags information.

 * @summary Tag Delete
 */
const deleteTag = (
    tagLabel: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteTag200>(
      {url: `/tags/${tagLabel}`, method: 'delete'
    },
      options);
    }
  
/**
 * Returns a paginated list of Volumes you have permission to view.

 * @summary Volumes List
 */
const getVolumes = (
    params?: GetVolumesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetVolumes200>(
      {url: `/volumes`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Creates a Volume on your Account. In order for this to complete successfully, your User must have the `add_volumes` grant. Creating a new Volume will start accruing additional charges on your account.

 * @summary Volume Create
 */
const createVolume = (
    createVolumeBody: BodyType<CreateVolumeBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateVolume200>(
      {url: `/volumes`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createVolumeBody
    },
      options);
    }
  
/**
 * Get information about a single Volume.

 * @summary Volume View
 */
const getVolume = (
    volumeId: number,
    params?: GetVolumeParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetVolume200>(
      {url: `/volumes/${volumeId}`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Updates a Volume that you have permission to `read_write`.

 * @summary Volume Update
 */
const updateVolume = (
    volumeId: number,
    updateVolumeBody: BodyType<NonReadonly<UpdateVolumeBody>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateVolume200>(
      {url: `/volumes/${volumeId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateVolumeBody
    },
      options);
    }
  
/**
 * Deletes a Volume you have permission to `read_write`.

* **Deleting a Volume is a destructive action and cannot be undone.**

* Deleting stops billing for the Volume. You will be billed for time used within
the billing period the Volume was active.

* Volumes that are migrating cannot be deleted until the migration is finished.

 * @summary Volume Delete
 */
const deleteVolume = (
    volumeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteVolume200>(
      {url: `/volumes/${volumeId}`, method: 'delete'
    },
      options);
    }
  
/**
 * Attaches a Volume on your Account to an existing Linode on your Account. In order for this request to complete successfully, your User must have `read_write` permission to the Volume and `read_write` permission to the Linode. Additionally, the Volume and Linode must be located in the same Region.

 * @summary Volume Attach
 */
const attachVolume = (
    volumeId: number,
    attachVolumeBody: BodyType<AttachVolumeBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AttachVolume200>(
      {url: `/volumes/${volumeId}/attach`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: attachVolumeBody
    },
      options);
    }
  
/**
 * Creates a Volume on your Account. In order for this request to complete successfully, your User must have the `add_volumes` grant. The new Volume will have the same size and data as the source Volume. Creating a new Volume will incur a charge on your Account.
* Only Volumes with a `status` of "active" can be cloned.

 * @summary Volume Clone
 */
const cloneVolume = (
    volumeId: number,
    cloneVolumeBody: BodyType<CloneVolumeBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CloneVolume200>(
      {url: `/volumes/${volumeId}/clone`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: cloneVolumeBody
    },
      options);
    }
  
/**
 * Detaches a Volume on your Account from a Linode on your Account. In order for this request to complete successfully, your User must have `read_write` access to the Volume and `read_write` access to the Linode.

Volumes are automatically detached from deleted Linodes.

 * @summary Volume Detach
 */
const detachVolume = (
    volumeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DetachVolume200>(
      {url: `/volumes/${volumeId}/detach`, method: 'post'
    },
      options);
    }
  
/**
 * Resize an existing Volume on your Account. In order for this request to complete successfully, your User must have the `read_write` permissions to the Volume.
* Volumes can only be resized up.
* Only Volumes with a `status` of "active" can be resized.

 * @summary Volume Resize
 */
const resizeVolume = (
    volumeId: number,
    resizeVolumeBody: BodyType<ResizeVolumeBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ResizeVolume200>(
      {url: `/volumes/${volumeId}/resize`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: resizeVolumeBody
    },
      options);
    }
  
return {getAccount,updateAccount,getAvailability,getAccountAvailability,getEnrolledBetaPrograms,enrollBetaProgram,getEnrolledBetaProgram,cancelAccount,createCreditCard,getEntityTransfers,createEntityTransfer,getEntityTransfer,deleteEntityTransfer,acceptEntityTransfer,getEvents,getEvent,eventRead,eventSeen,getInvoices,getInvoice,getInvoiceItems,getAccountLogins,getAccountLogin,getMaintenance,getNotifications,getClients,createClient,getClient,updateClient,deleteClient,resetClientSecret,getClientThumbnail,setClientThumbnail,getPaymentMethods,createPaymentMethod,getPaymentMethod,deletePaymentMethod,makePaymentMethodDefault,getPayments,createPayment,getPayment,createPayPalPayment,executePayPalPayment,createPromoCredit,getServiceTransfers,createServiceTransfer,getServiceTransfer,deleteServiceTransfer,acceptServiceTransfer,getAccountSettings,updateAccountSettings,enableAccountManaged,getTransfer,getUsers,createUser,getUser,updateUser,deleteUser,getUserGrants,updateUserGrants,getBetaPrograms,getBetaProgram,getDatabasesEngines,getDatabasesEngine,getDatabasesInstances,getDatabasesMySQLInstances,postDatabasesMySQLInstances,getDatabasesMySQLInstance,deleteDatabasesMySQLInstance,putDatabasesMySQLInstance,getDatabasesMySQLInstanceBackups,postDatabasesMySQLInstanceBackup,getDatabasesMySQLInstanceBackup,deleteDatabaseMySQLInstanceBackup,postDatabasesMySQLInstanceBackupRestore,getDatabasesMySQLInstanceCredentials,postDatabasesMySQLInstanceCredentialsReset,getDatabasesMySQLInstanceSSL,postDatabasesMySQLInstancePatch,getDatabasesPostgreSQLInstances,postDatabasesPostgreSQLInstances,getDatabasesPostgreSQLInstance,deleteDatabasesPostgreSQLInstance,putDatabasesPostgreSQLInstance,getDatabasesPostgreSQLInstanceBackups,postDatabasesPostgreSQLInstanceBackup,getDatabasesPostgreSQLInstanceBackup,deleteDatabasePostgreSQLInstanceBackup,postDatabasesPostgreSQLInstanceBackupRestore,getDatabasesPostgreSQLInstanceCredentials,postDatabasesPostgreSQLInstanceCredentialsReset,getDatabasesPostgreSQLInstanceSSL,postDatabasesPostgreSQLInstancePatch,getDatabasesTypes,getDatabasesType,getDomains,createDomain,getDomain,updateDomain,deleteDomain,getDomainZone,importDomain,cloneDomain,getDomainRecords,createDomainRecord,getDomainRecord,updateDomainRecord,deleteDomainRecord,getImages,createImage,postImagesUpload,getImage,updateImage,deleteImage,getLinodeInstances,createLinodeInstance,getLinodeInstance,updateLinodeInstance,deleteLinodeInstance,getBackups,createSnapshot,cancelBackups,enableBackups,getBackup,restoreBackup,bootLinodeInstance,cloneLinodeInstance,getLinodeConfigs,addLinodeConfig,getLinodeConfig,updateLinodeConfig,deleteLinodeConfig,getLinodeDisks,addLinodeDisk,getLinodeDisk,updateDisk,deleteDisk,cloneLinodeDisk,resetDiskPassword,resizeDisk,getLinodeFirewalls,getLinodeIPs,addLinodeIP,getLinodeIP,updateLinodeIP,removeLinodeIP,getKernels,getKernel,migrateLinodeInstance,mutateLinodeInstance,getLinodeNodeBalancers,resetLinodePassword,rebootLinodeInstance,rebuildLinodeInstance,rescueLinodeInstance,resizeLinodeInstance,shutdownLinodeInstance,getLinodeTransfer,getLinodeTransferByYearMonth,getLinodeStats,getLinodeStatsByYearMonth,getLinodeVolumes,getStackScripts,addStackScript,getStackScript,updateStackScript,deleteStackScript,getLinodeTypes,getLinodeType,getLKEClusters,createLKECluster,getLKECluster,putLKECluster,deleteLKECluster,getLKEClusterPools,postLKEClusterPools,postLKEClusterRecycle,getLKENodePool,putLKENodePool,deleteLKENodePool,postLKEClusterPoolRecycle,getLKEClusterNode,deleteLKEClusterNode,postLKEClusterNodeRecycle,getLKEClusterAPIEndpoints,getLKEClusterDashboard,getLKEClusterKubeconfig,deleteLKEClusterKubeconfig,postLKEClusterRegenerate,postLKECServiceTokenDelete,getLKEVersions,getLKEVersion,getLongviewClients,createLongviewClient,getLongviewClient,updateLongviewClient,deleteLongviewClient,getLongviewPlan,updateLongviewPlan,getLongviewSubscriptions,getLongviewSubscription,getManagedContacts,createManagedContact,getManagedContact,updateManagedContact,deleteManagedContact,getManagedCredentials,createManagedCredential,getManagedCredential,updateManagedCredential,updateManagedCredentialUsernamePassword,deleteManagedCredential,viewManagedSSHKey,getManagedIssues,getManagedIssue,getManagedLinodeSettings,getManagedLinodeSetting,updateManagedLinodeSetting,getManagedServices,createManagedService,getManagedService,updateManagedService,deleteManagedService,disableManagedService,enableManagedService,getManagedStats,getIPs,allocateIP,getIP,updateIP,assignIPs,shareIPs,assignIPv4s,shareIPv4s,getIPv6Pools,getIPv6Ranges,postIPv6Range,getIPv6Range,deleteIPv6Range,getFirewalls,createFirewalls,getFirewall,updateFirewall,deleteFirewall,getFirewallDevices,createFirewallDevice,getFirewallDevice,deleteFirewallDevice,getFirewallRules,updateFirewallRules,getVLANs,getNodeBalancers,createNodeBalancer,getNodeBalancer,updateNodeBalancer,deleteNodeBalancer,getNodeBalancerConfigs,createNodeBalancerConfig,getNodeBalancerConfig,updateNodeBalancerConfig,deleteNodeBalancerConfig,rebuildNodeBalancerConfig,getNodeBalancerConfigNodes,createNodeBalancerNode,getNodeBalancerNode,updateNodeBalancerNode,deleteNodeBalancerConfigNode,getNodeBalancerFirewalls,getNodebalancersNodeBalancerIdStats,getObjectStorageBuckets,createObjectStorageBucket,getObjectStorageBucket,deleteObjectStorageBucket,getObjectStorageBucketinCluster,modifyObjectStorageBucketAccess,updateObjectStorageBucketAccess,viewObjectStorageBucketACL,updateObjectStorageBucketACL,getObjectStorageBucketContent,createObjectStorageObjectURL,getObjectStorageClusters,getObjectStorageCluster,getObjectStorageKeys,createObjectStorageKeys,getObjectStorageKey,updateObjectStorageKey,deleteObjectStorageKey,cancelObjectStorage,getObjectStorageSSL,createObjectStorageSSL,deleteObjectStorageSSL,getObjectStorageTransfer,getProfile,updateProfile,getProfileApps,getProfileApp,deleteProfileApp,getProfileGrants,tfaDisable,tfaEnable,tfaConfirm,getPersonalAccessTokens,createPersonalAccessToken,getPersonalAccessToken,updatePersonalAccessToken,deletePersonalAccessToken,getProfileLogins,getProfileLogin,getDevices,getTrustedDevice,revokeTrustedDevice,getSecurityQuestions,postSecurityQuestions,getSSHKeys,addSSHKey,getSSHKey,updateSSHKey,deleteSSHKey,deleteProfilePhoneNumber,postProfilePhoneNumber,postProfilePhoneNumberVerify,getUserPreferences,updateUserPreferences,getRegions,getRegion,getRegionAvailability,getRegionsAvailability,getTickets,createTicket,getTicket,createTicketAttachment,closeTicket,getTicketReplies,createTicketReply,getTags,createTag,getTaggedObjects,deleteTag,getVolumes,createVolume,getVolume,updateVolume,deleteVolume,attachVolume,cloneVolume,detachVolume,resizeVolume}};
export type GetAccountResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getAccount']>>>
export type UpdateAccountResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateAccount']>>>
export type GetAvailabilityResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getAvailability']>>>
export type GetAccountAvailabilityResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getAccountAvailability']>>>
export type GetEnrolledBetaProgramsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getEnrolledBetaPrograms']>>>
export type EnrollBetaProgramResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['enrollBetaProgram']>>>
export type GetEnrolledBetaProgramResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getEnrolledBetaProgram']>>>
export type CancelAccountResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['cancelAccount']>>>
export type CreateCreditCardResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createCreditCard']>>>
export type GetEntityTransfersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getEntityTransfers']>>>
export type CreateEntityTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createEntityTransfer']>>>
export type GetEntityTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getEntityTransfer']>>>
export type DeleteEntityTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteEntityTransfer']>>>
export type AcceptEntityTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['acceptEntityTransfer']>>>
export type GetEventsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getEvents']>>>
export type GetEventResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getEvent']>>>
export type EventReadResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['eventRead']>>>
export type EventSeenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['eventSeen']>>>
export type GetInvoicesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getInvoices']>>>
export type GetInvoiceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getInvoice']>>>
export type GetInvoiceItemsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getInvoiceItems']>>>
export type GetAccountLoginsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getAccountLogins']>>>
export type GetAccountLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getAccountLogin']>>>
export type GetMaintenanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getMaintenance']>>>
export type GetNotificationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getNotifications']>>>
export type GetClientsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getClients']>>>
export type CreateClientResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createClient']>>>
export type GetClientResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getClient']>>>
export type UpdateClientResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateClient']>>>
export type DeleteClientResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteClient']>>>
export type ResetClientSecretResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['resetClientSecret']>>>
export type GetClientThumbnailResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getClientThumbnail']>>>
export type SetClientThumbnailResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['setClientThumbnail']>>>
export type GetPaymentMethodsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getPaymentMethods']>>>
export type CreatePaymentMethodResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createPaymentMethod']>>>
export type GetPaymentMethodResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getPaymentMethod']>>>
export type DeletePaymentMethodResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deletePaymentMethod']>>>
export type MakePaymentMethodDefaultResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['makePaymentMethodDefault']>>>
export type GetPaymentsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getPayments']>>>
export type CreatePaymentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createPayment']>>>
export type GetPaymentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getPayment']>>>
export type CreatePayPalPaymentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createPayPalPayment']>>>
export type ExecutePayPalPaymentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['executePayPalPayment']>>>
export type CreatePromoCreditResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createPromoCredit']>>>
export type GetServiceTransfersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getServiceTransfers']>>>
export type CreateServiceTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createServiceTransfer']>>>
export type GetServiceTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getServiceTransfer']>>>
export type DeleteServiceTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteServiceTransfer']>>>
export type AcceptServiceTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['acceptServiceTransfer']>>>
export type GetAccountSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getAccountSettings']>>>
export type UpdateAccountSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateAccountSettings']>>>
export type EnableAccountManagedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['enableAccountManaged']>>>
export type GetTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getTransfer']>>>
export type GetUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getUsers']>>>
export type CreateUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createUser']>>>
export type GetUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getUser']>>>
export type UpdateUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateUser']>>>
export type DeleteUserResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteUser']>>>
export type GetUserGrantsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getUserGrants']>>>
export type UpdateUserGrantsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateUserGrants']>>>
export type GetBetaProgramsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getBetaPrograms']>>>
export type GetBetaProgramResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getBetaProgram']>>>
export type GetDatabasesEnginesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesEngines']>>>
export type GetDatabasesEngineResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesEngine']>>>
export type GetDatabasesInstancesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesInstances']>>>
export type GetDatabasesMySQLInstancesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesMySQLInstances']>>>
export type PostDatabasesMySQLInstancesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesMySQLInstances']>>>
export type GetDatabasesMySQLInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesMySQLInstance']>>>
export type DeleteDatabasesMySQLInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteDatabasesMySQLInstance']>>>
export type PutDatabasesMySQLInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['putDatabasesMySQLInstance']>>>
export type GetDatabasesMySQLInstanceBackupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesMySQLInstanceBackups']>>>
export type PostDatabasesMySQLInstanceBackupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesMySQLInstanceBackup']>>>
export type GetDatabasesMySQLInstanceBackupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesMySQLInstanceBackup']>>>
export type DeleteDatabaseMySQLInstanceBackupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteDatabaseMySQLInstanceBackup']>>>
export type PostDatabasesMySQLInstanceBackupRestoreResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesMySQLInstanceBackupRestore']>>>
export type GetDatabasesMySQLInstanceCredentialsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesMySQLInstanceCredentials']>>>
export type PostDatabasesMySQLInstanceCredentialsResetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesMySQLInstanceCredentialsReset']>>>
export type GetDatabasesMySQLInstanceSSLResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesMySQLInstanceSSL']>>>
export type PostDatabasesMySQLInstancePatchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesMySQLInstancePatch']>>>
export type GetDatabasesPostgreSQLInstancesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesPostgreSQLInstances']>>>
export type PostDatabasesPostgreSQLInstancesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesPostgreSQLInstances']>>>
export type GetDatabasesPostgreSQLInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesPostgreSQLInstance']>>>
export type DeleteDatabasesPostgreSQLInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteDatabasesPostgreSQLInstance']>>>
export type PutDatabasesPostgreSQLInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['putDatabasesPostgreSQLInstance']>>>
export type GetDatabasesPostgreSQLInstanceBackupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesPostgreSQLInstanceBackups']>>>
export type PostDatabasesPostgreSQLInstanceBackupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesPostgreSQLInstanceBackup']>>>
export type GetDatabasesPostgreSQLInstanceBackupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesPostgreSQLInstanceBackup']>>>
export type DeleteDatabasePostgreSQLInstanceBackupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteDatabasePostgreSQLInstanceBackup']>>>
export type PostDatabasesPostgreSQLInstanceBackupRestoreResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesPostgreSQLInstanceBackupRestore']>>>
export type GetDatabasesPostgreSQLInstanceCredentialsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesPostgreSQLInstanceCredentials']>>>
export type PostDatabasesPostgreSQLInstanceCredentialsResetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesPostgreSQLInstanceCredentialsReset']>>>
export type GetDatabasesPostgreSQLInstanceSSLResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesPostgreSQLInstanceSSL']>>>
export type PostDatabasesPostgreSQLInstancePatchResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postDatabasesPostgreSQLInstancePatch']>>>
export type GetDatabasesTypesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesTypes']>>>
export type GetDatabasesTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDatabasesType']>>>
export type GetDomainsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDomains']>>>
export type CreateDomainResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createDomain']>>>
export type GetDomainResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDomain']>>>
export type UpdateDomainResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateDomain']>>>
export type DeleteDomainResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteDomain']>>>
export type GetDomainZoneResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDomainZone']>>>
export type ImportDomainResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['importDomain']>>>
export type CloneDomainResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['cloneDomain']>>>
export type GetDomainRecordsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDomainRecords']>>>
export type CreateDomainRecordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createDomainRecord']>>>
export type GetDomainRecordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDomainRecord']>>>
export type UpdateDomainRecordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateDomainRecord']>>>
export type DeleteDomainRecordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteDomainRecord']>>>
export type GetImagesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getImages']>>>
export type CreateImageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createImage']>>>
export type PostImagesUploadResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postImagesUpload']>>>
export type GetImageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getImage']>>>
export type UpdateImageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateImage']>>>
export type DeleteImageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteImage']>>>
export type GetLinodeInstancesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeInstances']>>>
export type CreateLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createLinodeInstance']>>>
export type GetLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeInstance']>>>
export type UpdateLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateLinodeInstance']>>>
export type DeleteLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteLinodeInstance']>>>
export type GetBackupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getBackups']>>>
export type CreateSnapshotResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createSnapshot']>>>
export type CancelBackupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['cancelBackups']>>>
export type EnableBackupsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['enableBackups']>>>
export type GetBackupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getBackup']>>>
export type RestoreBackupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['restoreBackup']>>>
export type BootLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['bootLinodeInstance']>>>
export type CloneLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['cloneLinodeInstance']>>>
export type GetLinodeConfigsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeConfigs']>>>
export type AddLinodeConfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['addLinodeConfig']>>>
export type GetLinodeConfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeConfig']>>>
export type UpdateLinodeConfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateLinodeConfig']>>>
export type DeleteLinodeConfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteLinodeConfig']>>>
export type GetLinodeDisksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeDisks']>>>
export type AddLinodeDiskResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['addLinodeDisk']>>>
export type GetLinodeDiskResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeDisk']>>>
export type UpdateDiskResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateDisk']>>>
export type DeleteDiskResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteDisk']>>>
export type CloneLinodeDiskResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['cloneLinodeDisk']>>>
export type ResetDiskPasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['resetDiskPassword']>>>
export type ResizeDiskResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['resizeDisk']>>>
export type GetLinodeFirewallsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeFirewalls']>>>
export type GetLinodeIPsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeIPs']>>>
export type AddLinodeIPResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['addLinodeIP']>>>
export type GetLinodeIPResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeIP']>>>
export type UpdateLinodeIPResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateLinodeIP']>>>
export type RemoveLinodeIPResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['removeLinodeIP']>>>
export type GetKernelsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getKernels']>>>
export type GetKernelResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getKernel']>>>
export type MigrateLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['migrateLinodeInstance']>>>
export type MutateLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['mutateLinodeInstance']>>>
export type GetLinodeNodeBalancersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeNodeBalancers']>>>
export type ResetLinodePasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['resetLinodePassword']>>>
export type RebootLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['rebootLinodeInstance']>>>
export type RebuildLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['rebuildLinodeInstance']>>>
export type RescueLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['rescueLinodeInstance']>>>
export type ResizeLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['resizeLinodeInstance']>>>
export type ShutdownLinodeInstanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['shutdownLinodeInstance']>>>
export type GetLinodeTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeTransfer']>>>
export type GetLinodeTransferByYearMonthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeTransferByYearMonth']>>>
export type GetLinodeStatsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeStats']>>>
export type GetLinodeStatsByYearMonthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeStatsByYearMonth']>>>
export type GetLinodeVolumesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeVolumes']>>>
export type GetStackScriptsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getStackScripts']>>>
export type AddStackScriptResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['addStackScript']>>>
export type GetStackScriptResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getStackScript']>>>
export type UpdateStackScriptResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateStackScript']>>>
export type DeleteStackScriptResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteStackScript']>>>
export type GetLinodeTypesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeTypes']>>>
export type GetLinodeTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLinodeType']>>>
export type GetLKEClustersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKEClusters']>>>
export type CreateLKEClusterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createLKECluster']>>>
export type GetLKEClusterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKECluster']>>>
export type PutLKEClusterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['putLKECluster']>>>
export type DeleteLKEClusterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteLKECluster']>>>
export type GetLKEClusterPoolsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKEClusterPools']>>>
export type PostLKEClusterPoolsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postLKEClusterPools']>>>
export type PostLKEClusterRecycleResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postLKEClusterRecycle']>>>
export type GetLKENodePoolResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKENodePool']>>>
export type PutLKENodePoolResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['putLKENodePool']>>>
export type DeleteLKENodePoolResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteLKENodePool']>>>
export type PostLKEClusterPoolRecycleResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postLKEClusterPoolRecycle']>>>
export type GetLKEClusterNodeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKEClusterNode']>>>
export type DeleteLKEClusterNodeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteLKEClusterNode']>>>
export type PostLKEClusterNodeRecycleResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postLKEClusterNodeRecycle']>>>
export type GetLKEClusterAPIEndpointsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKEClusterAPIEndpoints']>>>
export type GetLKEClusterDashboardResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKEClusterDashboard']>>>
export type GetLKEClusterKubeconfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKEClusterKubeconfig']>>>
export type DeleteLKEClusterKubeconfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteLKEClusterKubeconfig']>>>
export type PostLKEClusterRegenerateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postLKEClusterRegenerate']>>>
export type PostLKECServiceTokenDeleteResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postLKECServiceTokenDelete']>>>
export type GetLKEVersionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKEVersions']>>>
export type GetLKEVersionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLKEVersion']>>>
export type GetLongviewClientsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLongviewClients']>>>
export type CreateLongviewClientResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createLongviewClient']>>>
export type GetLongviewClientResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLongviewClient']>>>
export type UpdateLongviewClientResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateLongviewClient']>>>
export type DeleteLongviewClientResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteLongviewClient']>>>
export type GetLongviewPlanResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLongviewPlan']>>>
export type UpdateLongviewPlanResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateLongviewPlan']>>>
export type GetLongviewSubscriptionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLongviewSubscriptions']>>>
export type GetLongviewSubscriptionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getLongviewSubscription']>>>
export type GetManagedContactsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedContacts']>>>
export type CreateManagedContactResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createManagedContact']>>>
export type GetManagedContactResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedContact']>>>
export type UpdateManagedContactResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateManagedContact']>>>
export type DeleteManagedContactResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteManagedContact']>>>
export type GetManagedCredentialsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedCredentials']>>>
export type CreateManagedCredentialResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createManagedCredential']>>>
export type GetManagedCredentialResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedCredential']>>>
export type UpdateManagedCredentialResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateManagedCredential']>>>
export type UpdateManagedCredentialUsernamePasswordResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateManagedCredentialUsernamePassword']>>>
export type DeleteManagedCredentialResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteManagedCredential']>>>
export type ViewManagedSSHKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['viewManagedSSHKey']>>>
export type GetManagedIssuesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedIssues']>>>
export type GetManagedIssueResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedIssue']>>>
export type GetManagedLinodeSettingsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedLinodeSettings']>>>
export type GetManagedLinodeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedLinodeSetting']>>>
export type UpdateManagedLinodeSettingResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateManagedLinodeSetting']>>>
export type GetManagedServicesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedServices']>>>
export type CreateManagedServiceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createManagedService']>>>
export type GetManagedServiceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedService']>>>
export type UpdateManagedServiceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateManagedService']>>>
export type DeleteManagedServiceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteManagedService']>>>
export type DisableManagedServiceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['disableManagedService']>>>
export type EnableManagedServiceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['enableManagedService']>>>
export type GetManagedStatsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getManagedStats']>>>
export type GetIPsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getIPs']>>>
export type AllocateIPResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['allocateIP']>>>
export type GetIPResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getIP']>>>
export type UpdateIPResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateIP']>>>
export type AssignIPsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['assignIPs']>>>
export type ShareIPsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['shareIPs']>>>
export type AssignIPv4sResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['assignIPv4s']>>>
export type ShareIPv4sResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['shareIPv4s']>>>
export type GetIPv6PoolsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getIPv6Pools']>>>
export type GetIPv6RangesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getIPv6Ranges']>>>
export type PostIPv6RangeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postIPv6Range']>>>
export type GetIPv6RangeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getIPv6Range']>>>
export type DeleteIPv6RangeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteIPv6Range']>>>
export type GetFirewallsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getFirewalls']>>>
export type CreateFirewallsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createFirewalls']>>>
export type GetFirewallResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getFirewall']>>>
export type UpdateFirewallResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateFirewall']>>>
export type DeleteFirewallResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteFirewall']>>>
export type GetFirewallDevicesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getFirewallDevices']>>>
export type CreateFirewallDeviceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createFirewallDevice']>>>
export type GetFirewallDeviceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getFirewallDevice']>>>
export type DeleteFirewallDeviceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteFirewallDevice']>>>
export type GetFirewallRulesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getFirewallRules']>>>
export type UpdateFirewallRulesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateFirewallRules']>>>
export type GetVLANsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getVLANs']>>>
export type GetNodeBalancersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getNodeBalancers']>>>
export type CreateNodeBalancerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createNodeBalancer']>>>
export type GetNodeBalancerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getNodeBalancer']>>>
export type UpdateNodeBalancerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateNodeBalancer']>>>
export type DeleteNodeBalancerResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteNodeBalancer']>>>
export type GetNodeBalancerConfigsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getNodeBalancerConfigs']>>>
export type CreateNodeBalancerConfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createNodeBalancerConfig']>>>
export type GetNodeBalancerConfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getNodeBalancerConfig']>>>
export type UpdateNodeBalancerConfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateNodeBalancerConfig']>>>
export type DeleteNodeBalancerConfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteNodeBalancerConfig']>>>
export type RebuildNodeBalancerConfigResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['rebuildNodeBalancerConfig']>>>
export type GetNodeBalancerConfigNodesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getNodeBalancerConfigNodes']>>>
export type CreateNodeBalancerNodeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createNodeBalancerNode']>>>
export type GetNodeBalancerNodeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getNodeBalancerNode']>>>
export type UpdateNodeBalancerNodeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateNodeBalancerNode']>>>
export type DeleteNodeBalancerConfigNodeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteNodeBalancerConfigNode']>>>
export type GetNodeBalancerFirewallsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getNodeBalancerFirewalls']>>>
export type GetNodebalancersNodeBalancerIdStatsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getNodebalancersNodeBalancerIdStats']>>>
export type GetObjectStorageBucketsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageBuckets']>>>
export type CreateObjectStorageBucketResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createObjectStorageBucket']>>>
export type GetObjectStorageBucketResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageBucket']>>>
export type DeleteObjectStorageBucketResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteObjectStorageBucket']>>>
export type GetObjectStorageBucketinClusterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageBucketinCluster']>>>
export type ModifyObjectStorageBucketAccessResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['modifyObjectStorageBucketAccess']>>>
export type UpdateObjectStorageBucketAccessResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateObjectStorageBucketAccess']>>>
export type ViewObjectStorageBucketACLResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['viewObjectStorageBucketACL']>>>
export type UpdateObjectStorageBucketACLResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateObjectStorageBucketACL']>>>
export type GetObjectStorageBucketContentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageBucketContent']>>>
export type CreateObjectStorageObjectURLResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createObjectStorageObjectURL']>>>
export type GetObjectStorageClustersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageClusters']>>>
export type GetObjectStorageClusterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageCluster']>>>
export type GetObjectStorageKeysResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageKeys']>>>
export type CreateObjectStorageKeysResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createObjectStorageKeys']>>>
export type GetObjectStorageKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageKey']>>>
export type UpdateObjectStorageKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateObjectStorageKey']>>>
export type DeleteObjectStorageKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteObjectStorageKey']>>>
export type CancelObjectStorageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['cancelObjectStorage']>>>
export type GetObjectStorageSSLResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageSSL']>>>
export type CreateObjectStorageSSLResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createObjectStorageSSL']>>>
export type DeleteObjectStorageSSLResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteObjectStorageSSL']>>>
export type GetObjectStorageTransferResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getObjectStorageTransfer']>>>
export type GetProfileResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getProfile']>>>
export type UpdateProfileResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateProfile']>>>
export type GetProfileAppsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getProfileApps']>>>
export type GetProfileAppResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getProfileApp']>>>
export type DeleteProfileAppResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteProfileApp']>>>
export type GetProfileGrantsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getProfileGrants']>>>
export type TfaDisableResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['tfaDisable']>>>
export type TfaEnableResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['tfaEnable']>>>
export type TfaConfirmResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['tfaConfirm']>>>
export type GetPersonalAccessTokensResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getPersonalAccessTokens']>>>
export type CreatePersonalAccessTokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createPersonalAccessToken']>>>
export type GetPersonalAccessTokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getPersonalAccessToken']>>>
export type UpdatePersonalAccessTokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updatePersonalAccessToken']>>>
export type DeletePersonalAccessTokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deletePersonalAccessToken']>>>
export type GetProfileLoginsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getProfileLogins']>>>
export type GetProfileLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getProfileLogin']>>>
export type GetDevicesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getDevices']>>>
export type GetTrustedDeviceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getTrustedDevice']>>>
export type RevokeTrustedDeviceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['revokeTrustedDevice']>>>
export type GetSecurityQuestionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getSecurityQuestions']>>>
export type PostSecurityQuestionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postSecurityQuestions']>>>
export type GetSSHKeysResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getSSHKeys']>>>
export type AddSSHKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['addSSHKey']>>>
export type GetSSHKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getSSHKey']>>>
export type UpdateSSHKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateSSHKey']>>>
export type DeleteSSHKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteSSHKey']>>>
export type DeleteProfilePhoneNumberResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteProfilePhoneNumber']>>>
export type PostProfilePhoneNumberResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postProfilePhoneNumber']>>>
export type PostProfilePhoneNumberVerifyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['postProfilePhoneNumberVerify']>>>
export type GetUserPreferencesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getUserPreferences']>>>
export type UpdateUserPreferencesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateUserPreferences']>>>
export type GetRegionsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getRegions']>>>
export type GetRegionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getRegion']>>>
export type GetRegionAvailabilityResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getRegionAvailability']>>>
export type GetRegionsAvailabilityResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getRegionsAvailability']>>>
export type GetTicketsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getTickets']>>>
export type CreateTicketResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createTicket']>>>
export type GetTicketResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getTicket']>>>
export type CreateTicketAttachmentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createTicketAttachment']>>>
export type CloseTicketResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['closeTicket']>>>
export type GetTicketRepliesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getTicketReplies']>>>
export type CreateTicketReplyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createTicketReply']>>>
export type GetTagsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getTags']>>>
export type CreateTagResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createTag']>>>
export type GetTaggedObjectsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getTaggedObjects']>>>
export type DeleteTagResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteTag']>>>
export type GetVolumesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getVolumes']>>>
export type CreateVolumeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['createVolume']>>>
export type GetVolumeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['getVolume']>>>
export type UpdateVolumeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['updateVolume']>>>
export type DeleteVolumeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['deleteVolume']>>>
export type AttachVolumeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['attachVolume']>>>
export type CloneVolumeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['cloneVolume']>>>
export type DetachVolumeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['detachVolume']>>>
export type ResizeVolumeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLinodeAPI>['resizeVolume']>>>
